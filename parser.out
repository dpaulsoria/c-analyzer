Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    AMPERSAND
    AUTO
    BACKSLASH
    BACKSPACE
    BREAK
    B_AND
    B_COMPLEMENT
    B_OR
    B_XOR
    CASE
    CHAR
    CHARACTER
    COLON
    COMMA
    CONST
    CONTINUE
    DEFAULT
    DO
    DOT
    DOUBLE_APOS
    DOUBLE_QUOTE
    ENUM
    EXTERN
    FF_PAGEBREAK
    FS_CHAR
    FS_DOUBLE
    FS_FLOAT
    FS_HEX
    FS_INT
    FS_LONG
    FS_LONG_DOUBLE
    FS_OCT
    FS_OCT_LONG
    FS_POINTER
    FS_SCI_NOTATION
    FS_STRING
    FS_UNSIGNED_INT
    FS_UNSIGNED_LONG
    GOTO
    HTAB
    IGNORE
    LBRACKET
    LCURL_BRACE
    LPAREN
    NEWLINE
    NULL
    PP_DATE
    PP_DTMACRO
    PP_ERROR
    PP_FILE
    PP_IF
    PP_IFDEF
    PP_IFNDEF
    PP_LINE
    PP_PRAGMA
    PP_STMACRO
    PP_TIME
    PP_TIMESTAMP
    PP_UNDEF
    QUESTIONMARK
    RBRACKET
    RCURL_BRACE
    REGISTER
    RETURN
    RPAREN
    SEMICOLON
    SHIFT_LEFT
    SHIFT_RIGHT
    SIGNED
    SINGLE_APOS
    SINGLE_QUOTE
    SIZEOF
    STATIC
    STRUCT
    TILDE
    TYPEDEF
    UNION
    UNSIGNED
    VOID
    VOLTILE
    VTAB

Grammar

Rule 0     S' -> EXPRESSION
Rule 1     EXPRESSION -> COMENTARIOLEX
Rule 2     EXPRESSION -> VARIABLELEX
Rule 3     EXPRESSION -> OPERATION
Rule 4     EXPRESSION -> OPERATIONS
Rule 5     EXPRESSION -> OPERATOR
Rule 6     EXPRESSION -> SENTENCIAS
Rule 7     EXPRESSION -> INCLUDE
Rule 8     EXPRESSION -> DEFINE
Rule 9     EXPRESSION -> PREPROCESOR_DIRECTIVE
Rule 10    EXPRESSION -> LOGICAL_OPERATOR
Rule 11    EXPRESSION -> COMPARISONS
Rule 12    EXPRESSION -> COMPARISON
Rule 13    EXPRESSION -> COMPARISON_OPERATOR
Rule 14    EXPRESSION -> DECIMAL_DECLARATION
Rule 15    EXPRESSION -> INTEGER_DECLARATION
Rule 16    EXPRESSION -> DECIMAL_TYPE
Rule 17    EXPRESSION -> INTEGER_TYPE
Rule 18    EXPRESSION -> ASSIGNMENT_DECLARATION
Rule 19    EXPRESSION -> ASSIGNMENT_OPERATOR
Rule 20    PREPROCESOR_DIRECTIVE -> DEFINE
Rule 21    PREPROCESOR_DIRECTIVE -> INCLUDE
Rule 22    DEFINE -> PP_DEFINE VARIABLELEX VALUE
Rule 23    INCLUDE -> PP_INCLUDE HEADER_LIB
Rule 24    VALUE -> NUMBER
Rule 25    VALUE -> STRING
Rule 26    NUMBER -> INTEGER
Rule 27    NUMBER -> DECIMAL
Rule 28    SENTENCIAS -> IF
Rule 29    SENTENCIAS -> ELSEIF
Rule 30    SENTENCIAS -> ELSE
Rule 31    SENTENCIAS -> FOR
Rule 32    SENTENCIAS -> WHILE
Rule 33    SENTENCIAS -> SWITCH
Rule 34    INTEGER_TYPE -> INT
Rule 35    INTEGER_TYPE -> SHORT
Rule 36    INTEGER_TYPE -> LONG
Rule 37    DECIMAL_TYPE -> FLOAT
Rule 38    DECIMAL_TYPE -> DOUBLE
Rule 39    INTEGER_DECLARATION -> INTEGER_TYPE VARNAME EQUAL INTEGER
Rule 40    DECIMAL_DECLARATION -> DECIMAL_TYPE VARNAME EQUAL DECIMAL
Rule 41    ASSIGNMENT_DECLARATION -> VARNAME ASSIGNMENT_OPERATOR SENTENCE
Rule 42    ASSIGNMENT_OPERATOR -> EQUAL
Rule 43    ASSIGNMENT_OPERATOR -> PLUS_EQUAL
Rule 44    ASSIGNMENT_OPERATOR -> MINUS_EQUAL
Rule 45    ASSIGNMENT_OPERATOR -> DIV_EQUAL
Rule 46    ASSIGNMENT_OPERATOR -> TIMES_EQUAL
Rule 47    ASSIGNMENT_OPERATOR -> MOD_EQUAL
Rule 48    ASSIGNMENT_OPERATOR -> AND_EQUAL
Rule 49    ASSIGNMENT_OPERATOR -> OR_EQUAL
Rule 50    ASSIGNMENT_OPERATOR -> XOR_EQUAL
Rule 51    ASSIGNMENT_OPERATOR -> COMPLEMENT_EQUAL
Rule 52    ASSIGNMENT_OPERATOR -> SHIFTL_EQUAL
Rule 53    ASSIGNMENT_OPERATOR -> SHIFTR_EQUAL
Rule 54    COMENTARIOLEX -> COMMENT
Rule 55    VARIABLELEX -> VARNAME
Rule 56    OPERATOR -> PLUS
Rule 57    OPERATOR -> MINUS
Rule 58    OPERATOR -> TIMES
Rule 59    OPERATOR -> MODULUS
Rule 60    OPERATOR -> DIVIDE
Rule 61    OPERATION -> NUMBER OPERATOR NUMBER
Rule 62    OPERATIONS -> OPERATION
Rule 63    OPERATIONS -> OPERATION OPERATOR OPERATIONS
Rule 64    COMPARISON_OPERATOR -> EQUAL_TO
Rule 65    COMPARISON_OPERATOR -> NOT_EQUAL
Rule 66    COMPARISON_OPERATOR -> GREATER_THAN
Rule 67    COMPARISON_OPERATOR -> LESS_THAN
Rule 68    COMPARISON_OPERATOR -> GREATER_EQUAL
Rule 69    COMPARISON_OPERATOR -> LESS_EQUAL
Rule 70    COMPARISON -> VALUE COMPARISON_OPERATOR VALUE
Rule 71    COMPARISONS -> COMPARISON
Rule 72    COMPARISONS -> COMPARISON LOGICAL_OPERATOR COMPARISONS
Rule 73    LOGICAL_OPERATOR -> AND
Rule 74    LOGICAL_OPERATOR -> OR
Rule 75    LOGICAL_OPERATOR -> NOT
Rule 76    SENTENCE -> NUMBER
Rule 77    SENTENCE -> VARNAME

Terminals, with rules where they appear

AMPERSAND            : 
AND                  : 73
AND_EQUAL            : 48
AUTO                 : 
BACKSLASH            : 
BACKSPACE            : 
BREAK                : 
B_AND                : 
B_COMPLEMENT         : 
B_OR                 : 
B_XOR                : 
CASE                 : 
CHAR                 : 
CHARACTER            : 
COLON                : 
COMMA                : 
COMMENT              : 54
COMPLEMENT_EQUAL     : 51
CONST                : 
CONTINUE             : 
DECIMAL              : 27 40
DEFAULT              : 
DIVIDE               : 60
DIV_EQUAL            : 45
DO                   : 
DOT                  : 
DOUBLE               : 38
DOUBLE_APOS          : 
DOUBLE_QUOTE         : 
ELSE                 : 30
ELSEIF               : 29
ENUM                 : 
EQUAL                : 39 40 42
EQUAL_TO             : 64
EXTERN               : 
FF_PAGEBREAK         : 
FLOAT                : 37
FOR                  : 31
FS_CHAR              : 
FS_DOUBLE            : 
FS_FLOAT             : 
FS_HEX               : 
FS_INT               : 
FS_LONG              : 
FS_LONG_DOUBLE       : 
FS_OCT               : 
FS_OCT_LONG          : 
FS_POINTER           : 
FS_SCI_NOTATION      : 
FS_STRING            : 
FS_UNSIGNED_INT      : 
FS_UNSIGNED_LONG     : 
GOTO                 : 
GREATER_EQUAL        : 68
GREATER_THAN         : 66
HEADER_LIB           : 23
HTAB                 : 
IF                   : 28
IGNORE               : 
INT                  : 34
INTEGER              : 26 39
LBRACKET             : 
LCURL_BRACE          : 
LESS_EQUAL           : 69
LESS_THAN            : 67
LONG                 : 36
LPAREN               : 
MINUS                : 57
MINUS_EQUAL          : 44
MODULUS              : 59
MOD_EQUAL            : 47
NEWLINE              : 
NOT                  : 75
NOT_EQUAL            : 65
NULL                 : 
OR                   : 74
OR_EQUAL             : 49
PLUS                 : 56
PLUS_EQUAL           : 43
PP_DATE              : 
PP_DEFINE            : 22
PP_DTMACRO           : 
PP_ERROR             : 
PP_FILE              : 
PP_IF                : 
PP_IFDEF             : 
PP_IFNDEF            : 
PP_INCLUDE           : 23
PP_LINE              : 
PP_PRAGMA            : 
PP_STMACRO           : 
PP_TIME              : 
PP_TIMESTAMP         : 
PP_UNDEF             : 
QUESTIONMARK         : 
RBRACKET             : 
RCURL_BRACE          : 
REGISTER             : 
RETURN               : 
RPAREN               : 
SEMICOLON            : 
SHIFTL_EQUAL         : 52
SHIFTR_EQUAL         : 53
SHIFT_LEFT           : 
SHIFT_RIGHT          : 
SHORT                : 35
SIGNED               : 
SINGLE_APOS          : 
SINGLE_QUOTE         : 
SIZEOF               : 
STATIC               : 
STRING               : 25
STRUCT               : 
SWITCH               : 33
TILDE                : 
TIMES                : 58
TIMES_EQUAL          : 46
TYPEDEF              : 
UNION                : 
UNSIGNED             : 
VARNAME              : 39 40 41 55 77
VOID                 : 
VOLTILE              : 
VTAB                 : 
WHILE                : 32
XOR_EQUAL            : 50
error                : 

Nonterminals, with rules where they appear

ASSIGNMENT_DECLARATION : 18
ASSIGNMENT_OPERATOR  : 19 41
COMENTARIOLEX        : 1
COMPARISON           : 12 71 72
COMPARISONS          : 11 72
COMPARISON_OPERATOR  : 13 70
DECIMAL_DECLARATION  : 14
DECIMAL_TYPE         : 16 40
DEFINE               : 8 20
EXPRESSION           : 0
INCLUDE              : 7 21
INTEGER_DECLARATION  : 15
INTEGER_TYPE         : 17 39
LOGICAL_OPERATOR     : 10 72
NUMBER               : 24 61 61 76
OPERATION            : 3 62 63
OPERATIONS           : 4 63
OPERATOR             : 5 61 63
PREPROCESOR_DIRECTIVE : 9
SENTENCE             : 41
SENTENCIAS           : 6
VALUE                : 22 70 70
VARIABLELEX          : 2 22

Parsing method: LALR

state 0

    (0) S' -> . EXPRESSION
    (1) EXPRESSION -> . COMENTARIOLEX
    (2) EXPRESSION -> . VARIABLELEX
    (3) EXPRESSION -> . OPERATION
    (4) EXPRESSION -> . OPERATIONS
    (5) EXPRESSION -> . OPERATOR
    (6) EXPRESSION -> . SENTENCIAS
    (7) EXPRESSION -> . INCLUDE
    (8) EXPRESSION -> . DEFINE
    (9) EXPRESSION -> . PREPROCESOR_DIRECTIVE
    (10) EXPRESSION -> . LOGICAL_OPERATOR
    (11) EXPRESSION -> . COMPARISONS
    (12) EXPRESSION -> . COMPARISON
    (13) EXPRESSION -> . COMPARISON_OPERATOR
    (14) EXPRESSION -> . DECIMAL_DECLARATION
    (15) EXPRESSION -> . INTEGER_DECLARATION
    (16) EXPRESSION -> . DECIMAL_TYPE
    (17) EXPRESSION -> . INTEGER_TYPE
    (18) EXPRESSION -> . ASSIGNMENT_DECLARATION
    (19) EXPRESSION -> . ASSIGNMENT_OPERATOR
    (54) COMENTARIOLEX -> . COMMENT
    (55) VARIABLELEX -> . VARNAME
    (61) OPERATION -> . NUMBER OPERATOR NUMBER
    (62) OPERATIONS -> . OPERATION
    (63) OPERATIONS -> . OPERATION OPERATOR OPERATIONS
    (56) OPERATOR -> . PLUS
    (57) OPERATOR -> . MINUS
    (58) OPERATOR -> . TIMES
    (59) OPERATOR -> . MODULUS
    (60) OPERATOR -> . DIVIDE
    (28) SENTENCIAS -> . IF
    (29) SENTENCIAS -> . ELSEIF
    (30) SENTENCIAS -> . ELSE
    (31) SENTENCIAS -> . FOR
    (32) SENTENCIAS -> . WHILE
    (33) SENTENCIAS -> . SWITCH
    (23) INCLUDE -> . PP_INCLUDE HEADER_LIB
    (22) DEFINE -> . PP_DEFINE VARIABLELEX VALUE
    (20) PREPROCESOR_DIRECTIVE -> . DEFINE
    (21) PREPROCESOR_DIRECTIVE -> . INCLUDE
    (73) LOGICAL_OPERATOR -> . AND
    (74) LOGICAL_OPERATOR -> . OR
    (75) LOGICAL_OPERATOR -> . NOT
    (71) COMPARISONS -> . COMPARISON
    (72) COMPARISONS -> . COMPARISON LOGICAL_OPERATOR COMPARISONS
    (70) COMPARISON -> . VALUE COMPARISON_OPERATOR VALUE
    (64) COMPARISON_OPERATOR -> . EQUAL_TO
    (65) COMPARISON_OPERATOR -> . NOT_EQUAL
    (66) COMPARISON_OPERATOR -> . GREATER_THAN
    (67) COMPARISON_OPERATOR -> . LESS_THAN
    (68) COMPARISON_OPERATOR -> . GREATER_EQUAL
    (69) COMPARISON_OPERATOR -> . LESS_EQUAL
    (40) DECIMAL_DECLARATION -> . DECIMAL_TYPE VARNAME EQUAL DECIMAL
    (39) INTEGER_DECLARATION -> . INTEGER_TYPE VARNAME EQUAL INTEGER
    (37) DECIMAL_TYPE -> . FLOAT
    (38) DECIMAL_TYPE -> . DOUBLE
    (34) INTEGER_TYPE -> . INT
    (35) INTEGER_TYPE -> . SHORT
    (36) INTEGER_TYPE -> . LONG
    (41) ASSIGNMENT_DECLARATION -> . VARNAME ASSIGNMENT_OPERATOR SENTENCE
    (42) ASSIGNMENT_OPERATOR -> . EQUAL
    (43) ASSIGNMENT_OPERATOR -> . PLUS_EQUAL
    (44) ASSIGNMENT_OPERATOR -> . MINUS_EQUAL
    (45) ASSIGNMENT_OPERATOR -> . DIV_EQUAL
    (46) ASSIGNMENT_OPERATOR -> . TIMES_EQUAL
    (47) ASSIGNMENT_OPERATOR -> . MOD_EQUAL
    (48) ASSIGNMENT_OPERATOR -> . AND_EQUAL
    (49) ASSIGNMENT_OPERATOR -> . OR_EQUAL
    (50) ASSIGNMENT_OPERATOR -> . XOR_EQUAL
    (51) ASSIGNMENT_OPERATOR -> . COMPLEMENT_EQUAL
    (52) ASSIGNMENT_OPERATOR -> . SHIFTL_EQUAL
    (53) ASSIGNMENT_OPERATOR -> . SHIFTR_EQUAL
    (26) NUMBER -> . INTEGER
    (27) NUMBER -> . DECIMAL
    (24) VALUE -> . NUMBER
    (25) VALUE -> . STRING

    COMMENT         shift and go to state 21
    VARNAME         shift and go to state 22
    PLUS            shift and go to state 24
    MINUS           shift and go to state 25
    TIMES           shift and go to state 26
    MODULUS         shift and go to state 27
    DIVIDE          shift and go to state 28
    IF              shift and go to state 29
    ELSEIF          shift and go to state 30
    ELSE            shift and go to state 31
    FOR             shift and go to state 32
    WHILE           shift and go to state 33
    SWITCH          shift and go to state 34
    PP_INCLUDE      shift and go to state 35
    PP_DEFINE       shift and go to state 36
    AND             shift and go to state 38
    OR              shift and go to state 39
    NOT             shift and go to state 40
    EQUAL_TO        shift and go to state 41
    NOT_EQUAL       shift and go to state 42
    GREATER_THAN    shift and go to state 43
    LESS_THAN       shift and go to state 44
    GREATER_EQUAL   shift and go to state 45
    LESS_EQUAL      shift and go to state 46
    FLOAT           shift and go to state 50
    DOUBLE          shift and go to state 51
    INT             shift and go to state 52
    SHORT           shift and go to state 53
    LONG            shift and go to state 54
    EQUAL           shift and go to state 47
    PLUS_EQUAL      shift and go to state 55
    MINUS_EQUAL     shift and go to state 56
    DIV_EQUAL       shift and go to state 57
    TIMES_EQUAL     shift and go to state 58
    MOD_EQUAL       shift and go to state 59
    AND_EQUAL       shift and go to state 60
    OR_EQUAL        shift and go to state 61
    XOR_EQUAL       shift and go to state 62
    COMPLEMENT_EQUAL shift and go to state 63
    SHIFTL_EQUAL    shift and go to state 64
    SHIFTR_EQUAL    shift and go to state 65
    INTEGER         shift and go to state 49
    DECIMAL         shift and go to state 48
    STRING          shift and go to state 66

    EXPRESSION                     shift and go to state 1
    COMENTARIOLEX                  shift and go to state 2
    VARIABLELEX                    shift and go to state 3
    OPERATION                      shift and go to state 4
    OPERATIONS                     shift and go to state 5
    OPERATOR                       shift and go to state 6
    SENTENCIAS                     shift and go to state 7
    INCLUDE                        shift and go to state 8
    DEFINE                         shift and go to state 9
    PREPROCESOR_DIRECTIVE          shift and go to state 10
    LOGICAL_OPERATOR               shift and go to state 11
    COMPARISONS                    shift and go to state 12
    COMPARISON                     shift and go to state 13
    COMPARISON_OPERATOR            shift and go to state 14
    DECIMAL_DECLARATION            shift and go to state 15
    INTEGER_DECLARATION            shift and go to state 16
    DECIMAL_TYPE                   shift and go to state 17
    INTEGER_TYPE                   shift and go to state 18
    ASSIGNMENT_DECLARATION         shift and go to state 19
    ASSIGNMENT_OPERATOR            shift and go to state 20
    NUMBER                         shift and go to state 23
    VALUE                          shift and go to state 37

state 1

    (0) S' -> EXPRESSION .



state 2

    (1) EXPRESSION -> COMENTARIOLEX .

    $end            reduce using rule 1 (EXPRESSION -> COMENTARIOLEX .)


state 3

    (2) EXPRESSION -> VARIABLELEX .

    $end            reduce using rule 2 (EXPRESSION -> VARIABLELEX .)


state 4

    (3) EXPRESSION -> OPERATION .
    (62) OPERATIONS -> OPERATION .
    (63) OPERATIONS -> OPERATION . OPERATOR OPERATIONS
    (56) OPERATOR -> . PLUS
    (57) OPERATOR -> . MINUS
    (58) OPERATOR -> . TIMES
    (59) OPERATOR -> . MODULUS
    (60) OPERATOR -> . DIVIDE

  ! reduce/reduce conflict for $end resolved using rule 3 (EXPRESSION -> OPERATION .)
    $end            reduce using rule 3 (EXPRESSION -> OPERATION .)
    PLUS            shift and go to state 24
    MINUS           shift and go to state 25
    TIMES           shift and go to state 26
    MODULUS         shift and go to state 27
    DIVIDE          shift and go to state 28

  ! $end            [ reduce using rule 62 (OPERATIONS -> OPERATION .) ]

    OPERATOR                       shift and go to state 67

state 5

    (4) EXPRESSION -> OPERATIONS .

    $end            reduce using rule 4 (EXPRESSION -> OPERATIONS .)


state 6

    (5) EXPRESSION -> OPERATOR .

    $end            reduce using rule 5 (EXPRESSION -> OPERATOR .)


state 7

    (6) EXPRESSION -> SENTENCIAS .

    $end            reduce using rule 6 (EXPRESSION -> SENTENCIAS .)


state 8

    (7) EXPRESSION -> INCLUDE .
    (21) PREPROCESOR_DIRECTIVE -> INCLUDE .

  ! reduce/reduce conflict for $end resolved using rule 7 (EXPRESSION -> INCLUDE .)
    $end            reduce using rule 7 (EXPRESSION -> INCLUDE .)

  ! $end            [ reduce using rule 21 (PREPROCESOR_DIRECTIVE -> INCLUDE .) ]


state 9

    (8) EXPRESSION -> DEFINE .
    (20) PREPROCESOR_DIRECTIVE -> DEFINE .

  ! reduce/reduce conflict for $end resolved using rule 8 (EXPRESSION -> DEFINE .)
    $end            reduce using rule 8 (EXPRESSION -> DEFINE .)

  ! $end            [ reduce using rule 20 (PREPROCESOR_DIRECTIVE -> DEFINE .) ]


state 10

    (9) EXPRESSION -> PREPROCESOR_DIRECTIVE .

    $end            reduce using rule 9 (EXPRESSION -> PREPROCESOR_DIRECTIVE .)


state 11

    (10) EXPRESSION -> LOGICAL_OPERATOR .

    $end            reduce using rule 10 (EXPRESSION -> LOGICAL_OPERATOR .)


state 12

    (11) EXPRESSION -> COMPARISONS .

    $end            reduce using rule 11 (EXPRESSION -> COMPARISONS .)


state 13

    (12) EXPRESSION -> COMPARISON .
    (71) COMPARISONS -> COMPARISON .
    (72) COMPARISONS -> COMPARISON . LOGICAL_OPERATOR COMPARISONS
    (73) LOGICAL_OPERATOR -> . AND
    (74) LOGICAL_OPERATOR -> . OR
    (75) LOGICAL_OPERATOR -> . NOT

  ! reduce/reduce conflict for $end resolved using rule 12 (EXPRESSION -> COMPARISON .)
    $end            reduce using rule 12 (EXPRESSION -> COMPARISON .)
    AND             shift and go to state 38
    OR              shift and go to state 39
    NOT             shift and go to state 40

  ! $end            [ reduce using rule 71 (COMPARISONS -> COMPARISON .) ]

    LOGICAL_OPERATOR               shift and go to state 68

state 14

    (13) EXPRESSION -> COMPARISON_OPERATOR .

    $end            reduce using rule 13 (EXPRESSION -> COMPARISON_OPERATOR .)


state 15

    (14) EXPRESSION -> DECIMAL_DECLARATION .

    $end            reduce using rule 14 (EXPRESSION -> DECIMAL_DECLARATION .)


state 16

    (15) EXPRESSION -> INTEGER_DECLARATION .

    $end            reduce using rule 15 (EXPRESSION -> INTEGER_DECLARATION .)


state 17

    (16) EXPRESSION -> DECIMAL_TYPE .
    (40) DECIMAL_DECLARATION -> DECIMAL_TYPE . VARNAME EQUAL DECIMAL

    $end            reduce using rule 16 (EXPRESSION -> DECIMAL_TYPE .)
    VARNAME         shift and go to state 69


state 18

    (17) EXPRESSION -> INTEGER_TYPE .
    (39) INTEGER_DECLARATION -> INTEGER_TYPE . VARNAME EQUAL INTEGER

    $end            reduce using rule 17 (EXPRESSION -> INTEGER_TYPE .)
    VARNAME         shift and go to state 70


state 19

    (18) EXPRESSION -> ASSIGNMENT_DECLARATION .

    $end            reduce using rule 18 (EXPRESSION -> ASSIGNMENT_DECLARATION .)


state 20

    (19) EXPRESSION -> ASSIGNMENT_OPERATOR .

    $end            reduce using rule 19 (EXPRESSION -> ASSIGNMENT_OPERATOR .)


state 21

    (54) COMENTARIOLEX -> COMMENT .

    $end            reduce using rule 54 (COMENTARIOLEX -> COMMENT .)


state 22

    (55) VARIABLELEX -> VARNAME .
    (41) ASSIGNMENT_DECLARATION -> VARNAME . ASSIGNMENT_OPERATOR SENTENCE
    (42) ASSIGNMENT_OPERATOR -> . EQUAL
    (43) ASSIGNMENT_OPERATOR -> . PLUS_EQUAL
    (44) ASSIGNMENT_OPERATOR -> . MINUS_EQUAL
    (45) ASSIGNMENT_OPERATOR -> . DIV_EQUAL
    (46) ASSIGNMENT_OPERATOR -> . TIMES_EQUAL
    (47) ASSIGNMENT_OPERATOR -> . MOD_EQUAL
    (48) ASSIGNMENT_OPERATOR -> . AND_EQUAL
    (49) ASSIGNMENT_OPERATOR -> . OR_EQUAL
    (50) ASSIGNMENT_OPERATOR -> . XOR_EQUAL
    (51) ASSIGNMENT_OPERATOR -> . COMPLEMENT_EQUAL
    (52) ASSIGNMENT_OPERATOR -> . SHIFTL_EQUAL
    (53) ASSIGNMENT_OPERATOR -> . SHIFTR_EQUAL

    $end            reduce using rule 55 (VARIABLELEX -> VARNAME .)
    EQUAL           shift and go to state 47
    PLUS_EQUAL      shift and go to state 55
    MINUS_EQUAL     shift and go to state 56
    DIV_EQUAL       shift and go to state 57
    TIMES_EQUAL     shift and go to state 58
    MOD_EQUAL       shift and go to state 59
    AND_EQUAL       shift and go to state 60
    OR_EQUAL        shift and go to state 61
    XOR_EQUAL       shift and go to state 62
    COMPLEMENT_EQUAL shift and go to state 63
    SHIFTL_EQUAL    shift and go to state 64
    SHIFTR_EQUAL    shift and go to state 65

    ASSIGNMENT_OPERATOR            shift and go to state 71

state 23

    (61) OPERATION -> NUMBER . OPERATOR NUMBER
    (24) VALUE -> NUMBER .
    (56) OPERATOR -> . PLUS
    (57) OPERATOR -> . MINUS
    (58) OPERATOR -> . TIMES
    (59) OPERATOR -> . MODULUS
    (60) OPERATOR -> . DIVIDE

    EQUAL_TO        reduce using rule 24 (VALUE -> NUMBER .)
    NOT_EQUAL       reduce using rule 24 (VALUE -> NUMBER .)
    GREATER_THAN    reduce using rule 24 (VALUE -> NUMBER .)
    LESS_THAN       reduce using rule 24 (VALUE -> NUMBER .)
    GREATER_EQUAL   reduce using rule 24 (VALUE -> NUMBER .)
    LESS_EQUAL      reduce using rule 24 (VALUE -> NUMBER .)
    PLUS            shift and go to state 24
    MINUS           shift and go to state 25
    TIMES           shift and go to state 26
    MODULUS         shift and go to state 27
    DIVIDE          shift and go to state 28

    OPERATOR                       shift and go to state 72

state 24

    (56) OPERATOR -> PLUS .

    $end            reduce using rule 56 (OPERATOR -> PLUS .)
    INTEGER         reduce using rule 56 (OPERATOR -> PLUS .)
    DECIMAL         reduce using rule 56 (OPERATOR -> PLUS .)


state 25

    (57) OPERATOR -> MINUS .

    $end            reduce using rule 57 (OPERATOR -> MINUS .)
    INTEGER         reduce using rule 57 (OPERATOR -> MINUS .)
    DECIMAL         reduce using rule 57 (OPERATOR -> MINUS .)


state 26

    (58) OPERATOR -> TIMES .

    $end            reduce using rule 58 (OPERATOR -> TIMES .)
    INTEGER         reduce using rule 58 (OPERATOR -> TIMES .)
    DECIMAL         reduce using rule 58 (OPERATOR -> TIMES .)


state 27

    (59) OPERATOR -> MODULUS .

    $end            reduce using rule 59 (OPERATOR -> MODULUS .)
    INTEGER         reduce using rule 59 (OPERATOR -> MODULUS .)
    DECIMAL         reduce using rule 59 (OPERATOR -> MODULUS .)


state 28

    (60) OPERATOR -> DIVIDE .

    $end            reduce using rule 60 (OPERATOR -> DIVIDE .)
    INTEGER         reduce using rule 60 (OPERATOR -> DIVIDE .)
    DECIMAL         reduce using rule 60 (OPERATOR -> DIVIDE .)


state 29

    (28) SENTENCIAS -> IF .

    $end            reduce using rule 28 (SENTENCIAS -> IF .)


state 30

    (29) SENTENCIAS -> ELSEIF .

    $end            reduce using rule 29 (SENTENCIAS -> ELSEIF .)


state 31

    (30) SENTENCIAS -> ELSE .

    $end            reduce using rule 30 (SENTENCIAS -> ELSE .)


state 32

    (31) SENTENCIAS -> FOR .

    $end            reduce using rule 31 (SENTENCIAS -> FOR .)


state 33

    (32) SENTENCIAS -> WHILE .

    $end            reduce using rule 32 (SENTENCIAS -> WHILE .)


state 34

    (33) SENTENCIAS -> SWITCH .

    $end            reduce using rule 33 (SENTENCIAS -> SWITCH .)


state 35

    (23) INCLUDE -> PP_INCLUDE . HEADER_LIB

    HEADER_LIB      shift and go to state 73


state 36

    (22) DEFINE -> PP_DEFINE . VARIABLELEX VALUE
    (55) VARIABLELEX -> . VARNAME

    VARNAME         shift and go to state 75

    VARIABLELEX                    shift and go to state 74

state 37

    (70) COMPARISON -> VALUE . COMPARISON_OPERATOR VALUE
    (64) COMPARISON_OPERATOR -> . EQUAL_TO
    (65) COMPARISON_OPERATOR -> . NOT_EQUAL
    (66) COMPARISON_OPERATOR -> . GREATER_THAN
    (67) COMPARISON_OPERATOR -> . LESS_THAN
    (68) COMPARISON_OPERATOR -> . GREATER_EQUAL
    (69) COMPARISON_OPERATOR -> . LESS_EQUAL

    EQUAL_TO        shift and go to state 41
    NOT_EQUAL       shift and go to state 42
    GREATER_THAN    shift and go to state 43
    LESS_THAN       shift and go to state 44
    GREATER_EQUAL   shift and go to state 45
    LESS_EQUAL      shift and go to state 46

    COMPARISON_OPERATOR            shift and go to state 76

state 38

    (73) LOGICAL_OPERATOR -> AND .

    $end            reduce using rule 73 (LOGICAL_OPERATOR -> AND .)
    STRING          reduce using rule 73 (LOGICAL_OPERATOR -> AND .)
    INTEGER         reduce using rule 73 (LOGICAL_OPERATOR -> AND .)
    DECIMAL         reduce using rule 73 (LOGICAL_OPERATOR -> AND .)


state 39

    (74) LOGICAL_OPERATOR -> OR .

    $end            reduce using rule 74 (LOGICAL_OPERATOR -> OR .)
    STRING          reduce using rule 74 (LOGICAL_OPERATOR -> OR .)
    INTEGER         reduce using rule 74 (LOGICAL_OPERATOR -> OR .)
    DECIMAL         reduce using rule 74 (LOGICAL_OPERATOR -> OR .)


state 40

    (75) LOGICAL_OPERATOR -> NOT .

    $end            reduce using rule 75 (LOGICAL_OPERATOR -> NOT .)
    STRING          reduce using rule 75 (LOGICAL_OPERATOR -> NOT .)
    INTEGER         reduce using rule 75 (LOGICAL_OPERATOR -> NOT .)
    DECIMAL         reduce using rule 75 (LOGICAL_OPERATOR -> NOT .)


state 41

    (64) COMPARISON_OPERATOR -> EQUAL_TO .

    $end            reduce using rule 64 (COMPARISON_OPERATOR -> EQUAL_TO .)
    STRING          reduce using rule 64 (COMPARISON_OPERATOR -> EQUAL_TO .)
    INTEGER         reduce using rule 64 (COMPARISON_OPERATOR -> EQUAL_TO .)
    DECIMAL         reduce using rule 64 (COMPARISON_OPERATOR -> EQUAL_TO .)


state 42

    (65) COMPARISON_OPERATOR -> NOT_EQUAL .

    $end            reduce using rule 65 (COMPARISON_OPERATOR -> NOT_EQUAL .)
    STRING          reduce using rule 65 (COMPARISON_OPERATOR -> NOT_EQUAL .)
    INTEGER         reduce using rule 65 (COMPARISON_OPERATOR -> NOT_EQUAL .)
    DECIMAL         reduce using rule 65 (COMPARISON_OPERATOR -> NOT_EQUAL .)


state 43

    (66) COMPARISON_OPERATOR -> GREATER_THAN .

    $end            reduce using rule 66 (COMPARISON_OPERATOR -> GREATER_THAN .)
    STRING          reduce using rule 66 (COMPARISON_OPERATOR -> GREATER_THAN .)
    INTEGER         reduce using rule 66 (COMPARISON_OPERATOR -> GREATER_THAN .)
    DECIMAL         reduce using rule 66 (COMPARISON_OPERATOR -> GREATER_THAN .)


state 44

    (67) COMPARISON_OPERATOR -> LESS_THAN .

    $end            reduce using rule 67 (COMPARISON_OPERATOR -> LESS_THAN .)
    STRING          reduce using rule 67 (COMPARISON_OPERATOR -> LESS_THAN .)
    INTEGER         reduce using rule 67 (COMPARISON_OPERATOR -> LESS_THAN .)
    DECIMAL         reduce using rule 67 (COMPARISON_OPERATOR -> LESS_THAN .)


state 45

    (68) COMPARISON_OPERATOR -> GREATER_EQUAL .

    $end            reduce using rule 68 (COMPARISON_OPERATOR -> GREATER_EQUAL .)
    STRING          reduce using rule 68 (COMPARISON_OPERATOR -> GREATER_EQUAL .)
    INTEGER         reduce using rule 68 (COMPARISON_OPERATOR -> GREATER_EQUAL .)
    DECIMAL         reduce using rule 68 (COMPARISON_OPERATOR -> GREATER_EQUAL .)


state 46

    (69) COMPARISON_OPERATOR -> LESS_EQUAL .

    $end            reduce using rule 69 (COMPARISON_OPERATOR -> LESS_EQUAL .)
    STRING          reduce using rule 69 (COMPARISON_OPERATOR -> LESS_EQUAL .)
    INTEGER         reduce using rule 69 (COMPARISON_OPERATOR -> LESS_EQUAL .)
    DECIMAL         reduce using rule 69 (COMPARISON_OPERATOR -> LESS_EQUAL .)


state 47

    (42) ASSIGNMENT_OPERATOR -> EQUAL .

    $end            reduce using rule 42 (ASSIGNMENT_OPERATOR -> EQUAL .)
    VARNAME         reduce using rule 42 (ASSIGNMENT_OPERATOR -> EQUAL .)
    INTEGER         reduce using rule 42 (ASSIGNMENT_OPERATOR -> EQUAL .)
    DECIMAL         reduce using rule 42 (ASSIGNMENT_OPERATOR -> EQUAL .)


state 48

    (27) NUMBER -> DECIMAL .

    PLUS            reduce using rule 27 (NUMBER -> DECIMAL .)
    MINUS           reduce using rule 27 (NUMBER -> DECIMAL .)
    TIMES           reduce using rule 27 (NUMBER -> DECIMAL .)
    MODULUS         reduce using rule 27 (NUMBER -> DECIMAL .)
    DIVIDE          reduce using rule 27 (NUMBER -> DECIMAL .)
    EQUAL_TO        reduce using rule 27 (NUMBER -> DECIMAL .)
    NOT_EQUAL       reduce using rule 27 (NUMBER -> DECIMAL .)
    GREATER_THAN    reduce using rule 27 (NUMBER -> DECIMAL .)
    LESS_THAN       reduce using rule 27 (NUMBER -> DECIMAL .)
    GREATER_EQUAL   reduce using rule 27 (NUMBER -> DECIMAL .)
    LESS_EQUAL      reduce using rule 27 (NUMBER -> DECIMAL .)
    $end            reduce using rule 27 (NUMBER -> DECIMAL .)
    AND             reduce using rule 27 (NUMBER -> DECIMAL .)
    OR              reduce using rule 27 (NUMBER -> DECIMAL .)
    NOT             reduce using rule 27 (NUMBER -> DECIMAL .)


state 49

    (26) NUMBER -> INTEGER .

    PLUS            reduce using rule 26 (NUMBER -> INTEGER .)
    MINUS           reduce using rule 26 (NUMBER -> INTEGER .)
    TIMES           reduce using rule 26 (NUMBER -> INTEGER .)
    MODULUS         reduce using rule 26 (NUMBER -> INTEGER .)
    DIVIDE          reduce using rule 26 (NUMBER -> INTEGER .)
    EQUAL_TO        reduce using rule 26 (NUMBER -> INTEGER .)
    NOT_EQUAL       reduce using rule 26 (NUMBER -> INTEGER .)
    GREATER_THAN    reduce using rule 26 (NUMBER -> INTEGER .)
    LESS_THAN       reduce using rule 26 (NUMBER -> INTEGER .)
    GREATER_EQUAL   reduce using rule 26 (NUMBER -> INTEGER .)
    LESS_EQUAL      reduce using rule 26 (NUMBER -> INTEGER .)
    $end            reduce using rule 26 (NUMBER -> INTEGER .)
    AND             reduce using rule 26 (NUMBER -> INTEGER .)
    OR              reduce using rule 26 (NUMBER -> INTEGER .)
    NOT             reduce using rule 26 (NUMBER -> INTEGER .)


state 50

    (37) DECIMAL_TYPE -> FLOAT .

    VARNAME         reduce using rule 37 (DECIMAL_TYPE -> FLOAT .)
    $end            reduce using rule 37 (DECIMAL_TYPE -> FLOAT .)


state 51

    (38) DECIMAL_TYPE -> DOUBLE .

    VARNAME         reduce using rule 38 (DECIMAL_TYPE -> DOUBLE .)
    $end            reduce using rule 38 (DECIMAL_TYPE -> DOUBLE .)


state 52

    (34) INTEGER_TYPE -> INT .

    VARNAME         reduce using rule 34 (INTEGER_TYPE -> INT .)
    $end            reduce using rule 34 (INTEGER_TYPE -> INT .)


state 53

    (35) INTEGER_TYPE -> SHORT .

    VARNAME         reduce using rule 35 (INTEGER_TYPE -> SHORT .)
    $end            reduce using rule 35 (INTEGER_TYPE -> SHORT .)


state 54

    (36) INTEGER_TYPE -> LONG .

    VARNAME         reduce using rule 36 (INTEGER_TYPE -> LONG .)
    $end            reduce using rule 36 (INTEGER_TYPE -> LONG .)


state 55

    (43) ASSIGNMENT_OPERATOR -> PLUS_EQUAL .

    $end            reduce using rule 43 (ASSIGNMENT_OPERATOR -> PLUS_EQUAL .)
    VARNAME         reduce using rule 43 (ASSIGNMENT_OPERATOR -> PLUS_EQUAL .)
    INTEGER         reduce using rule 43 (ASSIGNMENT_OPERATOR -> PLUS_EQUAL .)
    DECIMAL         reduce using rule 43 (ASSIGNMENT_OPERATOR -> PLUS_EQUAL .)


state 56

    (44) ASSIGNMENT_OPERATOR -> MINUS_EQUAL .

    $end            reduce using rule 44 (ASSIGNMENT_OPERATOR -> MINUS_EQUAL .)
    VARNAME         reduce using rule 44 (ASSIGNMENT_OPERATOR -> MINUS_EQUAL .)
    INTEGER         reduce using rule 44 (ASSIGNMENT_OPERATOR -> MINUS_EQUAL .)
    DECIMAL         reduce using rule 44 (ASSIGNMENT_OPERATOR -> MINUS_EQUAL .)


state 57

    (45) ASSIGNMENT_OPERATOR -> DIV_EQUAL .

    $end            reduce using rule 45 (ASSIGNMENT_OPERATOR -> DIV_EQUAL .)
    VARNAME         reduce using rule 45 (ASSIGNMENT_OPERATOR -> DIV_EQUAL .)
    INTEGER         reduce using rule 45 (ASSIGNMENT_OPERATOR -> DIV_EQUAL .)
    DECIMAL         reduce using rule 45 (ASSIGNMENT_OPERATOR -> DIV_EQUAL .)


state 58

    (46) ASSIGNMENT_OPERATOR -> TIMES_EQUAL .

    $end            reduce using rule 46 (ASSIGNMENT_OPERATOR -> TIMES_EQUAL .)
    VARNAME         reduce using rule 46 (ASSIGNMENT_OPERATOR -> TIMES_EQUAL .)
    INTEGER         reduce using rule 46 (ASSIGNMENT_OPERATOR -> TIMES_EQUAL .)
    DECIMAL         reduce using rule 46 (ASSIGNMENT_OPERATOR -> TIMES_EQUAL .)


state 59

    (47) ASSIGNMENT_OPERATOR -> MOD_EQUAL .

    $end            reduce using rule 47 (ASSIGNMENT_OPERATOR -> MOD_EQUAL .)
    VARNAME         reduce using rule 47 (ASSIGNMENT_OPERATOR -> MOD_EQUAL .)
    INTEGER         reduce using rule 47 (ASSIGNMENT_OPERATOR -> MOD_EQUAL .)
    DECIMAL         reduce using rule 47 (ASSIGNMENT_OPERATOR -> MOD_EQUAL .)


state 60

    (48) ASSIGNMENT_OPERATOR -> AND_EQUAL .

    $end            reduce using rule 48 (ASSIGNMENT_OPERATOR -> AND_EQUAL .)
    VARNAME         reduce using rule 48 (ASSIGNMENT_OPERATOR -> AND_EQUAL .)
    INTEGER         reduce using rule 48 (ASSIGNMENT_OPERATOR -> AND_EQUAL .)
    DECIMAL         reduce using rule 48 (ASSIGNMENT_OPERATOR -> AND_EQUAL .)


state 61

    (49) ASSIGNMENT_OPERATOR -> OR_EQUAL .

    $end            reduce using rule 49 (ASSIGNMENT_OPERATOR -> OR_EQUAL .)
    VARNAME         reduce using rule 49 (ASSIGNMENT_OPERATOR -> OR_EQUAL .)
    INTEGER         reduce using rule 49 (ASSIGNMENT_OPERATOR -> OR_EQUAL .)
    DECIMAL         reduce using rule 49 (ASSIGNMENT_OPERATOR -> OR_EQUAL .)


state 62

    (50) ASSIGNMENT_OPERATOR -> XOR_EQUAL .

    $end            reduce using rule 50 (ASSIGNMENT_OPERATOR -> XOR_EQUAL .)
    VARNAME         reduce using rule 50 (ASSIGNMENT_OPERATOR -> XOR_EQUAL .)
    INTEGER         reduce using rule 50 (ASSIGNMENT_OPERATOR -> XOR_EQUAL .)
    DECIMAL         reduce using rule 50 (ASSIGNMENT_OPERATOR -> XOR_EQUAL .)


state 63

    (51) ASSIGNMENT_OPERATOR -> COMPLEMENT_EQUAL .

    $end            reduce using rule 51 (ASSIGNMENT_OPERATOR -> COMPLEMENT_EQUAL .)
    VARNAME         reduce using rule 51 (ASSIGNMENT_OPERATOR -> COMPLEMENT_EQUAL .)
    INTEGER         reduce using rule 51 (ASSIGNMENT_OPERATOR -> COMPLEMENT_EQUAL .)
    DECIMAL         reduce using rule 51 (ASSIGNMENT_OPERATOR -> COMPLEMENT_EQUAL .)


state 64

    (52) ASSIGNMENT_OPERATOR -> SHIFTL_EQUAL .

    $end            reduce using rule 52 (ASSIGNMENT_OPERATOR -> SHIFTL_EQUAL .)
    VARNAME         reduce using rule 52 (ASSIGNMENT_OPERATOR -> SHIFTL_EQUAL .)
    INTEGER         reduce using rule 52 (ASSIGNMENT_OPERATOR -> SHIFTL_EQUAL .)
    DECIMAL         reduce using rule 52 (ASSIGNMENT_OPERATOR -> SHIFTL_EQUAL .)


state 65

    (53) ASSIGNMENT_OPERATOR -> SHIFTR_EQUAL .

    $end            reduce using rule 53 (ASSIGNMENT_OPERATOR -> SHIFTR_EQUAL .)
    VARNAME         reduce using rule 53 (ASSIGNMENT_OPERATOR -> SHIFTR_EQUAL .)
    INTEGER         reduce using rule 53 (ASSIGNMENT_OPERATOR -> SHIFTR_EQUAL .)
    DECIMAL         reduce using rule 53 (ASSIGNMENT_OPERATOR -> SHIFTR_EQUAL .)


state 66

    (25) VALUE -> STRING .

    EQUAL_TO        reduce using rule 25 (VALUE -> STRING .)
    NOT_EQUAL       reduce using rule 25 (VALUE -> STRING .)
    GREATER_THAN    reduce using rule 25 (VALUE -> STRING .)
    LESS_THAN       reduce using rule 25 (VALUE -> STRING .)
    GREATER_EQUAL   reduce using rule 25 (VALUE -> STRING .)
    LESS_EQUAL      reduce using rule 25 (VALUE -> STRING .)
    $end            reduce using rule 25 (VALUE -> STRING .)
    AND             reduce using rule 25 (VALUE -> STRING .)
    OR              reduce using rule 25 (VALUE -> STRING .)
    NOT             reduce using rule 25 (VALUE -> STRING .)


state 67

    (63) OPERATIONS -> OPERATION OPERATOR . OPERATIONS
    (62) OPERATIONS -> . OPERATION
    (63) OPERATIONS -> . OPERATION OPERATOR OPERATIONS
    (61) OPERATION -> . NUMBER OPERATOR NUMBER
    (26) NUMBER -> . INTEGER
    (27) NUMBER -> . DECIMAL

    INTEGER         shift and go to state 49
    DECIMAL         shift and go to state 48

    OPERATION                      shift and go to state 77
    OPERATIONS                     shift and go to state 78
    NUMBER                         shift and go to state 79

state 68

    (72) COMPARISONS -> COMPARISON LOGICAL_OPERATOR . COMPARISONS
    (71) COMPARISONS -> . COMPARISON
    (72) COMPARISONS -> . COMPARISON LOGICAL_OPERATOR COMPARISONS
    (70) COMPARISON -> . VALUE COMPARISON_OPERATOR VALUE
    (24) VALUE -> . NUMBER
    (25) VALUE -> . STRING
    (26) NUMBER -> . INTEGER
    (27) NUMBER -> . DECIMAL

    STRING          shift and go to state 66
    INTEGER         shift and go to state 49
    DECIMAL         shift and go to state 48

    COMPARISON                     shift and go to state 80
    COMPARISONS                    shift and go to state 81
    VALUE                          shift and go to state 37
    NUMBER                         shift and go to state 82

state 69

    (40) DECIMAL_DECLARATION -> DECIMAL_TYPE VARNAME . EQUAL DECIMAL

    EQUAL           shift and go to state 83


state 70

    (39) INTEGER_DECLARATION -> INTEGER_TYPE VARNAME . EQUAL INTEGER

    EQUAL           shift and go to state 84


state 71

    (41) ASSIGNMENT_DECLARATION -> VARNAME ASSIGNMENT_OPERATOR . SENTENCE
    (76) SENTENCE -> . NUMBER
    (77) SENTENCE -> . VARNAME
    (26) NUMBER -> . INTEGER
    (27) NUMBER -> . DECIMAL

    VARNAME         shift and go to state 85
    INTEGER         shift and go to state 49
    DECIMAL         shift and go to state 48

    SENTENCE                       shift and go to state 86
    NUMBER                         shift and go to state 87

state 72

    (61) OPERATION -> NUMBER OPERATOR . NUMBER
    (26) NUMBER -> . INTEGER
    (27) NUMBER -> . DECIMAL

    INTEGER         shift and go to state 49
    DECIMAL         shift and go to state 48

    NUMBER                         shift and go to state 88

state 73

    (23) INCLUDE -> PP_INCLUDE HEADER_LIB .

    $end            reduce using rule 23 (INCLUDE -> PP_INCLUDE HEADER_LIB .)


state 74

    (22) DEFINE -> PP_DEFINE VARIABLELEX . VALUE
    (24) VALUE -> . NUMBER
    (25) VALUE -> . STRING
    (26) NUMBER -> . INTEGER
    (27) NUMBER -> . DECIMAL

    STRING          shift and go to state 66
    INTEGER         shift and go to state 49
    DECIMAL         shift and go to state 48

    VALUE                          shift and go to state 89
    NUMBER                         shift and go to state 82

state 75

    (55) VARIABLELEX -> VARNAME .

    STRING          reduce using rule 55 (VARIABLELEX -> VARNAME .)
    INTEGER         reduce using rule 55 (VARIABLELEX -> VARNAME .)
    DECIMAL         reduce using rule 55 (VARIABLELEX -> VARNAME .)


state 76

    (70) COMPARISON -> VALUE COMPARISON_OPERATOR . VALUE
    (24) VALUE -> . NUMBER
    (25) VALUE -> . STRING
    (26) NUMBER -> . INTEGER
    (27) NUMBER -> . DECIMAL

    STRING          shift and go to state 66
    INTEGER         shift and go to state 49
    DECIMAL         shift and go to state 48

    VALUE                          shift and go to state 90
    NUMBER                         shift and go to state 82

state 77

    (62) OPERATIONS -> OPERATION .
    (63) OPERATIONS -> OPERATION . OPERATOR OPERATIONS
    (56) OPERATOR -> . PLUS
    (57) OPERATOR -> . MINUS
    (58) OPERATOR -> . TIMES
    (59) OPERATOR -> . MODULUS
    (60) OPERATOR -> . DIVIDE

    $end            reduce using rule 62 (OPERATIONS -> OPERATION .)
    PLUS            shift and go to state 24
    MINUS           shift and go to state 25
    TIMES           shift and go to state 26
    MODULUS         shift and go to state 27
    DIVIDE          shift and go to state 28

    OPERATOR                       shift and go to state 67

state 78

    (63) OPERATIONS -> OPERATION OPERATOR OPERATIONS .

    $end            reduce using rule 63 (OPERATIONS -> OPERATION OPERATOR OPERATIONS .)


state 79

    (61) OPERATION -> NUMBER . OPERATOR NUMBER
    (56) OPERATOR -> . PLUS
    (57) OPERATOR -> . MINUS
    (58) OPERATOR -> . TIMES
    (59) OPERATOR -> . MODULUS
    (60) OPERATOR -> . DIVIDE

    PLUS            shift and go to state 24
    MINUS           shift and go to state 25
    TIMES           shift and go to state 26
    MODULUS         shift and go to state 27
    DIVIDE          shift and go to state 28

    OPERATOR                       shift and go to state 72

state 80

    (71) COMPARISONS -> COMPARISON .
    (72) COMPARISONS -> COMPARISON . LOGICAL_OPERATOR COMPARISONS
    (73) LOGICAL_OPERATOR -> . AND
    (74) LOGICAL_OPERATOR -> . OR
    (75) LOGICAL_OPERATOR -> . NOT

    $end            reduce using rule 71 (COMPARISONS -> COMPARISON .)
    AND             shift and go to state 38
    OR              shift and go to state 39
    NOT             shift and go to state 40

    LOGICAL_OPERATOR               shift and go to state 68

state 81

    (72) COMPARISONS -> COMPARISON LOGICAL_OPERATOR COMPARISONS .

    $end            reduce using rule 72 (COMPARISONS -> COMPARISON LOGICAL_OPERATOR COMPARISONS .)


state 82

    (24) VALUE -> NUMBER .

    EQUAL_TO        reduce using rule 24 (VALUE -> NUMBER .)
    NOT_EQUAL       reduce using rule 24 (VALUE -> NUMBER .)
    GREATER_THAN    reduce using rule 24 (VALUE -> NUMBER .)
    LESS_THAN       reduce using rule 24 (VALUE -> NUMBER .)
    GREATER_EQUAL   reduce using rule 24 (VALUE -> NUMBER .)
    LESS_EQUAL      reduce using rule 24 (VALUE -> NUMBER .)
    $end            reduce using rule 24 (VALUE -> NUMBER .)
    AND             reduce using rule 24 (VALUE -> NUMBER .)
    OR              reduce using rule 24 (VALUE -> NUMBER .)
    NOT             reduce using rule 24 (VALUE -> NUMBER .)


state 83

    (40) DECIMAL_DECLARATION -> DECIMAL_TYPE VARNAME EQUAL . DECIMAL

    DECIMAL         shift and go to state 91


state 84

    (39) INTEGER_DECLARATION -> INTEGER_TYPE VARNAME EQUAL . INTEGER

    INTEGER         shift and go to state 92


state 85

    (77) SENTENCE -> VARNAME .

    $end            reduce using rule 77 (SENTENCE -> VARNAME .)


state 86

    (41) ASSIGNMENT_DECLARATION -> VARNAME ASSIGNMENT_OPERATOR SENTENCE .

    $end            reduce using rule 41 (ASSIGNMENT_DECLARATION -> VARNAME ASSIGNMENT_OPERATOR SENTENCE .)


state 87

    (76) SENTENCE -> NUMBER .

    $end            reduce using rule 76 (SENTENCE -> NUMBER .)


state 88

    (61) OPERATION -> NUMBER OPERATOR NUMBER .

    PLUS            reduce using rule 61 (OPERATION -> NUMBER OPERATOR NUMBER .)
    MINUS           reduce using rule 61 (OPERATION -> NUMBER OPERATOR NUMBER .)
    TIMES           reduce using rule 61 (OPERATION -> NUMBER OPERATOR NUMBER .)
    MODULUS         reduce using rule 61 (OPERATION -> NUMBER OPERATOR NUMBER .)
    DIVIDE          reduce using rule 61 (OPERATION -> NUMBER OPERATOR NUMBER .)
    $end            reduce using rule 61 (OPERATION -> NUMBER OPERATOR NUMBER .)


state 89

    (22) DEFINE -> PP_DEFINE VARIABLELEX VALUE .

    $end            reduce using rule 22 (DEFINE -> PP_DEFINE VARIABLELEX VALUE .)


state 90

    (70) COMPARISON -> VALUE COMPARISON_OPERATOR VALUE .

    AND             reduce using rule 70 (COMPARISON -> VALUE COMPARISON_OPERATOR VALUE .)
    OR              reduce using rule 70 (COMPARISON -> VALUE COMPARISON_OPERATOR VALUE .)
    NOT             reduce using rule 70 (COMPARISON -> VALUE COMPARISON_OPERATOR VALUE .)
    $end            reduce using rule 70 (COMPARISON -> VALUE COMPARISON_OPERATOR VALUE .)


state 91

    (40) DECIMAL_DECLARATION -> DECIMAL_TYPE VARNAME EQUAL DECIMAL .

    $end            reduce using rule 40 (DECIMAL_DECLARATION -> DECIMAL_TYPE VARNAME EQUAL DECIMAL .)


state 92

    (39) INTEGER_DECLARATION -> INTEGER_TYPE VARNAME EQUAL INTEGER .

    $end            reduce using rule 39 (INTEGER_DECLARATION -> INTEGER_TYPE VARNAME EQUAL INTEGER .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: reduce/reduce conflict in state 4 resolved using rule (EXPRESSION -> OPERATION)
WARNING: rejected rule (OPERATIONS -> OPERATION) in state 4
WARNING: reduce/reduce conflict in state 8 resolved using rule (EXPRESSION -> INCLUDE)
WARNING: rejected rule (PREPROCESOR_DIRECTIVE -> INCLUDE) in state 8
WARNING: reduce/reduce conflict in state 9 resolved using rule (EXPRESSION -> DEFINE)
WARNING: rejected rule (PREPROCESOR_DIRECTIVE -> DEFINE) in state 9
WARNING: reduce/reduce conflict in state 13 resolved using rule (EXPRESSION -> COMPARISON)
WARNING: rejected rule (COMPARISONS -> COMPARISON) in state 13
WARNING: Rule (PREPROCESOR_DIRECTIVE -> INCLUDE) is never reduced
WARNING: Rule (PREPROCESOR_DIRECTIVE -> DEFINE) is never reduced
