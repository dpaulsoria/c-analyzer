Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    AMPERSAND
    AUTO
    BACKSLASH
    BACKSPACE
    B_AND
    B_COMPLEMENT
    B_OR
    B_XOR
    CHAR
    CHARACTER
    CONST
    DO
    DOT
    DOUBLE_APOS
    DOUBLE_QUOTE
    ENUM
    EXTERN
    FF_PAGEBREAK
    FS_CHAR
    FS_DOUBLE
    FS_FLOAT
    FS_HEX
    FS_INT
    FS_LONG
    FS_LONG_DOUBLE
    FS_OCT
    FS_OCT_LONG
    FS_POINTER
    FS_SCI_NOTATION
    FS_STRING
    FS_UNSIGNED_INT
    FS_UNSIGNED_LONG
    GOTO
    HTAB
    IGNORE
    LBRACKET
    NEWLINE
    NULL
    PP_DATE
    PP_DTMACRO
    PP_ERROR
    PP_FILE
    PP_IF
    PP_IFDEF
    PP_IFNDEF
    PP_LINE
    PP_PRAGMA
    PP_STMACRO
    PP_TIME
    PP_TIMESTAMP
    PP_UNDEF
    QUESTIONMARK
    RBRACKET
    REGISTER
    RETURN
    SHIFT_LEFT
    SHIFT_RIGHT
    SIGNED
    SINGLE_APOS
    SINGLE_QUOTE
    SIZEOF
    STATIC
    STRUCT
    TILDE
    TYPEDEF
    UNION
    UNSIGNED
    VOID
    VOLTILE
    VTAB

Grammar

Rule 0     S' -> ROOT
Rule 1     ROOT -> PREPROCESOR_DIRECTIVE
Rule 2     ROOT -> DEFINE
Rule 3     ROOT -> INCLUDE
Rule 4     ROOT -> VALUE
Rule 5     ROOT -> NUMBER
Rule 6     ROOT -> CONTROL_STRUCTURES
Rule 7     ROOT -> WHILE_STRUCTURE
Rule 8     ROOT -> SWITCH_STRUCTURE
Rule 9     ROOT -> IF_STRUCTURE
Rule 10    ROOT -> FOR_STRUCTURE
Rule 11    ROOT -> CODE
Rule 12    ROOT -> EXPRESSION
Rule 13    ROOT -> EXPRESSIONS
Rule 14    ROOT -> FUNCTION
Rule 15    ROOT -> INTEGER_TYPE
Rule 16    ROOT -> DECIMAL_TYPE
Rule 17    ROOT -> INTEGER_DECLARATION
Rule 18    ROOT -> DECIMAL_DECLARATION
Rule 19    ROOT -> ASSIGNMENT_DECLARATION
Rule 20    ROOT -> ASSIGNMENT_OPERATOR
Rule 21    ROOT -> COMENTARIOLEX
Rule 22    ROOT -> VARIABLELEX
Rule 23    ROOT -> OPERATOR
Rule 24    ROOT -> OPERATION
Rule 25    ROOT -> OPERATIONS
Rule 26    ROOT -> COMPARISON_OPERATOR
Rule 27    ROOT -> COMPARISON
Rule 28    ROOT -> COMPARISONS
Rule 29    ROOT -> LOGICAL_OPERATOR
Rule 30    ROOT -> SENTENCE
Rule 31    ROOT -> SWITCH_BODY
Rule 32    ROOT -> BUCLE
Rule 33    ROOT -> ELSE_STRUCTURE
Rule 34    ROOT -> FUNCTION_ARGUMENTS
Rule 35    ROOT -> DECLARATIONS
Rule 36    ROOT -> FOR_BODY_STRUCTURE
Rule 37    ROOT -> FOR_ARGUMENTS_STRUCTURE
Rule 38    PREPROCESOR_DIRECTIVE -> DEFINE
Rule 39    PREPROCESOR_DIRECTIVE -> INCLUDE
Rule 40    DEFINE -> PP_DEFINE VARIABLELEX VALUE
Rule 41    INCLUDE -> PP_INCLUDE HEADER_LIB
Rule 42    VALUE -> NUMBER
Rule 43    VALUE -> STRING
Rule 44    NUMBER -> INTEGER
Rule 45    NUMBER -> DECIMAL
Rule 46    CONTROL_STRUCTURES -> IF_STRUCTURE
Rule 47    CONTROL_STRUCTURES -> FOR_STRUCTURE
Rule 48    CONTROL_STRUCTURES -> WHILE_STRUCTURE
Rule 49    CONTROL_STRUCTURES -> SWITCH_STRUCTURE
Rule 50    BODY_STRUCTURE -> EXPRESSIONS
Rule 51    BODY_STRUCTURE -> EXPRESSIONS BREAK SEMICOLON
Rule 52    BODY_STRUCTURE -> EXPRESSIONS CONTINUE SEMICOLON
Rule 53    WHILE_STRUCTURE -> WHILE LPAREN COMPARISONS RPAREN LCURL_BRACE BODY_STRUCTURE RCURL_BRACE
Rule 54    SWITCH_CASE -> CASE INTEGER COLON EXPRESSIONS BREAK SEMICOLON
Rule 55    SWITCH_DEFAULT -> DEFAULT COLON EXPRESSIONS BREAK SEMICOLON
Rule 56    SWITCH_BODY -> SWITCH_CASE
Rule 57    SWITCH_BODY -> SWITCH_DEFAULT
Rule 58    SWITCH_BODY -> SWITCH_CASE SWITCH_BODY
Rule 59    SWITCH_STRUCTURE -> SWITCH LPAREN COMPARISONS RPAREN LCURL_BRACE SWITCH_BODY RCURL_BRACE
Rule 60    BUCLE -> VARIABLELEX INCREASE
Rule 61    BUCLE -> DECREASE VARIABLELEX
Rule 62    FOR_STRUCTURE -> FOR FOR_ARGUMENTS_STRUCTURE LCURL_BRACE FOR_BODY_STRUCTURE RCURL_BRACE
Rule 63    FOR_ARGUMENTS_STRUCTURE -> LPAREN DECLARATIONS SEMICOLON COMPARISONS SEMICOLON BUCLE RPAREN
Rule 64    FOR_BODY_STRUCTURE -> EXPRESSIONS
Rule 65    FOR_BODY_STRUCTURE -> BREAK SEMICOLON
Rule 66    FOR_BODY_STRUCTURE -> CONTINUE SEMICOLON
Rule 67    IF_STRUCTURE -> IF LPAREN COMPARISONS RPAREN LCURL_BRACE EXPRESSIONS RCURL_BRACE
Rule 68    IF_STRUCTURE -> IF LPAREN COMPARISONS RPAREN LCURL_BRACE EXPRESSIONS RCURL_BRACE ELSE_STRUCTURE
Rule 69    ELSE_STRUCTURE -> ELSE LCURL_BRACE EXPRESSIONS RCURL_BRACE
Rule 70    ELSE_STRUCTURE -> ELSE IF_STRUCTURE
Rule 71    DECLARATIONS -> INTEGER_DECLARATION
Rule 72    DECLARATIONS -> DECIMAL_DECLARATION
Rule 73    CODE -> FUNCTION
Rule 74    CODE -> INTEGER_DECLARATION
Rule 75    CODE -> DECIMAL_DECLARATION
Rule 76    CODE -> ASSIGNMENT_DECLARATION
Rule 77    CODE -> COMENTARIOLEX
Rule 78    EXPRESSION -> CODE SEMICOLON
Rule 79    EXPRESSION -> CONTROL_STRUCTURES
Rule 80    EXPRESSIONS -> EXPRESSION
Rule 81    EXPRESSIONS -> EXPRESSION EXPRESSIONS
Rule 82    FUNCTION -> VARNAME LPAREN FUNCTION_ARGUMENTS RPAREN
Rule 83    FUNCTION_ARGUMENTS -> SENTENCES
Rule 84    FUNCTION_ARGUMENTS -> COMPARISONS
Rule 85    INTEGER_TYPE -> INT
Rule 86    INTEGER_TYPE -> SHORT
Rule 87    INTEGER_TYPE -> LONG
Rule 88    DECIMAL_TYPE -> FLOAT
Rule 89    DECIMAL_TYPE -> DOUBLE
Rule 90    INTEGER_DECLARATION -> INTEGER_TYPE VARNAME EQUAL INTEGER
Rule 91    DECIMAL_DECLARATION -> DECIMAL_TYPE VARNAME EQUAL DECIMAL
Rule 92    ASSIGNMENT_DECLARATION -> VARNAME ASSIGNMENT_OPERATOR SENTENCE
Rule 93    ASSIGNMENT_OPERATOR -> EQUAL
Rule 94    ASSIGNMENT_OPERATOR -> PLUS_EQUAL
Rule 95    ASSIGNMENT_OPERATOR -> MINUS_EQUAL
Rule 96    ASSIGNMENT_OPERATOR -> DIV_EQUAL
Rule 97    ASSIGNMENT_OPERATOR -> TIMES_EQUAL
Rule 98    ASSIGNMENT_OPERATOR -> MOD_EQUAL
Rule 99    ASSIGNMENT_OPERATOR -> AND_EQUAL
Rule 100   ASSIGNMENT_OPERATOR -> OR_EQUAL
Rule 101   ASSIGNMENT_OPERATOR -> XOR_EQUAL
Rule 102   ASSIGNMENT_OPERATOR -> COMPLEMENT_EQUAL
Rule 103   ASSIGNMENT_OPERATOR -> SHIFTL_EQUAL
Rule 104   ASSIGNMENT_OPERATOR -> SHIFTR_EQUAL
Rule 105   COMENTARIOLEX -> COMMENT
Rule 106   VARIABLELEX -> VARNAME
Rule 107   OPERATOR -> PLUS
Rule 108   OPERATOR -> MINUS
Rule 109   OPERATOR -> TIMES
Rule 110   OPERATOR -> MODULUS
Rule 111   OPERATOR -> DIVIDE
Rule 112   OPERATION -> NUMBER OPERATOR NUMBER
Rule 113   OPERATIONS -> OPERATION
Rule 114   OPERATIONS -> OPERATION OPERATOR OPERATIONS
Rule 115   COMPARISON_OPERATOR -> EQUAL_TO
Rule 116   COMPARISON_OPERATOR -> NOT_EQUAL
Rule 117   COMPARISON_OPERATOR -> GREATER_THAN
Rule 118   COMPARISON_OPERATOR -> LESS_THAN
Rule 119   COMPARISON_OPERATOR -> GREATER_EQUAL
Rule 120   COMPARISON_OPERATOR -> LESS_EQUAL
Rule 121   COMPARISON -> VALUE COMPARISON_OPERATOR VALUE
Rule 122   COMPARISON -> SENTENCE COMPARISON_OPERATOR SENTENCE
Rule 123   COMPARISONS -> COMPARISON
Rule 124   COMPARISONS -> COMPARISON LOGICAL_OPERATOR COMPARISONS
Rule 125   LOGICAL_OPERATOR -> AND
Rule 126   LOGICAL_OPERATOR -> OR
Rule 127   LOGICAL_OPERATOR -> NOT
Rule 128   SENTENCE -> NUMBER
Rule 129   SENTENCE -> VARNAME
Rule 130   SENTENCES -> SENTENCE
Rule 131   SENTENCES -> SENTENCE COMMA SENTENCES

Terminals, with rules where they appear

AMPERSAND            : 
AND                  : 125
AND_EQUAL            : 99
AUTO                 : 
BACKSLASH            : 
BACKSPACE            : 
BREAK                : 51 54 55 65
B_AND                : 
B_COMPLEMENT         : 
B_OR                 : 
B_XOR                : 
CASE                 : 54
CHAR                 : 
CHARACTER            : 
COLON                : 54 55
COMMA                : 131
COMMENT              : 105
COMPLEMENT_EQUAL     : 102
CONST                : 
CONTINUE             : 52 66
DECIMAL              : 45 91
DECREASE             : 61
DEFAULT              : 55
DIVIDE               : 111
DIV_EQUAL            : 96
DO                   : 
DOT                  : 
DOUBLE               : 89
DOUBLE_APOS          : 
DOUBLE_QUOTE         : 
ELSE                 : 69 70
ENUM                 : 
EQUAL                : 90 91 93
EQUAL_TO             : 115
EXTERN               : 
FF_PAGEBREAK         : 
FLOAT                : 88
FOR                  : 62
FS_CHAR              : 
FS_DOUBLE            : 
FS_FLOAT             : 
FS_HEX               : 
FS_INT               : 
FS_LONG              : 
FS_LONG_DOUBLE       : 
FS_OCT               : 
FS_OCT_LONG          : 
FS_POINTER           : 
FS_SCI_NOTATION      : 
FS_STRING            : 
FS_UNSIGNED_INT      : 
FS_UNSIGNED_LONG     : 
GOTO                 : 
GREATER_EQUAL        : 119
GREATER_THAN         : 117
HEADER_LIB           : 41
HTAB                 : 
IF                   : 67 68
IGNORE               : 
INCREASE             : 60
INT                  : 85
INTEGER              : 44 54 90
LBRACKET             : 
LCURL_BRACE          : 53 59 62 67 68 69
LESS_EQUAL           : 120
LESS_THAN            : 118
LONG                 : 87
LPAREN               : 53 59 63 67 68 82
MINUS                : 108
MINUS_EQUAL          : 95
MODULUS              : 110
MOD_EQUAL            : 98
NEWLINE              : 
NOT                  : 127
NOT_EQUAL            : 116
NULL                 : 
OR                   : 126
OR_EQUAL             : 100
PLUS                 : 107
PLUS_EQUAL           : 94
PP_DATE              : 
PP_DEFINE            : 40
PP_DTMACRO           : 
PP_ERROR             : 
PP_FILE              : 
PP_IF                : 
PP_IFDEF             : 
PP_IFNDEF            : 
PP_INCLUDE           : 41
PP_LINE              : 
PP_PRAGMA            : 
PP_STMACRO           : 
PP_TIME              : 
PP_TIMESTAMP         : 
PP_UNDEF             : 
QUESTIONMARK         : 
RBRACKET             : 
RCURL_BRACE          : 53 59 62 67 68 69
REGISTER             : 
RETURN               : 
RPAREN               : 53 59 63 67 68 82
SEMICOLON            : 51 52 54 55 63 63 65 66 78
SHIFTL_EQUAL         : 103
SHIFTR_EQUAL         : 104
SHIFT_LEFT           : 
SHIFT_RIGHT          : 
SHORT                : 86
SIGNED               : 
SINGLE_APOS          : 
SINGLE_QUOTE         : 
SIZEOF               : 
STATIC               : 
STRING               : 43
STRUCT               : 
SWITCH               : 59
TILDE                : 
TIMES                : 109
TIMES_EQUAL          : 97
TYPEDEF              : 
UNION                : 
UNSIGNED             : 
VARNAME              : 82 90 91 92 106 129
VOID                 : 
VOLTILE              : 
VTAB                 : 
WHILE                : 53
XOR_EQUAL            : 101
error                : 

Nonterminals, with rules where they appear

ASSIGNMENT_DECLARATION : 19 76
ASSIGNMENT_OPERATOR  : 20 92
BODY_STRUCTURE       : 53
BUCLE                : 32 63
CODE                 : 11 78
COMENTARIOLEX        : 21 77
COMPARISON           : 27 123 124
COMPARISONS          : 28 53 59 63 67 68 84 124
COMPARISON_OPERATOR  : 26 121 122
CONTROL_STRUCTURES   : 6 79
DECIMAL_DECLARATION  : 18 72 75
DECIMAL_TYPE         : 16 91
DECLARATIONS         : 35 63
DEFINE               : 2 38
ELSE_STRUCTURE       : 33 68
EXPRESSION           : 12 80 81
EXPRESSIONS          : 13 50 51 52 54 55 64 67 68 69 81
FOR_ARGUMENTS_STRUCTURE : 37 62
FOR_BODY_STRUCTURE   : 36 62
FOR_STRUCTURE        : 10 47
FUNCTION             : 14 73
FUNCTION_ARGUMENTS   : 34 82
IF_STRUCTURE         : 9 46 70
INCLUDE              : 3 39
INTEGER_DECLARATION  : 17 71 74
INTEGER_TYPE         : 15 90
LOGICAL_OPERATOR     : 29 124
NUMBER               : 5 42 112 112 128
OPERATION            : 24 113 114
OPERATIONS           : 25 114
OPERATOR             : 23 112 114
PREPROCESOR_DIRECTIVE : 1
ROOT                 : 0
SENTENCE             : 30 92 122 122 130 131
SENTENCES            : 83 131
SWITCH_BODY          : 31 58 59
SWITCH_CASE          : 56 58
SWITCH_DEFAULT       : 57
SWITCH_STRUCTURE     : 8 49
VALUE                : 4 40 121 121
VARIABLELEX          : 22 40 60 61
WHILE_STRUCTURE      : 7 48

Parsing method: LALR

state 0

    (0) S' -> . ROOT
    (1) ROOT -> . PREPROCESOR_DIRECTIVE
    (2) ROOT -> . DEFINE
    (3) ROOT -> . INCLUDE
    (4) ROOT -> . VALUE
    (5) ROOT -> . NUMBER
    (6) ROOT -> . CONTROL_STRUCTURES
    (7) ROOT -> . WHILE_STRUCTURE
    (8) ROOT -> . SWITCH_STRUCTURE
    (9) ROOT -> . IF_STRUCTURE
    (10) ROOT -> . FOR_STRUCTURE
    (11) ROOT -> . CODE
    (12) ROOT -> . EXPRESSION
    (13) ROOT -> . EXPRESSIONS
    (14) ROOT -> . FUNCTION
    (15) ROOT -> . INTEGER_TYPE
    (16) ROOT -> . DECIMAL_TYPE
    (17) ROOT -> . INTEGER_DECLARATION
    (18) ROOT -> . DECIMAL_DECLARATION
    (19) ROOT -> . ASSIGNMENT_DECLARATION
    (20) ROOT -> . ASSIGNMENT_OPERATOR
    (21) ROOT -> . COMENTARIOLEX
    (22) ROOT -> . VARIABLELEX
    (23) ROOT -> . OPERATOR
    (24) ROOT -> . OPERATION
    (25) ROOT -> . OPERATIONS
    (26) ROOT -> . COMPARISON_OPERATOR
    (27) ROOT -> . COMPARISON
    (28) ROOT -> . COMPARISONS
    (29) ROOT -> . LOGICAL_OPERATOR
    (30) ROOT -> . SENTENCE
    (31) ROOT -> . SWITCH_BODY
    (32) ROOT -> . BUCLE
    (33) ROOT -> . ELSE_STRUCTURE
    (34) ROOT -> . FUNCTION_ARGUMENTS
    (35) ROOT -> . DECLARATIONS
    (36) ROOT -> . FOR_BODY_STRUCTURE
    (37) ROOT -> . FOR_ARGUMENTS_STRUCTURE
    (38) PREPROCESOR_DIRECTIVE -> . DEFINE
    (39) PREPROCESOR_DIRECTIVE -> . INCLUDE
    (40) DEFINE -> . PP_DEFINE VARIABLELEX VALUE
    (41) INCLUDE -> . PP_INCLUDE HEADER_LIB
    (42) VALUE -> . NUMBER
    (43) VALUE -> . STRING
    (44) NUMBER -> . INTEGER
    (45) NUMBER -> . DECIMAL
    (46) CONTROL_STRUCTURES -> . IF_STRUCTURE
    (47) CONTROL_STRUCTURES -> . FOR_STRUCTURE
    (48) CONTROL_STRUCTURES -> . WHILE_STRUCTURE
    (49) CONTROL_STRUCTURES -> . SWITCH_STRUCTURE
    (53) WHILE_STRUCTURE -> . WHILE LPAREN COMPARISONS RPAREN LCURL_BRACE BODY_STRUCTURE RCURL_BRACE
    (59) SWITCH_STRUCTURE -> . SWITCH LPAREN COMPARISONS RPAREN LCURL_BRACE SWITCH_BODY RCURL_BRACE
    (67) IF_STRUCTURE -> . IF LPAREN COMPARISONS RPAREN LCURL_BRACE EXPRESSIONS RCURL_BRACE
    (68) IF_STRUCTURE -> . IF LPAREN COMPARISONS RPAREN LCURL_BRACE EXPRESSIONS RCURL_BRACE ELSE_STRUCTURE
    (62) FOR_STRUCTURE -> . FOR FOR_ARGUMENTS_STRUCTURE LCURL_BRACE FOR_BODY_STRUCTURE RCURL_BRACE
    (73) CODE -> . FUNCTION
    (74) CODE -> . INTEGER_DECLARATION
    (75) CODE -> . DECIMAL_DECLARATION
    (76) CODE -> . ASSIGNMENT_DECLARATION
    (77) CODE -> . COMENTARIOLEX
    (78) EXPRESSION -> . CODE SEMICOLON
    (79) EXPRESSION -> . CONTROL_STRUCTURES
    (80) EXPRESSIONS -> . EXPRESSION
    (81) EXPRESSIONS -> . EXPRESSION EXPRESSIONS
    (82) FUNCTION -> . VARNAME LPAREN FUNCTION_ARGUMENTS RPAREN
    (85) INTEGER_TYPE -> . INT
    (86) INTEGER_TYPE -> . SHORT
    (87) INTEGER_TYPE -> . LONG
    (88) DECIMAL_TYPE -> . FLOAT
    (89) DECIMAL_TYPE -> . DOUBLE
    (90) INTEGER_DECLARATION -> . INTEGER_TYPE VARNAME EQUAL INTEGER
    (91) DECIMAL_DECLARATION -> . DECIMAL_TYPE VARNAME EQUAL DECIMAL
    (92) ASSIGNMENT_DECLARATION -> . VARNAME ASSIGNMENT_OPERATOR SENTENCE
    (93) ASSIGNMENT_OPERATOR -> . EQUAL
    (94) ASSIGNMENT_OPERATOR -> . PLUS_EQUAL
    (95) ASSIGNMENT_OPERATOR -> . MINUS_EQUAL
    (96) ASSIGNMENT_OPERATOR -> . DIV_EQUAL
    (97) ASSIGNMENT_OPERATOR -> . TIMES_EQUAL
    (98) ASSIGNMENT_OPERATOR -> . MOD_EQUAL
    (99) ASSIGNMENT_OPERATOR -> . AND_EQUAL
    (100) ASSIGNMENT_OPERATOR -> . OR_EQUAL
    (101) ASSIGNMENT_OPERATOR -> . XOR_EQUAL
    (102) ASSIGNMENT_OPERATOR -> . COMPLEMENT_EQUAL
    (103) ASSIGNMENT_OPERATOR -> . SHIFTL_EQUAL
    (104) ASSIGNMENT_OPERATOR -> . SHIFTR_EQUAL
    (105) COMENTARIOLEX -> . COMMENT
    (106) VARIABLELEX -> . VARNAME
    (107) OPERATOR -> . PLUS
    (108) OPERATOR -> . MINUS
    (109) OPERATOR -> . TIMES
    (110) OPERATOR -> . MODULUS
    (111) OPERATOR -> . DIVIDE
    (112) OPERATION -> . NUMBER OPERATOR NUMBER
    (113) OPERATIONS -> . OPERATION
    (114) OPERATIONS -> . OPERATION OPERATOR OPERATIONS
    (115) COMPARISON_OPERATOR -> . EQUAL_TO
    (116) COMPARISON_OPERATOR -> . NOT_EQUAL
    (117) COMPARISON_OPERATOR -> . GREATER_THAN
    (118) COMPARISON_OPERATOR -> . LESS_THAN
    (119) COMPARISON_OPERATOR -> . GREATER_EQUAL
    (120) COMPARISON_OPERATOR -> . LESS_EQUAL
    (121) COMPARISON -> . VALUE COMPARISON_OPERATOR VALUE
    (122) COMPARISON -> . SENTENCE COMPARISON_OPERATOR SENTENCE
    (123) COMPARISONS -> . COMPARISON
    (124) COMPARISONS -> . COMPARISON LOGICAL_OPERATOR COMPARISONS
    (125) LOGICAL_OPERATOR -> . AND
    (126) LOGICAL_OPERATOR -> . OR
    (127) LOGICAL_OPERATOR -> . NOT
    (128) SENTENCE -> . NUMBER
    (129) SENTENCE -> . VARNAME
    (56) SWITCH_BODY -> . SWITCH_CASE
    (57) SWITCH_BODY -> . SWITCH_DEFAULT
    (58) SWITCH_BODY -> . SWITCH_CASE SWITCH_BODY
    (60) BUCLE -> . VARIABLELEX INCREASE
    (61) BUCLE -> . DECREASE VARIABLELEX
    (69) ELSE_STRUCTURE -> . ELSE LCURL_BRACE EXPRESSIONS RCURL_BRACE
    (70) ELSE_STRUCTURE -> . ELSE IF_STRUCTURE
    (83) FUNCTION_ARGUMENTS -> . SENTENCES
    (84) FUNCTION_ARGUMENTS -> . COMPARISONS
    (71) DECLARATIONS -> . INTEGER_DECLARATION
    (72) DECLARATIONS -> . DECIMAL_DECLARATION
    (64) FOR_BODY_STRUCTURE -> . EXPRESSIONS
    (65) FOR_BODY_STRUCTURE -> . BREAK SEMICOLON
    (66) FOR_BODY_STRUCTURE -> . CONTINUE SEMICOLON
    (63) FOR_ARGUMENTS_STRUCTURE -> . LPAREN DECLARATIONS SEMICOLON COMPARISONS SEMICOLON BUCLE RPAREN
    (54) SWITCH_CASE -> . CASE INTEGER COLON EXPRESSIONS BREAK SEMICOLON
    (55) SWITCH_DEFAULT -> . DEFAULT COLON EXPRESSIONS BREAK SEMICOLON
    (130) SENTENCES -> . SENTENCE
    (131) SENTENCES -> . SENTENCE COMMA SENTENCES

    PP_DEFINE       shift and go to state 39
    PP_INCLUDE      shift and go to state 40
    STRING          shift and go to state 41
    INTEGER         shift and go to state 42
    DECIMAL         shift and go to state 43
    WHILE           shift and go to state 44
    SWITCH          shift and go to state 46
    IF              shift and go to state 47
    FOR             shift and go to state 48
    VARNAME         shift and go to state 49
    INT             shift and go to state 50
    SHORT           shift and go to state 51
    LONG            shift and go to state 52
    FLOAT           shift and go to state 53
    DOUBLE          shift and go to state 54
    EQUAL           shift and go to state 55
    PLUS_EQUAL      shift and go to state 56
    MINUS_EQUAL     shift and go to state 57
    DIV_EQUAL       shift and go to state 58
    TIMES_EQUAL     shift and go to state 59
    MOD_EQUAL       shift and go to state 60
    AND_EQUAL       shift and go to state 61
    OR_EQUAL        shift and go to state 62
    XOR_EQUAL       shift and go to state 63
    COMPLEMENT_EQUAL shift and go to state 64
    SHIFTL_EQUAL    shift and go to state 65
    SHIFTR_EQUAL    shift and go to state 66
    COMMENT         shift and go to state 67
    PLUS            shift and go to state 68
    MINUS           shift and go to state 69
    TIMES           shift and go to state 70
    MODULUS         shift and go to state 71
    DIVIDE          shift and go to state 72
    EQUAL_TO        shift and go to state 73
    NOT_EQUAL       shift and go to state 74
    GREATER_THAN    shift and go to state 75
    LESS_THAN       shift and go to state 76
    GREATER_EQUAL   shift and go to state 77
    LESS_EQUAL      shift and go to state 78
    AND             shift and go to state 79
    OR              shift and go to state 80
    NOT             shift and go to state 81
    DECREASE        shift and go to state 84
    ELSE            shift and go to state 85
    BREAK           shift and go to state 87
    CONTINUE        shift and go to state 88
    LPAREN          shift and go to state 45
    CASE            shift and go to state 89
    DEFAULT         shift and go to state 90

    ROOT                           shift and go to state 1
    PREPROCESOR_DIRECTIVE          shift and go to state 2
    DEFINE                         shift and go to state 3
    INCLUDE                        shift and go to state 4
    VALUE                          shift and go to state 5
    NUMBER                         shift and go to state 6
    CONTROL_STRUCTURES             shift and go to state 7
    WHILE_STRUCTURE                shift and go to state 8
    SWITCH_STRUCTURE               shift and go to state 9
    IF_STRUCTURE                   shift and go to state 10
    FOR_STRUCTURE                  shift and go to state 11
    CODE                           shift and go to state 12
    EXPRESSION                     shift and go to state 13
    EXPRESSIONS                    shift and go to state 14
    FUNCTION                       shift and go to state 15
    INTEGER_TYPE                   shift and go to state 16
    DECIMAL_TYPE                   shift and go to state 17
    INTEGER_DECLARATION            shift and go to state 18
    DECIMAL_DECLARATION            shift and go to state 19
    ASSIGNMENT_DECLARATION         shift and go to state 20
    ASSIGNMENT_OPERATOR            shift and go to state 21
    COMENTARIOLEX                  shift and go to state 22
    VARIABLELEX                    shift and go to state 23
    OPERATOR                       shift and go to state 24
    OPERATION                      shift and go to state 25
    OPERATIONS                     shift and go to state 26
    COMPARISON_OPERATOR            shift and go to state 27
    COMPARISON                     shift and go to state 28
    COMPARISONS                    shift and go to state 29
    LOGICAL_OPERATOR               shift and go to state 30
    SENTENCE                       shift and go to state 31
    SWITCH_BODY                    shift and go to state 32
    BUCLE                          shift and go to state 33
    ELSE_STRUCTURE                 shift and go to state 34
    FUNCTION_ARGUMENTS             shift and go to state 35
    DECLARATIONS                   shift and go to state 36
    FOR_BODY_STRUCTURE             shift and go to state 37
    FOR_ARGUMENTS_STRUCTURE        shift and go to state 38
    SWITCH_CASE                    shift and go to state 82
    SWITCH_DEFAULT                 shift and go to state 83
    SENTENCES                      shift and go to state 86

state 1

    (0) S' -> ROOT .



state 2

    (1) ROOT -> PREPROCESOR_DIRECTIVE .

    $end            reduce using rule 1 (ROOT -> PREPROCESOR_DIRECTIVE .)


state 3

    (2) ROOT -> DEFINE .
    (38) PREPROCESOR_DIRECTIVE -> DEFINE .

  ! reduce/reduce conflict for $end resolved using rule 2 (ROOT -> DEFINE .)
    $end            reduce using rule 2 (ROOT -> DEFINE .)

  ! $end            [ reduce using rule 38 (PREPROCESOR_DIRECTIVE -> DEFINE .) ]


state 4

    (3) ROOT -> INCLUDE .
    (39) PREPROCESOR_DIRECTIVE -> INCLUDE .

  ! reduce/reduce conflict for $end resolved using rule 3 (ROOT -> INCLUDE .)
    $end            reduce using rule 3 (ROOT -> INCLUDE .)

  ! $end            [ reduce using rule 39 (PREPROCESOR_DIRECTIVE -> INCLUDE .) ]


state 5

    (4) ROOT -> VALUE .
    (121) COMPARISON -> VALUE . COMPARISON_OPERATOR VALUE
    (115) COMPARISON_OPERATOR -> . EQUAL_TO
    (116) COMPARISON_OPERATOR -> . NOT_EQUAL
    (117) COMPARISON_OPERATOR -> . GREATER_THAN
    (118) COMPARISON_OPERATOR -> . LESS_THAN
    (119) COMPARISON_OPERATOR -> . GREATER_EQUAL
    (120) COMPARISON_OPERATOR -> . LESS_EQUAL

    $end            reduce using rule 4 (ROOT -> VALUE .)
    EQUAL_TO        shift and go to state 73
    NOT_EQUAL       shift and go to state 74
    GREATER_THAN    shift and go to state 75
    LESS_THAN       shift and go to state 76
    GREATER_EQUAL   shift and go to state 77
    LESS_EQUAL      shift and go to state 78

    COMPARISON_OPERATOR            shift and go to state 91

state 6

    (5) ROOT -> NUMBER .
    (42) VALUE -> NUMBER .
    (112) OPERATION -> NUMBER . OPERATOR NUMBER
    (128) SENTENCE -> NUMBER .
    (107) OPERATOR -> . PLUS
    (108) OPERATOR -> . MINUS
    (109) OPERATOR -> . TIMES
    (110) OPERATOR -> . MODULUS
    (111) OPERATOR -> . DIVIDE

  ! reduce/reduce conflict for $end resolved using rule 5 (ROOT -> NUMBER .)
  ! reduce/reduce conflict for EQUAL_TO resolved using rule 42 (VALUE -> NUMBER .)
  ! reduce/reduce conflict for NOT_EQUAL resolved using rule 42 (VALUE -> NUMBER .)
  ! reduce/reduce conflict for GREATER_THAN resolved using rule 42 (VALUE -> NUMBER .)
  ! reduce/reduce conflict for LESS_THAN resolved using rule 42 (VALUE -> NUMBER .)
  ! reduce/reduce conflict for GREATER_EQUAL resolved using rule 42 (VALUE -> NUMBER .)
  ! reduce/reduce conflict for LESS_EQUAL resolved using rule 42 (VALUE -> NUMBER .)
  ! reduce/reduce conflict for $end resolved using rule 5 (ROOT -> NUMBER .)
    $end            reduce using rule 5 (ROOT -> NUMBER .)
    EQUAL_TO        reduce using rule 42 (VALUE -> NUMBER .)
    NOT_EQUAL       reduce using rule 42 (VALUE -> NUMBER .)
    GREATER_THAN    reduce using rule 42 (VALUE -> NUMBER .)
    LESS_THAN       reduce using rule 42 (VALUE -> NUMBER .)
    GREATER_EQUAL   reduce using rule 42 (VALUE -> NUMBER .)
    LESS_EQUAL      reduce using rule 42 (VALUE -> NUMBER .)
    COMMA           reduce using rule 128 (SENTENCE -> NUMBER .)
    PLUS            shift and go to state 68
    MINUS           shift and go to state 69
    TIMES           shift and go to state 70
    MODULUS         shift and go to state 71
    DIVIDE          shift and go to state 72

  ! $end            [ reduce using rule 42 (VALUE -> NUMBER .) ]
  ! EQUAL_TO        [ reduce using rule 128 (SENTENCE -> NUMBER .) ]
  ! NOT_EQUAL       [ reduce using rule 128 (SENTENCE -> NUMBER .) ]
  ! GREATER_THAN    [ reduce using rule 128 (SENTENCE -> NUMBER .) ]
  ! LESS_THAN       [ reduce using rule 128 (SENTENCE -> NUMBER .) ]
  ! GREATER_EQUAL   [ reduce using rule 128 (SENTENCE -> NUMBER .) ]
  ! LESS_EQUAL      [ reduce using rule 128 (SENTENCE -> NUMBER .) ]
  ! $end            [ reduce using rule 128 (SENTENCE -> NUMBER .) ]

    OPERATOR                       shift and go to state 92

state 7

    (6) ROOT -> CONTROL_STRUCTURES .
    (79) EXPRESSION -> CONTROL_STRUCTURES .

  ! reduce/reduce conflict for $end resolved using rule 6 (ROOT -> CONTROL_STRUCTURES .)
    $end            reduce using rule 6 (ROOT -> CONTROL_STRUCTURES .)
    VARNAME         reduce using rule 79 (EXPRESSION -> CONTROL_STRUCTURES .)
    COMMENT         reduce using rule 79 (EXPRESSION -> CONTROL_STRUCTURES .)
    IF              reduce using rule 79 (EXPRESSION -> CONTROL_STRUCTURES .)
    FOR             reduce using rule 79 (EXPRESSION -> CONTROL_STRUCTURES .)
    WHILE           reduce using rule 79 (EXPRESSION -> CONTROL_STRUCTURES .)
    SWITCH          reduce using rule 79 (EXPRESSION -> CONTROL_STRUCTURES .)
    INT             reduce using rule 79 (EXPRESSION -> CONTROL_STRUCTURES .)
    SHORT           reduce using rule 79 (EXPRESSION -> CONTROL_STRUCTURES .)
    LONG            reduce using rule 79 (EXPRESSION -> CONTROL_STRUCTURES .)
    FLOAT           reduce using rule 79 (EXPRESSION -> CONTROL_STRUCTURES .)
    DOUBLE          reduce using rule 79 (EXPRESSION -> CONTROL_STRUCTURES .)

  ! $end            [ reduce using rule 79 (EXPRESSION -> CONTROL_STRUCTURES .) ]


state 8

    (7) ROOT -> WHILE_STRUCTURE .
    (48) CONTROL_STRUCTURES -> WHILE_STRUCTURE .

  ! reduce/reduce conflict for $end resolved using rule 7 (ROOT -> WHILE_STRUCTURE .)
    $end            reduce using rule 7 (ROOT -> WHILE_STRUCTURE .)
    VARNAME         reduce using rule 48 (CONTROL_STRUCTURES -> WHILE_STRUCTURE .)
    COMMENT         reduce using rule 48 (CONTROL_STRUCTURES -> WHILE_STRUCTURE .)
    IF              reduce using rule 48 (CONTROL_STRUCTURES -> WHILE_STRUCTURE .)
    FOR             reduce using rule 48 (CONTROL_STRUCTURES -> WHILE_STRUCTURE .)
    WHILE           reduce using rule 48 (CONTROL_STRUCTURES -> WHILE_STRUCTURE .)
    SWITCH          reduce using rule 48 (CONTROL_STRUCTURES -> WHILE_STRUCTURE .)
    INT             reduce using rule 48 (CONTROL_STRUCTURES -> WHILE_STRUCTURE .)
    SHORT           reduce using rule 48 (CONTROL_STRUCTURES -> WHILE_STRUCTURE .)
    LONG            reduce using rule 48 (CONTROL_STRUCTURES -> WHILE_STRUCTURE .)
    FLOAT           reduce using rule 48 (CONTROL_STRUCTURES -> WHILE_STRUCTURE .)
    DOUBLE          reduce using rule 48 (CONTROL_STRUCTURES -> WHILE_STRUCTURE .)

  ! $end            [ reduce using rule 48 (CONTROL_STRUCTURES -> WHILE_STRUCTURE .) ]


state 9

    (8) ROOT -> SWITCH_STRUCTURE .
    (49) CONTROL_STRUCTURES -> SWITCH_STRUCTURE .

  ! reduce/reduce conflict for $end resolved using rule 8 (ROOT -> SWITCH_STRUCTURE .)
    $end            reduce using rule 8 (ROOT -> SWITCH_STRUCTURE .)
    VARNAME         reduce using rule 49 (CONTROL_STRUCTURES -> SWITCH_STRUCTURE .)
    COMMENT         reduce using rule 49 (CONTROL_STRUCTURES -> SWITCH_STRUCTURE .)
    IF              reduce using rule 49 (CONTROL_STRUCTURES -> SWITCH_STRUCTURE .)
    FOR             reduce using rule 49 (CONTROL_STRUCTURES -> SWITCH_STRUCTURE .)
    WHILE           reduce using rule 49 (CONTROL_STRUCTURES -> SWITCH_STRUCTURE .)
    SWITCH          reduce using rule 49 (CONTROL_STRUCTURES -> SWITCH_STRUCTURE .)
    INT             reduce using rule 49 (CONTROL_STRUCTURES -> SWITCH_STRUCTURE .)
    SHORT           reduce using rule 49 (CONTROL_STRUCTURES -> SWITCH_STRUCTURE .)
    LONG            reduce using rule 49 (CONTROL_STRUCTURES -> SWITCH_STRUCTURE .)
    FLOAT           reduce using rule 49 (CONTROL_STRUCTURES -> SWITCH_STRUCTURE .)
    DOUBLE          reduce using rule 49 (CONTROL_STRUCTURES -> SWITCH_STRUCTURE .)

  ! $end            [ reduce using rule 49 (CONTROL_STRUCTURES -> SWITCH_STRUCTURE .) ]


state 10

    (9) ROOT -> IF_STRUCTURE .
    (46) CONTROL_STRUCTURES -> IF_STRUCTURE .

  ! reduce/reduce conflict for $end resolved using rule 9 (ROOT -> IF_STRUCTURE .)
    $end            reduce using rule 9 (ROOT -> IF_STRUCTURE .)
    VARNAME         reduce using rule 46 (CONTROL_STRUCTURES -> IF_STRUCTURE .)
    COMMENT         reduce using rule 46 (CONTROL_STRUCTURES -> IF_STRUCTURE .)
    IF              reduce using rule 46 (CONTROL_STRUCTURES -> IF_STRUCTURE .)
    FOR             reduce using rule 46 (CONTROL_STRUCTURES -> IF_STRUCTURE .)
    WHILE           reduce using rule 46 (CONTROL_STRUCTURES -> IF_STRUCTURE .)
    SWITCH          reduce using rule 46 (CONTROL_STRUCTURES -> IF_STRUCTURE .)
    INT             reduce using rule 46 (CONTROL_STRUCTURES -> IF_STRUCTURE .)
    SHORT           reduce using rule 46 (CONTROL_STRUCTURES -> IF_STRUCTURE .)
    LONG            reduce using rule 46 (CONTROL_STRUCTURES -> IF_STRUCTURE .)
    FLOAT           reduce using rule 46 (CONTROL_STRUCTURES -> IF_STRUCTURE .)
    DOUBLE          reduce using rule 46 (CONTROL_STRUCTURES -> IF_STRUCTURE .)

  ! $end            [ reduce using rule 46 (CONTROL_STRUCTURES -> IF_STRUCTURE .) ]


state 11

    (10) ROOT -> FOR_STRUCTURE .
    (47) CONTROL_STRUCTURES -> FOR_STRUCTURE .

  ! reduce/reduce conflict for $end resolved using rule 10 (ROOT -> FOR_STRUCTURE .)
    $end            reduce using rule 10 (ROOT -> FOR_STRUCTURE .)
    VARNAME         reduce using rule 47 (CONTROL_STRUCTURES -> FOR_STRUCTURE .)
    COMMENT         reduce using rule 47 (CONTROL_STRUCTURES -> FOR_STRUCTURE .)
    IF              reduce using rule 47 (CONTROL_STRUCTURES -> FOR_STRUCTURE .)
    FOR             reduce using rule 47 (CONTROL_STRUCTURES -> FOR_STRUCTURE .)
    WHILE           reduce using rule 47 (CONTROL_STRUCTURES -> FOR_STRUCTURE .)
    SWITCH          reduce using rule 47 (CONTROL_STRUCTURES -> FOR_STRUCTURE .)
    INT             reduce using rule 47 (CONTROL_STRUCTURES -> FOR_STRUCTURE .)
    SHORT           reduce using rule 47 (CONTROL_STRUCTURES -> FOR_STRUCTURE .)
    LONG            reduce using rule 47 (CONTROL_STRUCTURES -> FOR_STRUCTURE .)
    FLOAT           reduce using rule 47 (CONTROL_STRUCTURES -> FOR_STRUCTURE .)
    DOUBLE          reduce using rule 47 (CONTROL_STRUCTURES -> FOR_STRUCTURE .)

  ! $end            [ reduce using rule 47 (CONTROL_STRUCTURES -> FOR_STRUCTURE .) ]


state 12

    (11) ROOT -> CODE .
    (78) EXPRESSION -> CODE . SEMICOLON

    $end            reduce using rule 11 (ROOT -> CODE .)
    SEMICOLON       shift and go to state 93


state 13

    (12) ROOT -> EXPRESSION .
    (80) EXPRESSIONS -> EXPRESSION .
    (81) EXPRESSIONS -> EXPRESSION . EXPRESSIONS
    (80) EXPRESSIONS -> . EXPRESSION
    (81) EXPRESSIONS -> . EXPRESSION EXPRESSIONS
    (78) EXPRESSION -> . CODE SEMICOLON
    (79) EXPRESSION -> . CONTROL_STRUCTURES
    (73) CODE -> . FUNCTION
    (74) CODE -> . INTEGER_DECLARATION
    (75) CODE -> . DECIMAL_DECLARATION
    (76) CODE -> . ASSIGNMENT_DECLARATION
    (77) CODE -> . COMENTARIOLEX
    (46) CONTROL_STRUCTURES -> . IF_STRUCTURE
    (47) CONTROL_STRUCTURES -> . FOR_STRUCTURE
    (48) CONTROL_STRUCTURES -> . WHILE_STRUCTURE
    (49) CONTROL_STRUCTURES -> . SWITCH_STRUCTURE
    (82) FUNCTION -> . VARNAME LPAREN FUNCTION_ARGUMENTS RPAREN
    (90) INTEGER_DECLARATION -> . INTEGER_TYPE VARNAME EQUAL INTEGER
    (91) DECIMAL_DECLARATION -> . DECIMAL_TYPE VARNAME EQUAL DECIMAL
    (92) ASSIGNMENT_DECLARATION -> . VARNAME ASSIGNMENT_OPERATOR SENTENCE
    (105) COMENTARIOLEX -> . COMMENT
    (67) IF_STRUCTURE -> . IF LPAREN COMPARISONS RPAREN LCURL_BRACE EXPRESSIONS RCURL_BRACE
    (68) IF_STRUCTURE -> . IF LPAREN COMPARISONS RPAREN LCURL_BRACE EXPRESSIONS RCURL_BRACE ELSE_STRUCTURE
    (62) FOR_STRUCTURE -> . FOR FOR_ARGUMENTS_STRUCTURE LCURL_BRACE FOR_BODY_STRUCTURE RCURL_BRACE
    (53) WHILE_STRUCTURE -> . WHILE LPAREN COMPARISONS RPAREN LCURL_BRACE BODY_STRUCTURE RCURL_BRACE
    (59) SWITCH_STRUCTURE -> . SWITCH LPAREN COMPARISONS RPAREN LCURL_BRACE SWITCH_BODY RCURL_BRACE
    (85) INTEGER_TYPE -> . INT
    (86) INTEGER_TYPE -> . SHORT
    (87) INTEGER_TYPE -> . LONG
    (88) DECIMAL_TYPE -> . FLOAT
    (89) DECIMAL_TYPE -> . DOUBLE

  ! reduce/reduce conflict for $end resolved using rule 12 (ROOT -> EXPRESSION .)
    $end            reduce using rule 12 (ROOT -> EXPRESSION .)
    VARNAME         shift and go to state 107
    COMMENT         shift and go to state 67
    IF              shift and go to state 47
    FOR             shift and go to state 48
    WHILE           shift and go to state 44
    SWITCH          shift and go to state 46
    INT             shift and go to state 50
    SHORT           shift and go to state 51
    LONG            shift and go to state 52
    FLOAT           shift and go to state 53
    DOUBLE          shift and go to state 54

  ! $end            [ reduce using rule 80 (EXPRESSIONS -> EXPRESSION .) ]

    EXPRESSION                     shift and go to state 94
    EXPRESSIONS                    shift and go to state 95
    CODE                           shift and go to state 96
    CONTROL_STRUCTURES             shift and go to state 97
    FUNCTION                       shift and go to state 98
    INTEGER_DECLARATION            shift and go to state 99
    DECIMAL_DECLARATION            shift and go to state 100
    ASSIGNMENT_DECLARATION         shift and go to state 101
    COMENTARIOLEX                  shift and go to state 102
    IF_STRUCTURE                   shift and go to state 103
    FOR_STRUCTURE                  shift and go to state 104
    WHILE_STRUCTURE                shift and go to state 105
    SWITCH_STRUCTURE               shift and go to state 106
    INTEGER_TYPE                   shift and go to state 108
    DECIMAL_TYPE                   shift and go to state 109

state 14

    (13) ROOT -> EXPRESSIONS .
    (64) FOR_BODY_STRUCTURE -> EXPRESSIONS .

  ! reduce/reduce conflict for $end resolved using rule 13 (ROOT -> EXPRESSIONS .)
    $end            reduce using rule 13 (ROOT -> EXPRESSIONS .)

  ! $end            [ reduce using rule 64 (FOR_BODY_STRUCTURE -> EXPRESSIONS .) ]


state 15

    (14) ROOT -> FUNCTION .
    (73) CODE -> FUNCTION .

  ! reduce/reduce conflict for $end resolved using rule 14 (ROOT -> FUNCTION .)
    $end            reduce using rule 14 (ROOT -> FUNCTION .)
    SEMICOLON       reduce using rule 73 (CODE -> FUNCTION .)

  ! $end            [ reduce using rule 73 (CODE -> FUNCTION .) ]


state 16

    (15) ROOT -> INTEGER_TYPE .
    (90) INTEGER_DECLARATION -> INTEGER_TYPE . VARNAME EQUAL INTEGER

    $end            reduce using rule 15 (ROOT -> INTEGER_TYPE .)
    VARNAME         shift and go to state 110


state 17

    (16) ROOT -> DECIMAL_TYPE .
    (91) DECIMAL_DECLARATION -> DECIMAL_TYPE . VARNAME EQUAL DECIMAL

    $end            reduce using rule 16 (ROOT -> DECIMAL_TYPE .)
    VARNAME         shift and go to state 111


state 18

    (17) ROOT -> INTEGER_DECLARATION .
    (74) CODE -> INTEGER_DECLARATION .
    (71) DECLARATIONS -> INTEGER_DECLARATION .

  ! reduce/reduce conflict for $end resolved using rule 17 (ROOT -> INTEGER_DECLARATION .)
  ! reduce/reduce conflict for $end resolved using rule 17 (ROOT -> INTEGER_DECLARATION .)
    $end            reduce using rule 17 (ROOT -> INTEGER_DECLARATION .)
    SEMICOLON       reduce using rule 74 (CODE -> INTEGER_DECLARATION .)

  ! $end            [ reduce using rule 74 (CODE -> INTEGER_DECLARATION .) ]
  ! $end            [ reduce using rule 71 (DECLARATIONS -> INTEGER_DECLARATION .) ]


state 19

    (18) ROOT -> DECIMAL_DECLARATION .
    (75) CODE -> DECIMAL_DECLARATION .
    (72) DECLARATIONS -> DECIMAL_DECLARATION .

  ! reduce/reduce conflict for $end resolved using rule 18 (ROOT -> DECIMAL_DECLARATION .)
  ! reduce/reduce conflict for $end resolved using rule 18 (ROOT -> DECIMAL_DECLARATION .)
    $end            reduce using rule 18 (ROOT -> DECIMAL_DECLARATION .)
    SEMICOLON       reduce using rule 75 (CODE -> DECIMAL_DECLARATION .)

  ! $end            [ reduce using rule 75 (CODE -> DECIMAL_DECLARATION .) ]
  ! $end            [ reduce using rule 72 (DECLARATIONS -> DECIMAL_DECLARATION .) ]


state 20

    (19) ROOT -> ASSIGNMENT_DECLARATION .
    (76) CODE -> ASSIGNMENT_DECLARATION .

  ! reduce/reduce conflict for $end resolved using rule 19 (ROOT -> ASSIGNMENT_DECLARATION .)
    $end            reduce using rule 19 (ROOT -> ASSIGNMENT_DECLARATION .)
    SEMICOLON       reduce using rule 76 (CODE -> ASSIGNMENT_DECLARATION .)

  ! $end            [ reduce using rule 76 (CODE -> ASSIGNMENT_DECLARATION .) ]


state 21

    (20) ROOT -> ASSIGNMENT_OPERATOR .

    $end            reduce using rule 20 (ROOT -> ASSIGNMENT_OPERATOR .)


state 22

    (21) ROOT -> COMENTARIOLEX .
    (77) CODE -> COMENTARIOLEX .

  ! reduce/reduce conflict for $end resolved using rule 21 (ROOT -> COMENTARIOLEX .)
    $end            reduce using rule 21 (ROOT -> COMENTARIOLEX .)
    SEMICOLON       reduce using rule 77 (CODE -> COMENTARIOLEX .)

  ! $end            [ reduce using rule 77 (CODE -> COMENTARIOLEX .) ]


state 23

    (22) ROOT -> VARIABLELEX .
    (60) BUCLE -> VARIABLELEX . INCREASE

    $end            reduce using rule 22 (ROOT -> VARIABLELEX .)
    INCREASE        shift and go to state 112


state 24

    (23) ROOT -> OPERATOR .

    $end            reduce using rule 23 (ROOT -> OPERATOR .)


state 25

    (24) ROOT -> OPERATION .
    (113) OPERATIONS -> OPERATION .
    (114) OPERATIONS -> OPERATION . OPERATOR OPERATIONS
    (107) OPERATOR -> . PLUS
    (108) OPERATOR -> . MINUS
    (109) OPERATOR -> . TIMES
    (110) OPERATOR -> . MODULUS
    (111) OPERATOR -> . DIVIDE

  ! reduce/reduce conflict for $end resolved using rule 24 (ROOT -> OPERATION .)
    $end            reduce using rule 24 (ROOT -> OPERATION .)
    PLUS            shift and go to state 68
    MINUS           shift and go to state 69
    TIMES           shift and go to state 70
    MODULUS         shift and go to state 71
    DIVIDE          shift and go to state 72

  ! $end            [ reduce using rule 113 (OPERATIONS -> OPERATION .) ]

    OPERATOR                       shift and go to state 113

state 26

    (25) ROOT -> OPERATIONS .

    $end            reduce using rule 25 (ROOT -> OPERATIONS .)


state 27

    (26) ROOT -> COMPARISON_OPERATOR .

    $end            reduce using rule 26 (ROOT -> COMPARISON_OPERATOR .)


state 28

    (27) ROOT -> COMPARISON .
    (123) COMPARISONS -> COMPARISON .
    (124) COMPARISONS -> COMPARISON . LOGICAL_OPERATOR COMPARISONS
    (125) LOGICAL_OPERATOR -> . AND
    (126) LOGICAL_OPERATOR -> . OR
    (127) LOGICAL_OPERATOR -> . NOT

  ! reduce/reduce conflict for $end resolved using rule 27 (ROOT -> COMPARISON .)
    $end            reduce using rule 27 (ROOT -> COMPARISON .)
    AND             shift and go to state 79
    OR              shift and go to state 80
    NOT             shift and go to state 81

  ! $end            [ reduce using rule 123 (COMPARISONS -> COMPARISON .) ]

    LOGICAL_OPERATOR               shift and go to state 114

state 29

    (28) ROOT -> COMPARISONS .
    (84) FUNCTION_ARGUMENTS -> COMPARISONS .

  ! reduce/reduce conflict for $end resolved using rule 28 (ROOT -> COMPARISONS .)
    $end            reduce using rule 28 (ROOT -> COMPARISONS .)

  ! $end            [ reduce using rule 84 (FUNCTION_ARGUMENTS -> COMPARISONS .) ]


state 30

    (29) ROOT -> LOGICAL_OPERATOR .

    $end            reduce using rule 29 (ROOT -> LOGICAL_OPERATOR .)


state 31

    (30) ROOT -> SENTENCE .
    (122) COMPARISON -> SENTENCE . COMPARISON_OPERATOR SENTENCE
    (130) SENTENCES -> SENTENCE .
    (131) SENTENCES -> SENTENCE . COMMA SENTENCES
    (115) COMPARISON_OPERATOR -> . EQUAL_TO
    (116) COMPARISON_OPERATOR -> . NOT_EQUAL
    (117) COMPARISON_OPERATOR -> . GREATER_THAN
    (118) COMPARISON_OPERATOR -> . LESS_THAN
    (119) COMPARISON_OPERATOR -> . GREATER_EQUAL
    (120) COMPARISON_OPERATOR -> . LESS_EQUAL

  ! reduce/reduce conflict for $end resolved using rule 30 (ROOT -> SENTENCE .)
    $end            reduce using rule 30 (ROOT -> SENTENCE .)
    COMMA           shift and go to state 116
    EQUAL_TO        shift and go to state 73
    NOT_EQUAL       shift and go to state 74
    GREATER_THAN    shift and go to state 75
    LESS_THAN       shift and go to state 76
    GREATER_EQUAL   shift and go to state 77
    LESS_EQUAL      shift and go to state 78

  ! $end            [ reduce using rule 130 (SENTENCES -> SENTENCE .) ]

    COMPARISON_OPERATOR            shift and go to state 115

state 32

    (31) ROOT -> SWITCH_BODY .

    $end            reduce using rule 31 (ROOT -> SWITCH_BODY .)


state 33

    (32) ROOT -> BUCLE .

    $end            reduce using rule 32 (ROOT -> BUCLE .)


state 34

    (33) ROOT -> ELSE_STRUCTURE .

    $end            reduce using rule 33 (ROOT -> ELSE_STRUCTURE .)


state 35

    (34) ROOT -> FUNCTION_ARGUMENTS .

    $end            reduce using rule 34 (ROOT -> FUNCTION_ARGUMENTS .)


state 36

    (35) ROOT -> DECLARATIONS .

    $end            reduce using rule 35 (ROOT -> DECLARATIONS .)


state 37

    (36) ROOT -> FOR_BODY_STRUCTURE .

    $end            reduce using rule 36 (ROOT -> FOR_BODY_STRUCTURE .)


state 38

    (37) ROOT -> FOR_ARGUMENTS_STRUCTURE .

    $end            reduce using rule 37 (ROOT -> FOR_ARGUMENTS_STRUCTURE .)


state 39

    (40) DEFINE -> PP_DEFINE . VARIABLELEX VALUE
    (106) VARIABLELEX -> . VARNAME

    VARNAME         shift and go to state 118

    VARIABLELEX                    shift and go to state 117

state 40

    (41) INCLUDE -> PP_INCLUDE . HEADER_LIB

    HEADER_LIB      shift and go to state 119


state 41

    (43) VALUE -> STRING .

    EQUAL_TO        reduce using rule 43 (VALUE -> STRING .)
    NOT_EQUAL       reduce using rule 43 (VALUE -> STRING .)
    GREATER_THAN    reduce using rule 43 (VALUE -> STRING .)
    LESS_THAN       reduce using rule 43 (VALUE -> STRING .)
    GREATER_EQUAL   reduce using rule 43 (VALUE -> STRING .)
    LESS_EQUAL      reduce using rule 43 (VALUE -> STRING .)
    $end            reduce using rule 43 (VALUE -> STRING .)
    AND             reduce using rule 43 (VALUE -> STRING .)
    OR              reduce using rule 43 (VALUE -> STRING .)
    NOT             reduce using rule 43 (VALUE -> STRING .)
    RPAREN          reduce using rule 43 (VALUE -> STRING .)
    SEMICOLON       reduce using rule 43 (VALUE -> STRING .)


state 42

    (44) NUMBER -> INTEGER .

    PLUS            reduce using rule 44 (NUMBER -> INTEGER .)
    MINUS           reduce using rule 44 (NUMBER -> INTEGER .)
    TIMES           reduce using rule 44 (NUMBER -> INTEGER .)
    MODULUS         reduce using rule 44 (NUMBER -> INTEGER .)
    DIVIDE          reduce using rule 44 (NUMBER -> INTEGER .)
    $end            reduce using rule 44 (NUMBER -> INTEGER .)
    EQUAL_TO        reduce using rule 44 (NUMBER -> INTEGER .)
    NOT_EQUAL       reduce using rule 44 (NUMBER -> INTEGER .)
    GREATER_THAN    reduce using rule 44 (NUMBER -> INTEGER .)
    LESS_THAN       reduce using rule 44 (NUMBER -> INTEGER .)
    GREATER_EQUAL   reduce using rule 44 (NUMBER -> INTEGER .)
    LESS_EQUAL      reduce using rule 44 (NUMBER -> INTEGER .)
    COMMA           reduce using rule 44 (NUMBER -> INTEGER .)
    AND             reduce using rule 44 (NUMBER -> INTEGER .)
    OR              reduce using rule 44 (NUMBER -> INTEGER .)
    NOT             reduce using rule 44 (NUMBER -> INTEGER .)
    RPAREN          reduce using rule 44 (NUMBER -> INTEGER .)
    SEMICOLON       reduce using rule 44 (NUMBER -> INTEGER .)


state 43

    (45) NUMBER -> DECIMAL .

    PLUS            reduce using rule 45 (NUMBER -> DECIMAL .)
    MINUS           reduce using rule 45 (NUMBER -> DECIMAL .)
    TIMES           reduce using rule 45 (NUMBER -> DECIMAL .)
    MODULUS         reduce using rule 45 (NUMBER -> DECIMAL .)
    DIVIDE          reduce using rule 45 (NUMBER -> DECIMAL .)
    $end            reduce using rule 45 (NUMBER -> DECIMAL .)
    EQUAL_TO        reduce using rule 45 (NUMBER -> DECIMAL .)
    NOT_EQUAL       reduce using rule 45 (NUMBER -> DECIMAL .)
    GREATER_THAN    reduce using rule 45 (NUMBER -> DECIMAL .)
    LESS_THAN       reduce using rule 45 (NUMBER -> DECIMAL .)
    GREATER_EQUAL   reduce using rule 45 (NUMBER -> DECIMAL .)
    LESS_EQUAL      reduce using rule 45 (NUMBER -> DECIMAL .)
    COMMA           reduce using rule 45 (NUMBER -> DECIMAL .)
    AND             reduce using rule 45 (NUMBER -> DECIMAL .)
    OR              reduce using rule 45 (NUMBER -> DECIMAL .)
    NOT             reduce using rule 45 (NUMBER -> DECIMAL .)
    RPAREN          reduce using rule 45 (NUMBER -> DECIMAL .)
    SEMICOLON       reduce using rule 45 (NUMBER -> DECIMAL .)


state 44

    (53) WHILE_STRUCTURE -> WHILE . LPAREN COMPARISONS RPAREN LCURL_BRACE BODY_STRUCTURE RCURL_BRACE

    LPAREN          shift and go to state 120


state 45

    (63) FOR_ARGUMENTS_STRUCTURE -> LPAREN . DECLARATIONS SEMICOLON COMPARISONS SEMICOLON BUCLE RPAREN
    (71) DECLARATIONS -> . INTEGER_DECLARATION
    (72) DECLARATIONS -> . DECIMAL_DECLARATION
    (90) INTEGER_DECLARATION -> . INTEGER_TYPE VARNAME EQUAL INTEGER
    (91) DECIMAL_DECLARATION -> . DECIMAL_TYPE VARNAME EQUAL DECIMAL
    (85) INTEGER_TYPE -> . INT
    (86) INTEGER_TYPE -> . SHORT
    (87) INTEGER_TYPE -> . LONG
    (88) DECIMAL_TYPE -> . FLOAT
    (89) DECIMAL_TYPE -> . DOUBLE

    INT             shift and go to state 50
    SHORT           shift and go to state 51
    LONG            shift and go to state 52
    FLOAT           shift and go to state 53
    DOUBLE          shift and go to state 54

    DECLARATIONS                   shift and go to state 121
    INTEGER_DECLARATION            shift and go to state 122
    DECIMAL_DECLARATION            shift and go to state 123
    INTEGER_TYPE                   shift and go to state 108
    DECIMAL_TYPE                   shift and go to state 109

state 46

    (59) SWITCH_STRUCTURE -> SWITCH . LPAREN COMPARISONS RPAREN LCURL_BRACE SWITCH_BODY RCURL_BRACE

    LPAREN          shift and go to state 124


state 47

    (67) IF_STRUCTURE -> IF . LPAREN COMPARISONS RPAREN LCURL_BRACE EXPRESSIONS RCURL_BRACE
    (68) IF_STRUCTURE -> IF . LPAREN COMPARISONS RPAREN LCURL_BRACE EXPRESSIONS RCURL_BRACE ELSE_STRUCTURE

    LPAREN          shift and go to state 125


state 48

    (62) FOR_STRUCTURE -> FOR . FOR_ARGUMENTS_STRUCTURE LCURL_BRACE FOR_BODY_STRUCTURE RCURL_BRACE
    (63) FOR_ARGUMENTS_STRUCTURE -> . LPAREN DECLARATIONS SEMICOLON COMPARISONS SEMICOLON BUCLE RPAREN

    LPAREN          shift and go to state 45

    FOR_ARGUMENTS_STRUCTURE        shift and go to state 126

state 49

    (82) FUNCTION -> VARNAME . LPAREN FUNCTION_ARGUMENTS RPAREN
    (92) ASSIGNMENT_DECLARATION -> VARNAME . ASSIGNMENT_OPERATOR SENTENCE
    (106) VARIABLELEX -> VARNAME .
    (129) SENTENCE -> VARNAME .
    (93) ASSIGNMENT_OPERATOR -> . EQUAL
    (94) ASSIGNMENT_OPERATOR -> . PLUS_EQUAL
    (95) ASSIGNMENT_OPERATOR -> . MINUS_EQUAL
    (96) ASSIGNMENT_OPERATOR -> . DIV_EQUAL
    (97) ASSIGNMENT_OPERATOR -> . TIMES_EQUAL
    (98) ASSIGNMENT_OPERATOR -> . MOD_EQUAL
    (99) ASSIGNMENT_OPERATOR -> . AND_EQUAL
    (100) ASSIGNMENT_OPERATOR -> . OR_EQUAL
    (101) ASSIGNMENT_OPERATOR -> . XOR_EQUAL
    (102) ASSIGNMENT_OPERATOR -> . COMPLEMENT_EQUAL
    (103) ASSIGNMENT_OPERATOR -> . SHIFTL_EQUAL
    (104) ASSIGNMENT_OPERATOR -> . SHIFTR_EQUAL

  ! reduce/reduce conflict for $end resolved using rule 106 (VARIABLELEX -> VARNAME .)
    LPAREN          shift and go to state 127
    INCREASE        reduce using rule 106 (VARIABLELEX -> VARNAME .)
    $end            reduce using rule 106 (VARIABLELEX -> VARNAME .)
    COMMA           reduce using rule 129 (SENTENCE -> VARNAME .)
    EQUAL_TO        reduce using rule 129 (SENTENCE -> VARNAME .)
    NOT_EQUAL       reduce using rule 129 (SENTENCE -> VARNAME .)
    GREATER_THAN    reduce using rule 129 (SENTENCE -> VARNAME .)
    LESS_THAN       reduce using rule 129 (SENTENCE -> VARNAME .)
    GREATER_EQUAL   reduce using rule 129 (SENTENCE -> VARNAME .)
    LESS_EQUAL      reduce using rule 129 (SENTENCE -> VARNAME .)
    EQUAL           shift and go to state 55
    PLUS_EQUAL      shift and go to state 56
    MINUS_EQUAL     shift and go to state 57
    DIV_EQUAL       shift and go to state 58
    TIMES_EQUAL     shift and go to state 59
    MOD_EQUAL       shift and go to state 60
    AND_EQUAL       shift and go to state 61
    OR_EQUAL        shift and go to state 62
    XOR_EQUAL       shift and go to state 63
    COMPLEMENT_EQUAL shift and go to state 64
    SHIFTL_EQUAL    shift and go to state 65
    SHIFTR_EQUAL    shift and go to state 66

  ! $end            [ reduce using rule 129 (SENTENCE -> VARNAME .) ]

    ASSIGNMENT_OPERATOR            shift and go to state 128

state 50

    (85) INTEGER_TYPE -> INT .

    VARNAME         reduce using rule 85 (INTEGER_TYPE -> INT .)
    $end            reduce using rule 85 (INTEGER_TYPE -> INT .)


state 51

    (86) INTEGER_TYPE -> SHORT .

    VARNAME         reduce using rule 86 (INTEGER_TYPE -> SHORT .)
    $end            reduce using rule 86 (INTEGER_TYPE -> SHORT .)


state 52

    (87) INTEGER_TYPE -> LONG .

    VARNAME         reduce using rule 87 (INTEGER_TYPE -> LONG .)
    $end            reduce using rule 87 (INTEGER_TYPE -> LONG .)


state 53

    (88) DECIMAL_TYPE -> FLOAT .

    VARNAME         reduce using rule 88 (DECIMAL_TYPE -> FLOAT .)
    $end            reduce using rule 88 (DECIMAL_TYPE -> FLOAT .)


state 54

    (89) DECIMAL_TYPE -> DOUBLE .

    VARNAME         reduce using rule 89 (DECIMAL_TYPE -> DOUBLE .)
    $end            reduce using rule 89 (DECIMAL_TYPE -> DOUBLE .)


state 55

    (93) ASSIGNMENT_OPERATOR -> EQUAL .

    $end            reduce using rule 93 (ASSIGNMENT_OPERATOR -> EQUAL .)
    VARNAME         reduce using rule 93 (ASSIGNMENT_OPERATOR -> EQUAL .)
    INTEGER         reduce using rule 93 (ASSIGNMENT_OPERATOR -> EQUAL .)
    DECIMAL         reduce using rule 93 (ASSIGNMENT_OPERATOR -> EQUAL .)


state 56

    (94) ASSIGNMENT_OPERATOR -> PLUS_EQUAL .

    $end            reduce using rule 94 (ASSIGNMENT_OPERATOR -> PLUS_EQUAL .)
    VARNAME         reduce using rule 94 (ASSIGNMENT_OPERATOR -> PLUS_EQUAL .)
    INTEGER         reduce using rule 94 (ASSIGNMENT_OPERATOR -> PLUS_EQUAL .)
    DECIMAL         reduce using rule 94 (ASSIGNMENT_OPERATOR -> PLUS_EQUAL .)


state 57

    (95) ASSIGNMENT_OPERATOR -> MINUS_EQUAL .

    $end            reduce using rule 95 (ASSIGNMENT_OPERATOR -> MINUS_EQUAL .)
    VARNAME         reduce using rule 95 (ASSIGNMENT_OPERATOR -> MINUS_EQUAL .)
    INTEGER         reduce using rule 95 (ASSIGNMENT_OPERATOR -> MINUS_EQUAL .)
    DECIMAL         reduce using rule 95 (ASSIGNMENT_OPERATOR -> MINUS_EQUAL .)


state 58

    (96) ASSIGNMENT_OPERATOR -> DIV_EQUAL .

    $end            reduce using rule 96 (ASSIGNMENT_OPERATOR -> DIV_EQUAL .)
    VARNAME         reduce using rule 96 (ASSIGNMENT_OPERATOR -> DIV_EQUAL .)
    INTEGER         reduce using rule 96 (ASSIGNMENT_OPERATOR -> DIV_EQUAL .)
    DECIMAL         reduce using rule 96 (ASSIGNMENT_OPERATOR -> DIV_EQUAL .)


state 59

    (97) ASSIGNMENT_OPERATOR -> TIMES_EQUAL .

    $end            reduce using rule 97 (ASSIGNMENT_OPERATOR -> TIMES_EQUAL .)
    VARNAME         reduce using rule 97 (ASSIGNMENT_OPERATOR -> TIMES_EQUAL .)
    INTEGER         reduce using rule 97 (ASSIGNMENT_OPERATOR -> TIMES_EQUAL .)
    DECIMAL         reduce using rule 97 (ASSIGNMENT_OPERATOR -> TIMES_EQUAL .)


state 60

    (98) ASSIGNMENT_OPERATOR -> MOD_EQUAL .

    $end            reduce using rule 98 (ASSIGNMENT_OPERATOR -> MOD_EQUAL .)
    VARNAME         reduce using rule 98 (ASSIGNMENT_OPERATOR -> MOD_EQUAL .)
    INTEGER         reduce using rule 98 (ASSIGNMENT_OPERATOR -> MOD_EQUAL .)
    DECIMAL         reduce using rule 98 (ASSIGNMENT_OPERATOR -> MOD_EQUAL .)


state 61

    (99) ASSIGNMENT_OPERATOR -> AND_EQUAL .

    $end            reduce using rule 99 (ASSIGNMENT_OPERATOR -> AND_EQUAL .)
    VARNAME         reduce using rule 99 (ASSIGNMENT_OPERATOR -> AND_EQUAL .)
    INTEGER         reduce using rule 99 (ASSIGNMENT_OPERATOR -> AND_EQUAL .)
    DECIMAL         reduce using rule 99 (ASSIGNMENT_OPERATOR -> AND_EQUAL .)


state 62

    (100) ASSIGNMENT_OPERATOR -> OR_EQUAL .

    $end            reduce using rule 100 (ASSIGNMENT_OPERATOR -> OR_EQUAL .)
    VARNAME         reduce using rule 100 (ASSIGNMENT_OPERATOR -> OR_EQUAL .)
    INTEGER         reduce using rule 100 (ASSIGNMENT_OPERATOR -> OR_EQUAL .)
    DECIMAL         reduce using rule 100 (ASSIGNMENT_OPERATOR -> OR_EQUAL .)


state 63

    (101) ASSIGNMENT_OPERATOR -> XOR_EQUAL .

    $end            reduce using rule 101 (ASSIGNMENT_OPERATOR -> XOR_EQUAL .)
    VARNAME         reduce using rule 101 (ASSIGNMENT_OPERATOR -> XOR_EQUAL .)
    INTEGER         reduce using rule 101 (ASSIGNMENT_OPERATOR -> XOR_EQUAL .)
    DECIMAL         reduce using rule 101 (ASSIGNMENT_OPERATOR -> XOR_EQUAL .)


state 64

    (102) ASSIGNMENT_OPERATOR -> COMPLEMENT_EQUAL .

    $end            reduce using rule 102 (ASSIGNMENT_OPERATOR -> COMPLEMENT_EQUAL .)
    VARNAME         reduce using rule 102 (ASSIGNMENT_OPERATOR -> COMPLEMENT_EQUAL .)
    INTEGER         reduce using rule 102 (ASSIGNMENT_OPERATOR -> COMPLEMENT_EQUAL .)
    DECIMAL         reduce using rule 102 (ASSIGNMENT_OPERATOR -> COMPLEMENT_EQUAL .)


state 65

    (103) ASSIGNMENT_OPERATOR -> SHIFTL_EQUAL .

    $end            reduce using rule 103 (ASSIGNMENT_OPERATOR -> SHIFTL_EQUAL .)
    VARNAME         reduce using rule 103 (ASSIGNMENT_OPERATOR -> SHIFTL_EQUAL .)
    INTEGER         reduce using rule 103 (ASSIGNMENT_OPERATOR -> SHIFTL_EQUAL .)
    DECIMAL         reduce using rule 103 (ASSIGNMENT_OPERATOR -> SHIFTL_EQUAL .)


state 66

    (104) ASSIGNMENT_OPERATOR -> SHIFTR_EQUAL .

    $end            reduce using rule 104 (ASSIGNMENT_OPERATOR -> SHIFTR_EQUAL .)
    VARNAME         reduce using rule 104 (ASSIGNMENT_OPERATOR -> SHIFTR_EQUAL .)
    INTEGER         reduce using rule 104 (ASSIGNMENT_OPERATOR -> SHIFTR_EQUAL .)
    DECIMAL         reduce using rule 104 (ASSIGNMENT_OPERATOR -> SHIFTR_EQUAL .)


state 67

    (105) COMENTARIOLEX -> COMMENT .

    $end            reduce using rule 105 (COMENTARIOLEX -> COMMENT .)
    SEMICOLON       reduce using rule 105 (COMENTARIOLEX -> COMMENT .)


state 68

    (107) OPERATOR -> PLUS .

    $end            reduce using rule 107 (OPERATOR -> PLUS .)
    INTEGER         reduce using rule 107 (OPERATOR -> PLUS .)
    DECIMAL         reduce using rule 107 (OPERATOR -> PLUS .)


state 69

    (108) OPERATOR -> MINUS .

    $end            reduce using rule 108 (OPERATOR -> MINUS .)
    INTEGER         reduce using rule 108 (OPERATOR -> MINUS .)
    DECIMAL         reduce using rule 108 (OPERATOR -> MINUS .)


state 70

    (109) OPERATOR -> TIMES .

    $end            reduce using rule 109 (OPERATOR -> TIMES .)
    INTEGER         reduce using rule 109 (OPERATOR -> TIMES .)
    DECIMAL         reduce using rule 109 (OPERATOR -> TIMES .)


state 71

    (110) OPERATOR -> MODULUS .

    $end            reduce using rule 110 (OPERATOR -> MODULUS .)
    INTEGER         reduce using rule 110 (OPERATOR -> MODULUS .)
    DECIMAL         reduce using rule 110 (OPERATOR -> MODULUS .)


state 72

    (111) OPERATOR -> DIVIDE .

    $end            reduce using rule 111 (OPERATOR -> DIVIDE .)
    INTEGER         reduce using rule 111 (OPERATOR -> DIVIDE .)
    DECIMAL         reduce using rule 111 (OPERATOR -> DIVIDE .)


state 73

    (115) COMPARISON_OPERATOR -> EQUAL_TO .

    $end            reduce using rule 115 (COMPARISON_OPERATOR -> EQUAL_TO .)
    STRING          reduce using rule 115 (COMPARISON_OPERATOR -> EQUAL_TO .)
    INTEGER         reduce using rule 115 (COMPARISON_OPERATOR -> EQUAL_TO .)
    DECIMAL         reduce using rule 115 (COMPARISON_OPERATOR -> EQUAL_TO .)
    VARNAME         reduce using rule 115 (COMPARISON_OPERATOR -> EQUAL_TO .)


state 74

    (116) COMPARISON_OPERATOR -> NOT_EQUAL .

    $end            reduce using rule 116 (COMPARISON_OPERATOR -> NOT_EQUAL .)
    STRING          reduce using rule 116 (COMPARISON_OPERATOR -> NOT_EQUAL .)
    INTEGER         reduce using rule 116 (COMPARISON_OPERATOR -> NOT_EQUAL .)
    DECIMAL         reduce using rule 116 (COMPARISON_OPERATOR -> NOT_EQUAL .)
    VARNAME         reduce using rule 116 (COMPARISON_OPERATOR -> NOT_EQUAL .)


state 75

    (117) COMPARISON_OPERATOR -> GREATER_THAN .

    $end            reduce using rule 117 (COMPARISON_OPERATOR -> GREATER_THAN .)
    STRING          reduce using rule 117 (COMPARISON_OPERATOR -> GREATER_THAN .)
    INTEGER         reduce using rule 117 (COMPARISON_OPERATOR -> GREATER_THAN .)
    DECIMAL         reduce using rule 117 (COMPARISON_OPERATOR -> GREATER_THAN .)
    VARNAME         reduce using rule 117 (COMPARISON_OPERATOR -> GREATER_THAN .)


state 76

    (118) COMPARISON_OPERATOR -> LESS_THAN .

    $end            reduce using rule 118 (COMPARISON_OPERATOR -> LESS_THAN .)
    STRING          reduce using rule 118 (COMPARISON_OPERATOR -> LESS_THAN .)
    INTEGER         reduce using rule 118 (COMPARISON_OPERATOR -> LESS_THAN .)
    DECIMAL         reduce using rule 118 (COMPARISON_OPERATOR -> LESS_THAN .)
    VARNAME         reduce using rule 118 (COMPARISON_OPERATOR -> LESS_THAN .)


state 77

    (119) COMPARISON_OPERATOR -> GREATER_EQUAL .

    $end            reduce using rule 119 (COMPARISON_OPERATOR -> GREATER_EQUAL .)
    STRING          reduce using rule 119 (COMPARISON_OPERATOR -> GREATER_EQUAL .)
    INTEGER         reduce using rule 119 (COMPARISON_OPERATOR -> GREATER_EQUAL .)
    DECIMAL         reduce using rule 119 (COMPARISON_OPERATOR -> GREATER_EQUAL .)
    VARNAME         reduce using rule 119 (COMPARISON_OPERATOR -> GREATER_EQUAL .)


state 78

    (120) COMPARISON_OPERATOR -> LESS_EQUAL .

    $end            reduce using rule 120 (COMPARISON_OPERATOR -> LESS_EQUAL .)
    STRING          reduce using rule 120 (COMPARISON_OPERATOR -> LESS_EQUAL .)
    INTEGER         reduce using rule 120 (COMPARISON_OPERATOR -> LESS_EQUAL .)
    DECIMAL         reduce using rule 120 (COMPARISON_OPERATOR -> LESS_EQUAL .)
    VARNAME         reduce using rule 120 (COMPARISON_OPERATOR -> LESS_EQUAL .)


state 79

    (125) LOGICAL_OPERATOR -> AND .

    $end            reduce using rule 125 (LOGICAL_OPERATOR -> AND .)
    STRING          reduce using rule 125 (LOGICAL_OPERATOR -> AND .)
    VARNAME         reduce using rule 125 (LOGICAL_OPERATOR -> AND .)
    INTEGER         reduce using rule 125 (LOGICAL_OPERATOR -> AND .)
    DECIMAL         reduce using rule 125 (LOGICAL_OPERATOR -> AND .)


state 80

    (126) LOGICAL_OPERATOR -> OR .

    $end            reduce using rule 126 (LOGICAL_OPERATOR -> OR .)
    STRING          reduce using rule 126 (LOGICAL_OPERATOR -> OR .)
    VARNAME         reduce using rule 126 (LOGICAL_OPERATOR -> OR .)
    INTEGER         reduce using rule 126 (LOGICAL_OPERATOR -> OR .)
    DECIMAL         reduce using rule 126 (LOGICAL_OPERATOR -> OR .)


state 81

    (127) LOGICAL_OPERATOR -> NOT .

    $end            reduce using rule 127 (LOGICAL_OPERATOR -> NOT .)
    STRING          reduce using rule 127 (LOGICAL_OPERATOR -> NOT .)
    VARNAME         reduce using rule 127 (LOGICAL_OPERATOR -> NOT .)
    INTEGER         reduce using rule 127 (LOGICAL_OPERATOR -> NOT .)
    DECIMAL         reduce using rule 127 (LOGICAL_OPERATOR -> NOT .)


state 82

    (56) SWITCH_BODY -> SWITCH_CASE .
    (58) SWITCH_BODY -> SWITCH_CASE . SWITCH_BODY
    (56) SWITCH_BODY -> . SWITCH_CASE
    (57) SWITCH_BODY -> . SWITCH_DEFAULT
    (58) SWITCH_BODY -> . SWITCH_CASE SWITCH_BODY
    (54) SWITCH_CASE -> . CASE INTEGER COLON EXPRESSIONS BREAK SEMICOLON
    (55) SWITCH_DEFAULT -> . DEFAULT COLON EXPRESSIONS BREAK SEMICOLON

    $end            reduce using rule 56 (SWITCH_BODY -> SWITCH_CASE .)
    RCURL_BRACE     reduce using rule 56 (SWITCH_BODY -> SWITCH_CASE .)
    CASE            shift and go to state 89
    DEFAULT         shift and go to state 90

    SWITCH_CASE                    shift and go to state 82
    SWITCH_BODY                    shift and go to state 129
    SWITCH_DEFAULT                 shift and go to state 83

state 83

    (57) SWITCH_BODY -> SWITCH_DEFAULT .

    $end            reduce using rule 57 (SWITCH_BODY -> SWITCH_DEFAULT .)
    RCURL_BRACE     reduce using rule 57 (SWITCH_BODY -> SWITCH_DEFAULT .)


state 84

    (61) BUCLE -> DECREASE . VARIABLELEX
    (106) VARIABLELEX -> . VARNAME

    VARNAME         shift and go to state 118

    VARIABLELEX                    shift and go to state 130

state 85

    (69) ELSE_STRUCTURE -> ELSE . LCURL_BRACE EXPRESSIONS RCURL_BRACE
    (70) ELSE_STRUCTURE -> ELSE . IF_STRUCTURE
    (67) IF_STRUCTURE -> . IF LPAREN COMPARISONS RPAREN LCURL_BRACE EXPRESSIONS RCURL_BRACE
    (68) IF_STRUCTURE -> . IF LPAREN COMPARISONS RPAREN LCURL_BRACE EXPRESSIONS RCURL_BRACE ELSE_STRUCTURE

    LCURL_BRACE     shift and go to state 131
    IF              shift and go to state 47

    IF_STRUCTURE                   shift and go to state 132

state 86

    (83) FUNCTION_ARGUMENTS -> SENTENCES .

    $end            reduce using rule 83 (FUNCTION_ARGUMENTS -> SENTENCES .)
    RPAREN          reduce using rule 83 (FUNCTION_ARGUMENTS -> SENTENCES .)


state 87

    (65) FOR_BODY_STRUCTURE -> BREAK . SEMICOLON

    SEMICOLON       shift and go to state 133


state 88

    (66) FOR_BODY_STRUCTURE -> CONTINUE . SEMICOLON

    SEMICOLON       shift and go to state 134


state 89

    (54) SWITCH_CASE -> CASE . INTEGER COLON EXPRESSIONS BREAK SEMICOLON

    INTEGER         shift and go to state 135


state 90

    (55) SWITCH_DEFAULT -> DEFAULT . COLON EXPRESSIONS BREAK SEMICOLON

    COLON           shift and go to state 136


state 91

    (121) COMPARISON -> VALUE COMPARISON_OPERATOR . VALUE
    (42) VALUE -> . NUMBER
    (43) VALUE -> . STRING
    (44) NUMBER -> . INTEGER
    (45) NUMBER -> . DECIMAL

    STRING          shift and go to state 41
    INTEGER         shift and go to state 42
    DECIMAL         shift and go to state 43

    VALUE                          shift and go to state 137
    NUMBER                         shift and go to state 138

state 92

    (112) OPERATION -> NUMBER OPERATOR . NUMBER
    (44) NUMBER -> . INTEGER
    (45) NUMBER -> . DECIMAL

    INTEGER         shift and go to state 42
    DECIMAL         shift and go to state 43

    NUMBER                         shift and go to state 139

state 93

    (78) EXPRESSION -> CODE SEMICOLON .

    VARNAME         reduce using rule 78 (EXPRESSION -> CODE SEMICOLON .)
    COMMENT         reduce using rule 78 (EXPRESSION -> CODE SEMICOLON .)
    IF              reduce using rule 78 (EXPRESSION -> CODE SEMICOLON .)
    FOR             reduce using rule 78 (EXPRESSION -> CODE SEMICOLON .)
    WHILE           reduce using rule 78 (EXPRESSION -> CODE SEMICOLON .)
    SWITCH          reduce using rule 78 (EXPRESSION -> CODE SEMICOLON .)
    INT             reduce using rule 78 (EXPRESSION -> CODE SEMICOLON .)
    SHORT           reduce using rule 78 (EXPRESSION -> CODE SEMICOLON .)
    LONG            reduce using rule 78 (EXPRESSION -> CODE SEMICOLON .)
    FLOAT           reduce using rule 78 (EXPRESSION -> CODE SEMICOLON .)
    DOUBLE          reduce using rule 78 (EXPRESSION -> CODE SEMICOLON .)
    $end            reduce using rule 78 (EXPRESSION -> CODE SEMICOLON .)
    RCURL_BRACE     reduce using rule 78 (EXPRESSION -> CODE SEMICOLON .)
    BREAK           reduce using rule 78 (EXPRESSION -> CODE SEMICOLON .)
    CONTINUE        reduce using rule 78 (EXPRESSION -> CODE SEMICOLON .)


state 94

    (80) EXPRESSIONS -> EXPRESSION .
    (81) EXPRESSIONS -> EXPRESSION . EXPRESSIONS
    (80) EXPRESSIONS -> . EXPRESSION
    (81) EXPRESSIONS -> . EXPRESSION EXPRESSIONS
    (78) EXPRESSION -> . CODE SEMICOLON
    (79) EXPRESSION -> . CONTROL_STRUCTURES
    (73) CODE -> . FUNCTION
    (74) CODE -> . INTEGER_DECLARATION
    (75) CODE -> . DECIMAL_DECLARATION
    (76) CODE -> . ASSIGNMENT_DECLARATION
    (77) CODE -> . COMENTARIOLEX
    (46) CONTROL_STRUCTURES -> . IF_STRUCTURE
    (47) CONTROL_STRUCTURES -> . FOR_STRUCTURE
    (48) CONTROL_STRUCTURES -> . WHILE_STRUCTURE
    (49) CONTROL_STRUCTURES -> . SWITCH_STRUCTURE
    (82) FUNCTION -> . VARNAME LPAREN FUNCTION_ARGUMENTS RPAREN
    (90) INTEGER_DECLARATION -> . INTEGER_TYPE VARNAME EQUAL INTEGER
    (91) DECIMAL_DECLARATION -> . DECIMAL_TYPE VARNAME EQUAL DECIMAL
    (92) ASSIGNMENT_DECLARATION -> . VARNAME ASSIGNMENT_OPERATOR SENTENCE
    (105) COMENTARIOLEX -> . COMMENT
    (67) IF_STRUCTURE -> . IF LPAREN COMPARISONS RPAREN LCURL_BRACE EXPRESSIONS RCURL_BRACE
    (68) IF_STRUCTURE -> . IF LPAREN COMPARISONS RPAREN LCURL_BRACE EXPRESSIONS RCURL_BRACE ELSE_STRUCTURE
    (62) FOR_STRUCTURE -> . FOR FOR_ARGUMENTS_STRUCTURE LCURL_BRACE FOR_BODY_STRUCTURE RCURL_BRACE
    (53) WHILE_STRUCTURE -> . WHILE LPAREN COMPARISONS RPAREN LCURL_BRACE BODY_STRUCTURE RCURL_BRACE
    (59) SWITCH_STRUCTURE -> . SWITCH LPAREN COMPARISONS RPAREN LCURL_BRACE SWITCH_BODY RCURL_BRACE
    (85) INTEGER_TYPE -> . INT
    (86) INTEGER_TYPE -> . SHORT
    (87) INTEGER_TYPE -> . LONG
    (88) DECIMAL_TYPE -> . FLOAT
    (89) DECIMAL_TYPE -> . DOUBLE

    $end            reduce using rule 80 (EXPRESSIONS -> EXPRESSION .)
    RCURL_BRACE     reduce using rule 80 (EXPRESSIONS -> EXPRESSION .)
    BREAK           reduce using rule 80 (EXPRESSIONS -> EXPRESSION .)
    CONTINUE        reduce using rule 80 (EXPRESSIONS -> EXPRESSION .)
    VARNAME         shift and go to state 107
    COMMENT         shift and go to state 67
    IF              shift and go to state 47
    FOR             shift and go to state 48
    WHILE           shift and go to state 44
    SWITCH          shift and go to state 46
    INT             shift and go to state 50
    SHORT           shift and go to state 51
    LONG            shift and go to state 52
    FLOAT           shift and go to state 53
    DOUBLE          shift and go to state 54

    EXPRESSION                     shift and go to state 94
    EXPRESSIONS                    shift and go to state 95
    CODE                           shift and go to state 96
    CONTROL_STRUCTURES             shift and go to state 97
    FUNCTION                       shift and go to state 98
    INTEGER_DECLARATION            shift and go to state 99
    DECIMAL_DECLARATION            shift and go to state 100
    ASSIGNMENT_DECLARATION         shift and go to state 101
    COMENTARIOLEX                  shift and go to state 102
    IF_STRUCTURE                   shift and go to state 103
    FOR_STRUCTURE                  shift and go to state 104
    WHILE_STRUCTURE                shift and go to state 105
    SWITCH_STRUCTURE               shift and go to state 106
    INTEGER_TYPE                   shift and go to state 108
    DECIMAL_TYPE                   shift and go to state 109

state 95

    (81) EXPRESSIONS -> EXPRESSION EXPRESSIONS .

    $end            reduce using rule 81 (EXPRESSIONS -> EXPRESSION EXPRESSIONS .)
    RCURL_BRACE     reduce using rule 81 (EXPRESSIONS -> EXPRESSION EXPRESSIONS .)
    BREAK           reduce using rule 81 (EXPRESSIONS -> EXPRESSION EXPRESSIONS .)
    CONTINUE        reduce using rule 81 (EXPRESSIONS -> EXPRESSION EXPRESSIONS .)


state 96

    (78) EXPRESSION -> CODE . SEMICOLON

    SEMICOLON       shift and go to state 93


state 97

    (79) EXPRESSION -> CONTROL_STRUCTURES .

    VARNAME         reduce using rule 79 (EXPRESSION -> CONTROL_STRUCTURES .)
    COMMENT         reduce using rule 79 (EXPRESSION -> CONTROL_STRUCTURES .)
    IF              reduce using rule 79 (EXPRESSION -> CONTROL_STRUCTURES .)
    FOR             reduce using rule 79 (EXPRESSION -> CONTROL_STRUCTURES .)
    WHILE           reduce using rule 79 (EXPRESSION -> CONTROL_STRUCTURES .)
    SWITCH          reduce using rule 79 (EXPRESSION -> CONTROL_STRUCTURES .)
    INT             reduce using rule 79 (EXPRESSION -> CONTROL_STRUCTURES .)
    SHORT           reduce using rule 79 (EXPRESSION -> CONTROL_STRUCTURES .)
    LONG            reduce using rule 79 (EXPRESSION -> CONTROL_STRUCTURES .)
    FLOAT           reduce using rule 79 (EXPRESSION -> CONTROL_STRUCTURES .)
    DOUBLE          reduce using rule 79 (EXPRESSION -> CONTROL_STRUCTURES .)
    $end            reduce using rule 79 (EXPRESSION -> CONTROL_STRUCTURES .)
    RCURL_BRACE     reduce using rule 79 (EXPRESSION -> CONTROL_STRUCTURES .)
    BREAK           reduce using rule 79 (EXPRESSION -> CONTROL_STRUCTURES .)
    CONTINUE        reduce using rule 79 (EXPRESSION -> CONTROL_STRUCTURES .)


state 98

    (73) CODE -> FUNCTION .

    SEMICOLON       reduce using rule 73 (CODE -> FUNCTION .)


state 99

    (74) CODE -> INTEGER_DECLARATION .

    SEMICOLON       reduce using rule 74 (CODE -> INTEGER_DECLARATION .)


state 100

    (75) CODE -> DECIMAL_DECLARATION .

    SEMICOLON       reduce using rule 75 (CODE -> DECIMAL_DECLARATION .)


state 101

    (76) CODE -> ASSIGNMENT_DECLARATION .

    SEMICOLON       reduce using rule 76 (CODE -> ASSIGNMENT_DECLARATION .)


state 102

    (77) CODE -> COMENTARIOLEX .

    SEMICOLON       reduce using rule 77 (CODE -> COMENTARIOLEX .)


state 103

    (46) CONTROL_STRUCTURES -> IF_STRUCTURE .

    VARNAME         reduce using rule 46 (CONTROL_STRUCTURES -> IF_STRUCTURE .)
    COMMENT         reduce using rule 46 (CONTROL_STRUCTURES -> IF_STRUCTURE .)
    IF              reduce using rule 46 (CONTROL_STRUCTURES -> IF_STRUCTURE .)
    FOR             reduce using rule 46 (CONTROL_STRUCTURES -> IF_STRUCTURE .)
    WHILE           reduce using rule 46 (CONTROL_STRUCTURES -> IF_STRUCTURE .)
    SWITCH          reduce using rule 46 (CONTROL_STRUCTURES -> IF_STRUCTURE .)
    INT             reduce using rule 46 (CONTROL_STRUCTURES -> IF_STRUCTURE .)
    SHORT           reduce using rule 46 (CONTROL_STRUCTURES -> IF_STRUCTURE .)
    LONG            reduce using rule 46 (CONTROL_STRUCTURES -> IF_STRUCTURE .)
    FLOAT           reduce using rule 46 (CONTROL_STRUCTURES -> IF_STRUCTURE .)
    DOUBLE          reduce using rule 46 (CONTROL_STRUCTURES -> IF_STRUCTURE .)
    $end            reduce using rule 46 (CONTROL_STRUCTURES -> IF_STRUCTURE .)
    RCURL_BRACE     reduce using rule 46 (CONTROL_STRUCTURES -> IF_STRUCTURE .)
    BREAK           reduce using rule 46 (CONTROL_STRUCTURES -> IF_STRUCTURE .)
    CONTINUE        reduce using rule 46 (CONTROL_STRUCTURES -> IF_STRUCTURE .)


state 104

    (47) CONTROL_STRUCTURES -> FOR_STRUCTURE .

    VARNAME         reduce using rule 47 (CONTROL_STRUCTURES -> FOR_STRUCTURE .)
    COMMENT         reduce using rule 47 (CONTROL_STRUCTURES -> FOR_STRUCTURE .)
    IF              reduce using rule 47 (CONTROL_STRUCTURES -> FOR_STRUCTURE .)
    FOR             reduce using rule 47 (CONTROL_STRUCTURES -> FOR_STRUCTURE .)
    WHILE           reduce using rule 47 (CONTROL_STRUCTURES -> FOR_STRUCTURE .)
    SWITCH          reduce using rule 47 (CONTROL_STRUCTURES -> FOR_STRUCTURE .)
    INT             reduce using rule 47 (CONTROL_STRUCTURES -> FOR_STRUCTURE .)
    SHORT           reduce using rule 47 (CONTROL_STRUCTURES -> FOR_STRUCTURE .)
    LONG            reduce using rule 47 (CONTROL_STRUCTURES -> FOR_STRUCTURE .)
    FLOAT           reduce using rule 47 (CONTROL_STRUCTURES -> FOR_STRUCTURE .)
    DOUBLE          reduce using rule 47 (CONTROL_STRUCTURES -> FOR_STRUCTURE .)
    $end            reduce using rule 47 (CONTROL_STRUCTURES -> FOR_STRUCTURE .)
    RCURL_BRACE     reduce using rule 47 (CONTROL_STRUCTURES -> FOR_STRUCTURE .)
    BREAK           reduce using rule 47 (CONTROL_STRUCTURES -> FOR_STRUCTURE .)
    CONTINUE        reduce using rule 47 (CONTROL_STRUCTURES -> FOR_STRUCTURE .)


state 105

    (48) CONTROL_STRUCTURES -> WHILE_STRUCTURE .

    VARNAME         reduce using rule 48 (CONTROL_STRUCTURES -> WHILE_STRUCTURE .)
    COMMENT         reduce using rule 48 (CONTROL_STRUCTURES -> WHILE_STRUCTURE .)
    IF              reduce using rule 48 (CONTROL_STRUCTURES -> WHILE_STRUCTURE .)
    FOR             reduce using rule 48 (CONTROL_STRUCTURES -> WHILE_STRUCTURE .)
    WHILE           reduce using rule 48 (CONTROL_STRUCTURES -> WHILE_STRUCTURE .)
    SWITCH          reduce using rule 48 (CONTROL_STRUCTURES -> WHILE_STRUCTURE .)
    INT             reduce using rule 48 (CONTROL_STRUCTURES -> WHILE_STRUCTURE .)
    SHORT           reduce using rule 48 (CONTROL_STRUCTURES -> WHILE_STRUCTURE .)
    LONG            reduce using rule 48 (CONTROL_STRUCTURES -> WHILE_STRUCTURE .)
    FLOAT           reduce using rule 48 (CONTROL_STRUCTURES -> WHILE_STRUCTURE .)
    DOUBLE          reduce using rule 48 (CONTROL_STRUCTURES -> WHILE_STRUCTURE .)
    $end            reduce using rule 48 (CONTROL_STRUCTURES -> WHILE_STRUCTURE .)
    RCURL_BRACE     reduce using rule 48 (CONTROL_STRUCTURES -> WHILE_STRUCTURE .)
    BREAK           reduce using rule 48 (CONTROL_STRUCTURES -> WHILE_STRUCTURE .)
    CONTINUE        reduce using rule 48 (CONTROL_STRUCTURES -> WHILE_STRUCTURE .)


state 106

    (49) CONTROL_STRUCTURES -> SWITCH_STRUCTURE .

    VARNAME         reduce using rule 49 (CONTROL_STRUCTURES -> SWITCH_STRUCTURE .)
    COMMENT         reduce using rule 49 (CONTROL_STRUCTURES -> SWITCH_STRUCTURE .)
    IF              reduce using rule 49 (CONTROL_STRUCTURES -> SWITCH_STRUCTURE .)
    FOR             reduce using rule 49 (CONTROL_STRUCTURES -> SWITCH_STRUCTURE .)
    WHILE           reduce using rule 49 (CONTROL_STRUCTURES -> SWITCH_STRUCTURE .)
    SWITCH          reduce using rule 49 (CONTROL_STRUCTURES -> SWITCH_STRUCTURE .)
    INT             reduce using rule 49 (CONTROL_STRUCTURES -> SWITCH_STRUCTURE .)
    SHORT           reduce using rule 49 (CONTROL_STRUCTURES -> SWITCH_STRUCTURE .)
    LONG            reduce using rule 49 (CONTROL_STRUCTURES -> SWITCH_STRUCTURE .)
    FLOAT           reduce using rule 49 (CONTROL_STRUCTURES -> SWITCH_STRUCTURE .)
    DOUBLE          reduce using rule 49 (CONTROL_STRUCTURES -> SWITCH_STRUCTURE .)
    $end            reduce using rule 49 (CONTROL_STRUCTURES -> SWITCH_STRUCTURE .)
    RCURL_BRACE     reduce using rule 49 (CONTROL_STRUCTURES -> SWITCH_STRUCTURE .)
    BREAK           reduce using rule 49 (CONTROL_STRUCTURES -> SWITCH_STRUCTURE .)
    CONTINUE        reduce using rule 49 (CONTROL_STRUCTURES -> SWITCH_STRUCTURE .)


state 107

    (82) FUNCTION -> VARNAME . LPAREN FUNCTION_ARGUMENTS RPAREN
    (92) ASSIGNMENT_DECLARATION -> VARNAME . ASSIGNMENT_OPERATOR SENTENCE
    (93) ASSIGNMENT_OPERATOR -> . EQUAL
    (94) ASSIGNMENT_OPERATOR -> . PLUS_EQUAL
    (95) ASSIGNMENT_OPERATOR -> . MINUS_EQUAL
    (96) ASSIGNMENT_OPERATOR -> . DIV_EQUAL
    (97) ASSIGNMENT_OPERATOR -> . TIMES_EQUAL
    (98) ASSIGNMENT_OPERATOR -> . MOD_EQUAL
    (99) ASSIGNMENT_OPERATOR -> . AND_EQUAL
    (100) ASSIGNMENT_OPERATOR -> . OR_EQUAL
    (101) ASSIGNMENT_OPERATOR -> . XOR_EQUAL
    (102) ASSIGNMENT_OPERATOR -> . COMPLEMENT_EQUAL
    (103) ASSIGNMENT_OPERATOR -> . SHIFTL_EQUAL
    (104) ASSIGNMENT_OPERATOR -> . SHIFTR_EQUAL

    LPAREN          shift and go to state 127
    EQUAL           shift and go to state 55
    PLUS_EQUAL      shift and go to state 56
    MINUS_EQUAL     shift and go to state 57
    DIV_EQUAL       shift and go to state 58
    TIMES_EQUAL     shift and go to state 59
    MOD_EQUAL       shift and go to state 60
    AND_EQUAL       shift and go to state 61
    OR_EQUAL        shift and go to state 62
    XOR_EQUAL       shift and go to state 63
    COMPLEMENT_EQUAL shift and go to state 64
    SHIFTL_EQUAL    shift and go to state 65
    SHIFTR_EQUAL    shift and go to state 66

    ASSIGNMENT_OPERATOR            shift and go to state 128

state 108

    (90) INTEGER_DECLARATION -> INTEGER_TYPE . VARNAME EQUAL INTEGER

    VARNAME         shift and go to state 110


state 109

    (91) DECIMAL_DECLARATION -> DECIMAL_TYPE . VARNAME EQUAL DECIMAL

    VARNAME         shift and go to state 111


state 110

    (90) INTEGER_DECLARATION -> INTEGER_TYPE VARNAME . EQUAL INTEGER

    EQUAL           shift and go to state 140


state 111

    (91) DECIMAL_DECLARATION -> DECIMAL_TYPE VARNAME . EQUAL DECIMAL

    EQUAL           shift and go to state 141


state 112

    (60) BUCLE -> VARIABLELEX INCREASE .

    $end            reduce using rule 60 (BUCLE -> VARIABLELEX INCREASE .)
    RPAREN          reduce using rule 60 (BUCLE -> VARIABLELEX INCREASE .)


state 113

    (114) OPERATIONS -> OPERATION OPERATOR . OPERATIONS
    (113) OPERATIONS -> . OPERATION
    (114) OPERATIONS -> . OPERATION OPERATOR OPERATIONS
    (112) OPERATION -> . NUMBER OPERATOR NUMBER
    (44) NUMBER -> . INTEGER
    (45) NUMBER -> . DECIMAL

    INTEGER         shift and go to state 42
    DECIMAL         shift and go to state 43

    OPERATION                      shift and go to state 142
    OPERATIONS                     shift and go to state 143
    NUMBER                         shift and go to state 144

state 114

    (124) COMPARISONS -> COMPARISON LOGICAL_OPERATOR . COMPARISONS
    (123) COMPARISONS -> . COMPARISON
    (124) COMPARISONS -> . COMPARISON LOGICAL_OPERATOR COMPARISONS
    (121) COMPARISON -> . VALUE COMPARISON_OPERATOR VALUE
    (122) COMPARISON -> . SENTENCE COMPARISON_OPERATOR SENTENCE
    (42) VALUE -> . NUMBER
    (43) VALUE -> . STRING
    (128) SENTENCE -> . NUMBER
    (129) SENTENCE -> . VARNAME
    (44) NUMBER -> . INTEGER
    (45) NUMBER -> . DECIMAL

    STRING          shift and go to state 41
    VARNAME         shift and go to state 150
    INTEGER         shift and go to state 42
    DECIMAL         shift and go to state 43

    COMPARISON                     shift and go to state 145
    COMPARISONS                    shift and go to state 146
    VALUE                          shift and go to state 147
    SENTENCE                       shift and go to state 148
    NUMBER                         shift and go to state 149

state 115

    (122) COMPARISON -> SENTENCE COMPARISON_OPERATOR . SENTENCE
    (128) SENTENCE -> . NUMBER
    (129) SENTENCE -> . VARNAME
    (44) NUMBER -> . INTEGER
    (45) NUMBER -> . DECIMAL

    VARNAME         shift and go to state 150
    INTEGER         shift and go to state 42
    DECIMAL         shift and go to state 43

    SENTENCE                       shift and go to state 151
    NUMBER                         shift and go to state 152

state 116

    (131) SENTENCES -> SENTENCE COMMA . SENTENCES
    (130) SENTENCES -> . SENTENCE
    (131) SENTENCES -> . SENTENCE COMMA SENTENCES
    (128) SENTENCE -> . NUMBER
    (129) SENTENCE -> . VARNAME
    (44) NUMBER -> . INTEGER
    (45) NUMBER -> . DECIMAL

    VARNAME         shift and go to state 150
    INTEGER         shift and go to state 42
    DECIMAL         shift and go to state 43

    SENTENCE                       shift and go to state 153
    SENTENCES                      shift and go to state 154
    NUMBER                         shift and go to state 152

state 117

    (40) DEFINE -> PP_DEFINE VARIABLELEX . VALUE
    (42) VALUE -> . NUMBER
    (43) VALUE -> . STRING
    (44) NUMBER -> . INTEGER
    (45) NUMBER -> . DECIMAL

    STRING          shift and go to state 41
    INTEGER         shift and go to state 42
    DECIMAL         shift and go to state 43

    VALUE                          shift and go to state 155
    NUMBER                         shift and go to state 138

state 118

    (106) VARIABLELEX -> VARNAME .

    STRING          reduce using rule 106 (VARIABLELEX -> VARNAME .)
    INTEGER         reduce using rule 106 (VARIABLELEX -> VARNAME .)
    DECIMAL         reduce using rule 106 (VARIABLELEX -> VARNAME .)
    $end            reduce using rule 106 (VARIABLELEX -> VARNAME .)
    RPAREN          reduce using rule 106 (VARIABLELEX -> VARNAME .)
    INCREASE        reduce using rule 106 (VARIABLELEX -> VARNAME .)


state 119

    (41) INCLUDE -> PP_INCLUDE HEADER_LIB .

    $end            reduce using rule 41 (INCLUDE -> PP_INCLUDE HEADER_LIB .)


state 120

    (53) WHILE_STRUCTURE -> WHILE LPAREN . COMPARISONS RPAREN LCURL_BRACE BODY_STRUCTURE RCURL_BRACE
    (123) COMPARISONS -> . COMPARISON
    (124) COMPARISONS -> . COMPARISON LOGICAL_OPERATOR COMPARISONS
    (121) COMPARISON -> . VALUE COMPARISON_OPERATOR VALUE
    (122) COMPARISON -> . SENTENCE COMPARISON_OPERATOR SENTENCE
    (42) VALUE -> . NUMBER
    (43) VALUE -> . STRING
    (128) SENTENCE -> . NUMBER
    (129) SENTENCE -> . VARNAME
    (44) NUMBER -> . INTEGER
    (45) NUMBER -> . DECIMAL

    STRING          shift and go to state 41
    VARNAME         shift and go to state 150
    INTEGER         shift and go to state 42
    DECIMAL         shift and go to state 43

    COMPARISONS                    shift and go to state 156
    COMPARISON                     shift and go to state 145
    VALUE                          shift and go to state 147
    SENTENCE                       shift and go to state 148
    NUMBER                         shift and go to state 149

state 121

    (63) FOR_ARGUMENTS_STRUCTURE -> LPAREN DECLARATIONS . SEMICOLON COMPARISONS SEMICOLON BUCLE RPAREN

    SEMICOLON       shift and go to state 157


state 122

    (71) DECLARATIONS -> INTEGER_DECLARATION .

    SEMICOLON       reduce using rule 71 (DECLARATIONS -> INTEGER_DECLARATION .)


state 123

    (72) DECLARATIONS -> DECIMAL_DECLARATION .

    SEMICOLON       reduce using rule 72 (DECLARATIONS -> DECIMAL_DECLARATION .)


state 124

    (59) SWITCH_STRUCTURE -> SWITCH LPAREN . COMPARISONS RPAREN LCURL_BRACE SWITCH_BODY RCURL_BRACE
    (123) COMPARISONS -> . COMPARISON
    (124) COMPARISONS -> . COMPARISON LOGICAL_OPERATOR COMPARISONS
    (121) COMPARISON -> . VALUE COMPARISON_OPERATOR VALUE
    (122) COMPARISON -> . SENTENCE COMPARISON_OPERATOR SENTENCE
    (42) VALUE -> . NUMBER
    (43) VALUE -> . STRING
    (128) SENTENCE -> . NUMBER
    (129) SENTENCE -> . VARNAME
    (44) NUMBER -> . INTEGER
    (45) NUMBER -> . DECIMAL

    STRING          shift and go to state 41
    VARNAME         shift and go to state 150
    INTEGER         shift and go to state 42
    DECIMAL         shift and go to state 43

    COMPARISONS                    shift and go to state 158
    COMPARISON                     shift and go to state 145
    VALUE                          shift and go to state 147
    SENTENCE                       shift and go to state 148
    NUMBER                         shift and go to state 149

state 125

    (67) IF_STRUCTURE -> IF LPAREN . COMPARISONS RPAREN LCURL_BRACE EXPRESSIONS RCURL_BRACE
    (68) IF_STRUCTURE -> IF LPAREN . COMPARISONS RPAREN LCURL_BRACE EXPRESSIONS RCURL_BRACE ELSE_STRUCTURE
    (123) COMPARISONS -> . COMPARISON
    (124) COMPARISONS -> . COMPARISON LOGICAL_OPERATOR COMPARISONS
    (121) COMPARISON -> . VALUE COMPARISON_OPERATOR VALUE
    (122) COMPARISON -> . SENTENCE COMPARISON_OPERATOR SENTENCE
    (42) VALUE -> . NUMBER
    (43) VALUE -> . STRING
    (128) SENTENCE -> . NUMBER
    (129) SENTENCE -> . VARNAME
    (44) NUMBER -> . INTEGER
    (45) NUMBER -> . DECIMAL

    STRING          shift and go to state 41
    VARNAME         shift and go to state 150
    INTEGER         shift and go to state 42
    DECIMAL         shift and go to state 43

    COMPARISONS                    shift and go to state 159
    COMPARISON                     shift and go to state 145
    VALUE                          shift and go to state 147
    SENTENCE                       shift and go to state 148
    NUMBER                         shift and go to state 149

state 126

    (62) FOR_STRUCTURE -> FOR FOR_ARGUMENTS_STRUCTURE . LCURL_BRACE FOR_BODY_STRUCTURE RCURL_BRACE

    LCURL_BRACE     shift and go to state 160


state 127

    (82) FUNCTION -> VARNAME LPAREN . FUNCTION_ARGUMENTS RPAREN
    (83) FUNCTION_ARGUMENTS -> . SENTENCES
    (84) FUNCTION_ARGUMENTS -> . COMPARISONS
    (130) SENTENCES -> . SENTENCE
    (131) SENTENCES -> . SENTENCE COMMA SENTENCES
    (123) COMPARISONS -> . COMPARISON
    (124) COMPARISONS -> . COMPARISON LOGICAL_OPERATOR COMPARISONS
    (128) SENTENCE -> . NUMBER
    (129) SENTENCE -> . VARNAME
    (121) COMPARISON -> . VALUE COMPARISON_OPERATOR VALUE
    (122) COMPARISON -> . SENTENCE COMPARISON_OPERATOR SENTENCE
    (44) NUMBER -> . INTEGER
    (45) NUMBER -> . DECIMAL
    (42) VALUE -> . NUMBER
    (43) VALUE -> . STRING

    VARNAME         shift and go to state 150
    INTEGER         shift and go to state 42
    DECIMAL         shift and go to state 43
    STRING          shift and go to state 41

    FUNCTION_ARGUMENTS             shift and go to state 161
    SENTENCES                      shift and go to state 86
    COMPARISONS                    shift and go to state 162
    SENTENCE                       shift and go to state 163
    COMPARISON                     shift and go to state 145
    NUMBER                         shift and go to state 164
    VALUE                          shift and go to state 147

state 128

    (92) ASSIGNMENT_DECLARATION -> VARNAME ASSIGNMENT_OPERATOR . SENTENCE
    (128) SENTENCE -> . NUMBER
    (129) SENTENCE -> . VARNAME
    (44) NUMBER -> . INTEGER
    (45) NUMBER -> . DECIMAL

    VARNAME         shift and go to state 150
    INTEGER         shift and go to state 42
    DECIMAL         shift and go to state 43

    SENTENCE                       shift and go to state 165
    NUMBER                         shift and go to state 152

state 129

    (58) SWITCH_BODY -> SWITCH_CASE SWITCH_BODY .

    $end            reduce using rule 58 (SWITCH_BODY -> SWITCH_CASE SWITCH_BODY .)
    RCURL_BRACE     reduce using rule 58 (SWITCH_BODY -> SWITCH_CASE SWITCH_BODY .)


state 130

    (61) BUCLE -> DECREASE VARIABLELEX .

    $end            reduce using rule 61 (BUCLE -> DECREASE VARIABLELEX .)
    RPAREN          reduce using rule 61 (BUCLE -> DECREASE VARIABLELEX .)


state 131

    (69) ELSE_STRUCTURE -> ELSE LCURL_BRACE . EXPRESSIONS RCURL_BRACE
    (80) EXPRESSIONS -> . EXPRESSION
    (81) EXPRESSIONS -> . EXPRESSION EXPRESSIONS
    (78) EXPRESSION -> . CODE SEMICOLON
    (79) EXPRESSION -> . CONTROL_STRUCTURES
    (73) CODE -> . FUNCTION
    (74) CODE -> . INTEGER_DECLARATION
    (75) CODE -> . DECIMAL_DECLARATION
    (76) CODE -> . ASSIGNMENT_DECLARATION
    (77) CODE -> . COMENTARIOLEX
    (46) CONTROL_STRUCTURES -> . IF_STRUCTURE
    (47) CONTROL_STRUCTURES -> . FOR_STRUCTURE
    (48) CONTROL_STRUCTURES -> . WHILE_STRUCTURE
    (49) CONTROL_STRUCTURES -> . SWITCH_STRUCTURE
    (82) FUNCTION -> . VARNAME LPAREN FUNCTION_ARGUMENTS RPAREN
    (90) INTEGER_DECLARATION -> . INTEGER_TYPE VARNAME EQUAL INTEGER
    (91) DECIMAL_DECLARATION -> . DECIMAL_TYPE VARNAME EQUAL DECIMAL
    (92) ASSIGNMENT_DECLARATION -> . VARNAME ASSIGNMENT_OPERATOR SENTENCE
    (105) COMENTARIOLEX -> . COMMENT
    (67) IF_STRUCTURE -> . IF LPAREN COMPARISONS RPAREN LCURL_BRACE EXPRESSIONS RCURL_BRACE
    (68) IF_STRUCTURE -> . IF LPAREN COMPARISONS RPAREN LCURL_BRACE EXPRESSIONS RCURL_BRACE ELSE_STRUCTURE
    (62) FOR_STRUCTURE -> . FOR FOR_ARGUMENTS_STRUCTURE LCURL_BRACE FOR_BODY_STRUCTURE RCURL_BRACE
    (53) WHILE_STRUCTURE -> . WHILE LPAREN COMPARISONS RPAREN LCURL_BRACE BODY_STRUCTURE RCURL_BRACE
    (59) SWITCH_STRUCTURE -> . SWITCH LPAREN COMPARISONS RPAREN LCURL_BRACE SWITCH_BODY RCURL_BRACE
    (85) INTEGER_TYPE -> . INT
    (86) INTEGER_TYPE -> . SHORT
    (87) INTEGER_TYPE -> . LONG
    (88) DECIMAL_TYPE -> . FLOAT
    (89) DECIMAL_TYPE -> . DOUBLE

    VARNAME         shift and go to state 107
    COMMENT         shift and go to state 67
    IF              shift and go to state 47
    FOR             shift and go to state 48
    WHILE           shift and go to state 44
    SWITCH          shift and go to state 46
    INT             shift and go to state 50
    SHORT           shift and go to state 51
    LONG            shift and go to state 52
    FLOAT           shift and go to state 53
    DOUBLE          shift and go to state 54

    EXPRESSIONS                    shift and go to state 166
    EXPRESSION                     shift and go to state 94
    CODE                           shift and go to state 96
    CONTROL_STRUCTURES             shift and go to state 97
    FUNCTION                       shift and go to state 98
    INTEGER_DECLARATION            shift and go to state 99
    DECIMAL_DECLARATION            shift and go to state 100
    ASSIGNMENT_DECLARATION         shift and go to state 101
    COMENTARIOLEX                  shift and go to state 102
    IF_STRUCTURE                   shift and go to state 103
    FOR_STRUCTURE                  shift and go to state 104
    WHILE_STRUCTURE                shift and go to state 105
    SWITCH_STRUCTURE               shift and go to state 106
    INTEGER_TYPE                   shift and go to state 108
    DECIMAL_TYPE                   shift and go to state 109

state 132

    (70) ELSE_STRUCTURE -> ELSE IF_STRUCTURE .

    $end            reduce using rule 70 (ELSE_STRUCTURE -> ELSE IF_STRUCTURE .)
    VARNAME         reduce using rule 70 (ELSE_STRUCTURE -> ELSE IF_STRUCTURE .)
    COMMENT         reduce using rule 70 (ELSE_STRUCTURE -> ELSE IF_STRUCTURE .)
    IF              reduce using rule 70 (ELSE_STRUCTURE -> ELSE IF_STRUCTURE .)
    FOR             reduce using rule 70 (ELSE_STRUCTURE -> ELSE IF_STRUCTURE .)
    WHILE           reduce using rule 70 (ELSE_STRUCTURE -> ELSE IF_STRUCTURE .)
    SWITCH          reduce using rule 70 (ELSE_STRUCTURE -> ELSE IF_STRUCTURE .)
    INT             reduce using rule 70 (ELSE_STRUCTURE -> ELSE IF_STRUCTURE .)
    SHORT           reduce using rule 70 (ELSE_STRUCTURE -> ELSE IF_STRUCTURE .)
    LONG            reduce using rule 70 (ELSE_STRUCTURE -> ELSE IF_STRUCTURE .)
    FLOAT           reduce using rule 70 (ELSE_STRUCTURE -> ELSE IF_STRUCTURE .)
    DOUBLE          reduce using rule 70 (ELSE_STRUCTURE -> ELSE IF_STRUCTURE .)
    RCURL_BRACE     reduce using rule 70 (ELSE_STRUCTURE -> ELSE IF_STRUCTURE .)
    BREAK           reduce using rule 70 (ELSE_STRUCTURE -> ELSE IF_STRUCTURE .)
    CONTINUE        reduce using rule 70 (ELSE_STRUCTURE -> ELSE IF_STRUCTURE .)


state 133

    (65) FOR_BODY_STRUCTURE -> BREAK SEMICOLON .

    $end            reduce using rule 65 (FOR_BODY_STRUCTURE -> BREAK SEMICOLON .)
    RCURL_BRACE     reduce using rule 65 (FOR_BODY_STRUCTURE -> BREAK SEMICOLON .)


state 134

    (66) FOR_BODY_STRUCTURE -> CONTINUE SEMICOLON .

    $end            reduce using rule 66 (FOR_BODY_STRUCTURE -> CONTINUE SEMICOLON .)
    RCURL_BRACE     reduce using rule 66 (FOR_BODY_STRUCTURE -> CONTINUE SEMICOLON .)


state 135

    (54) SWITCH_CASE -> CASE INTEGER . COLON EXPRESSIONS BREAK SEMICOLON

    COLON           shift and go to state 167


state 136

    (55) SWITCH_DEFAULT -> DEFAULT COLON . EXPRESSIONS BREAK SEMICOLON
    (80) EXPRESSIONS -> . EXPRESSION
    (81) EXPRESSIONS -> . EXPRESSION EXPRESSIONS
    (78) EXPRESSION -> . CODE SEMICOLON
    (79) EXPRESSION -> . CONTROL_STRUCTURES
    (73) CODE -> . FUNCTION
    (74) CODE -> . INTEGER_DECLARATION
    (75) CODE -> . DECIMAL_DECLARATION
    (76) CODE -> . ASSIGNMENT_DECLARATION
    (77) CODE -> . COMENTARIOLEX
    (46) CONTROL_STRUCTURES -> . IF_STRUCTURE
    (47) CONTROL_STRUCTURES -> . FOR_STRUCTURE
    (48) CONTROL_STRUCTURES -> . WHILE_STRUCTURE
    (49) CONTROL_STRUCTURES -> . SWITCH_STRUCTURE
    (82) FUNCTION -> . VARNAME LPAREN FUNCTION_ARGUMENTS RPAREN
    (90) INTEGER_DECLARATION -> . INTEGER_TYPE VARNAME EQUAL INTEGER
    (91) DECIMAL_DECLARATION -> . DECIMAL_TYPE VARNAME EQUAL DECIMAL
    (92) ASSIGNMENT_DECLARATION -> . VARNAME ASSIGNMENT_OPERATOR SENTENCE
    (105) COMENTARIOLEX -> . COMMENT
    (67) IF_STRUCTURE -> . IF LPAREN COMPARISONS RPAREN LCURL_BRACE EXPRESSIONS RCURL_BRACE
    (68) IF_STRUCTURE -> . IF LPAREN COMPARISONS RPAREN LCURL_BRACE EXPRESSIONS RCURL_BRACE ELSE_STRUCTURE
    (62) FOR_STRUCTURE -> . FOR FOR_ARGUMENTS_STRUCTURE LCURL_BRACE FOR_BODY_STRUCTURE RCURL_BRACE
    (53) WHILE_STRUCTURE -> . WHILE LPAREN COMPARISONS RPAREN LCURL_BRACE BODY_STRUCTURE RCURL_BRACE
    (59) SWITCH_STRUCTURE -> . SWITCH LPAREN COMPARISONS RPAREN LCURL_BRACE SWITCH_BODY RCURL_BRACE
    (85) INTEGER_TYPE -> . INT
    (86) INTEGER_TYPE -> . SHORT
    (87) INTEGER_TYPE -> . LONG
    (88) DECIMAL_TYPE -> . FLOAT
    (89) DECIMAL_TYPE -> . DOUBLE

    VARNAME         shift and go to state 107
    COMMENT         shift and go to state 67
    IF              shift and go to state 47
    FOR             shift and go to state 48
    WHILE           shift and go to state 44
    SWITCH          shift and go to state 46
    INT             shift and go to state 50
    SHORT           shift and go to state 51
    LONG            shift and go to state 52
    FLOAT           shift and go to state 53
    DOUBLE          shift and go to state 54

    EXPRESSIONS                    shift and go to state 168
    EXPRESSION                     shift and go to state 94
    CODE                           shift and go to state 96
    CONTROL_STRUCTURES             shift and go to state 97
    FUNCTION                       shift and go to state 98
    INTEGER_DECLARATION            shift and go to state 99
    DECIMAL_DECLARATION            shift and go to state 100
    ASSIGNMENT_DECLARATION         shift and go to state 101
    COMENTARIOLEX                  shift and go to state 102
    IF_STRUCTURE                   shift and go to state 103
    FOR_STRUCTURE                  shift and go to state 104
    WHILE_STRUCTURE                shift and go to state 105
    SWITCH_STRUCTURE               shift and go to state 106
    INTEGER_TYPE                   shift and go to state 108
    DECIMAL_TYPE                   shift and go to state 109

state 137

    (121) COMPARISON -> VALUE COMPARISON_OPERATOR VALUE .

    AND             reduce using rule 121 (COMPARISON -> VALUE COMPARISON_OPERATOR VALUE .)
    OR              reduce using rule 121 (COMPARISON -> VALUE COMPARISON_OPERATOR VALUE .)
    NOT             reduce using rule 121 (COMPARISON -> VALUE COMPARISON_OPERATOR VALUE .)
    $end            reduce using rule 121 (COMPARISON -> VALUE COMPARISON_OPERATOR VALUE .)
    RPAREN          reduce using rule 121 (COMPARISON -> VALUE COMPARISON_OPERATOR VALUE .)
    SEMICOLON       reduce using rule 121 (COMPARISON -> VALUE COMPARISON_OPERATOR VALUE .)


state 138

    (42) VALUE -> NUMBER .

    AND             reduce using rule 42 (VALUE -> NUMBER .)
    OR              reduce using rule 42 (VALUE -> NUMBER .)
    NOT             reduce using rule 42 (VALUE -> NUMBER .)
    $end            reduce using rule 42 (VALUE -> NUMBER .)
    RPAREN          reduce using rule 42 (VALUE -> NUMBER .)
    SEMICOLON       reduce using rule 42 (VALUE -> NUMBER .)


state 139

    (112) OPERATION -> NUMBER OPERATOR NUMBER .

    PLUS            reduce using rule 112 (OPERATION -> NUMBER OPERATOR NUMBER .)
    MINUS           reduce using rule 112 (OPERATION -> NUMBER OPERATOR NUMBER .)
    TIMES           reduce using rule 112 (OPERATION -> NUMBER OPERATOR NUMBER .)
    MODULUS         reduce using rule 112 (OPERATION -> NUMBER OPERATOR NUMBER .)
    DIVIDE          reduce using rule 112 (OPERATION -> NUMBER OPERATOR NUMBER .)
    $end            reduce using rule 112 (OPERATION -> NUMBER OPERATOR NUMBER .)


state 140

    (90) INTEGER_DECLARATION -> INTEGER_TYPE VARNAME EQUAL . INTEGER

    INTEGER         shift and go to state 169


state 141

    (91) DECIMAL_DECLARATION -> DECIMAL_TYPE VARNAME EQUAL . DECIMAL

    DECIMAL         shift and go to state 170


state 142

    (113) OPERATIONS -> OPERATION .
    (114) OPERATIONS -> OPERATION . OPERATOR OPERATIONS
    (107) OPERATOR -> . PLUS
    (108) OPERATOR -> . MINUS
    (109) OPERATOR -> . TIMES
    (110) OPERATOR -> . MODULUS
    (111) OPERATOR -> . DIVIDE

    $end            reduce using rule 113 (OPERATIONS -> OPERATION .)
    PLUS            shift and go to state 68
    MINUS           shift and go to state 69
    TIMES           shift and go to state 70
    MODULUS         shift and go to state 71
    DIVIDE          shift and go to state 72

    OPERATOR                       shift and go to state 113

state 143

    (114) OPERATIONS -> OPERATION OPERATOR OPERATIONS .

    $end            reduce using rule 114 (OPERATIONS -> OPERATION OPERATOR OPERATIONS .)


state 144

    (112) OPERATION -> NUMBER . OPERATOR NUMBER
    (107) OPERATOR -> . PLUS
    (108) OPERATOR -> . MINUS
    (109) OPERATOR -> . TIMES
    (110) OPERATOR -> . MODULUS
    (111) OPERATOR -> . DIVIDE

    PLUS            shift and go to state 68
    MINUS           shift and go to state 69
    TIMES           shift and go to state 70
    MODULUS         shift and go to state 71
    DIVIDE          shift and go to state 72

    OPERATOR                       shift and go to state 92

state 145

    (123) COMPARISONS -> COMPARISON .
    (124) COMPARISONS -> COMPARISON . LOGICAL_OPERATOR COMPARISONS
    (125) LOGICAL_OPERATOR -> . AND
    (126) LOGICAL_OPERATOR -> . OR
    (127) LOGICAL_OPERATOR -> . NOT

    $end            reduce using rule 123 (COMPARISONS -> COMPARISON .)
    RPAREN          reduce using rule 123 (COMPARISONS -> COMPARISON .)
    SEMICOLON       reduce using rule 123 (COMPARISONS -> COMPARISON .)
    AND             shift and go to state 79
    OR              shift and go to state 80
    NOT             shift and go to state 81

    LOGICAL_OPERATOR               shift and go to state 114

state 146

    (124) COMPARISONS -> COMPARISON LOGICAL_OPERATOR COMPARISONS .

    $end            reduce using rule 124 (COMPARISONS -> COMPARISON LOGICAL_OPERATOR COMPARISONS .)
    RPAREN          reduce using rule 124 (COMPARISONS -> COMPARISON LOGICAL_OPERATOR COMPARISONS .)
    SEMICOLON       reduce using rule 124 (COMPARISONS -> COMPARISON LOGICAL_OPERATOR COMPARISONS .)


state 147

    (121) COMPARISON -> VALUE . COMPARISON_OPERATOR VALUE
    (115) COMPARISON_OPERATOR -> . EQUAL_TO
    (116) COMPARISON_OPERATOR -> . NOT_EQUAL
    (117) COMPARISON_OPERATOR -> . GREATER_THAN
    (118) COMPARISON_OPERATOR -> . LESS_THAN
    (119) COMPARISON_OPERATOR -> . GREATER_EQUAL
    (120) COMPARISON_OPERATOR -> . LESS_EQUAL

    EQUAL_TO        shift and go to state 73
    NOT_EQUAL       shift and go to state 74
    GREATER_THAN    shift and go to state 75
    LESS_THAN       shift and go to state 76
    GREATER_EQUAL   shift and go to state 77
    LESS_EQUAL      shift and go to state 78

    COMPARISON_OPERATOR            shift and go to state 91

state 148

    (122) COMPARISON -> SENTENCE . COMPARISON_OPERATOR SENTENCE
    (115) COMPARISON_OPERATOR -> . EQUAL_TO
    (116) COMPARISON_OPERATOR -> . NOT_EQUAL
    (117) COMPARISON_OPERATOR -> . GREATER_THAN
    (118) COMPARISON_OPERATOR -> . LESS_THAN
    (119) COMPARISON_OPERATOR -> . GREATER_EQUAL
    (120) COMPARISON_OPERATOR -> . LESS_EQUAL

    EQUAL_TO        shift and go to state 73
    NOT_EQUAL       shift and go to state 74
    GREATER_THAN    shift and go to state 75
    LESS_THAN       shift and go to state 76
    GREATER_EQUAL   shift and go to state 77
    LESS_EQUAL      shift and go to state 78

    COMPARISON_OPERATOR            shift and go to state 115

state 149

    (42) VALUE -> NUMBER .
    (128) SENTENCE -> NUMBER .

  ! reduce/reduce conflict for EQUAL_TO resolved using rule 42 (VALUE -> NUMBER .)
  ! reduce/reduce conflict for NOT_EQUAL resolved using rule 42 (VALUE -> NUMBER .)
  ! reduce/reduce conflict for GREATER_THAN resolved using rule 42 (VALUE -> NUMBER .)
  ! reduce/reduce conflict for LESS_THAN resolved using rule 42 (VALUE -> NUMBER .)
  ! reduce/reduce conflict for GREATER_EQUAL resolved using rule 42 (VALUE -> NUMBER .)
  ! reduce/reduce conflict for LESS_EQUAL resolved using rule 42 (VALUE -> NUMBER .)
    EQUAL_TO        reduce using rule 42 (VALUE -> NUMBER .)
    NOT_EQUAL       reduce using rule 42 (VALUE -> NUMBER .)
    GREATER_THAN    reduce using rule 42 (VALUE -> NUMBER .)
    LESS_THAN       reduce using rule 42 (VALUE -> NUMBER .)
    GREATER_EQUAL   reduce using rule 42 (VALUE -> NUMBER .)
    LESS_EQUAL      reduce using rule 42 (VALUE -> NUMBER .)

  ! EQUAL_TO        [ reduce using rule 128 (SENTENCE -> NUMBER .) ]
  ! NOT_EQUAL       [ reduce using rule 128 (SENTENCE -> NUMBER .) ]
  ! GREATER_THAN    [ reduce using rule 128 (SENTENCE -> NUMBER .) ]
  ! LESS_THAN       [ reduce using rule 128 (SENTENCE -> NUMBER .) ]
  ! GREATER_EQUAL   [ reduce using rule 128 (SENTENCE -> NUMBER .) ]
  ! LESS_EQUAL      [ reduce using rule 128 (SENTENCE -> NUMBER .) ]


state 150

    (129) SENTENCE -> VARNAME .

    EQUAL_TO        reduce using rule 129 (SENTENCE -> VARNAME .)
    NOT_EQUAL       reduce using rule 129 (SENTENCE -> VARNAME .)
    GREATER_THAN    reduce using rule 129 (SENTENCE -> VARNAME .)
    LESS_THAN       reduce using rule 129 (SENTENCE -> VARNAME .)
    GREATER_EQUAL   reduce using rule 129 (SENTENCE -> VARNAME .)
    LESS_EQUAL      reduce using rule 129 (SENTENCE -> VARNAME .)
    AND             reduce using rule 129 (SENTENCE -> VARNAME .)
    OR              reduce using rule 129 (SENTENCE -> VARNAME .)
    NOT             reduce using rule 129 (SENTENCE -> VARNAME .)
    $end            reduce using rule 129 (SENTENCE -> VARNAME .)
    RPAREN          reduce using rule 129 (SENTENCE -> VARNAME .)
    SEMICOLON       reduce using rule 129 (SENTENCE -> VARNAME .)
    COMMA           reduce using rule 129 (SENTENCE -> VARNAME .)


state 151

    (122) COMPARISON -> SENTENCE COMPARISON_OPERATOR SENTENCE .

    AND             reduce using rule 122 (COMPARISON -> SENTENCE COMPARISON_OPERATOR SENTENCE .)
    OR              reduce using rule 122 (COMPARISON -> SENTENCE COMPARISON_OPERATOR SENTENCE .)
    NOT             reduce using rule 122 (COMPARISON -> SENTENCE COMPARISON_OPERATOR SENTENCE .)
    $end            reduce using rule 122 (COMPARISON -> SENTENCE COMPARISON_OPERATOR SENTENCE .)
    RPAREN          reduce using rule 122 (COMPARISON -> SENTENCE COMPARISON_OPERATOR SENTENCE .)
    SEMICOLON       reduce using rule 122 (COMPARISON -> SENTENCE COMPARISON_OPERATOR SENTENCE .)


state 152

    (128) SENTENCE -> NUMBER .

    AND             reduce using rule 128 (SENTENCE -> NUMBER .)
    OR              reduce using rule 128 (SENTENCE -> NUMBER .)
    NOT             reduce using rule 128 (SENTENCE -> NUMBER .)
    $end            reduce using rule 128 (SENTENCE -> NUMBER .)
    RPAREN          reduce using rule 128 (SENTENCE -> NUMBER .)
    SEMICOLON       reduce using rule 128 (SENTENCE -> NUMBER .)
    COMMA           reduce using rule 128 (SENTENCE -> NUMBER .)


state 153

    (130) SENTENCES -> SENTENCE .
    (131) SENTENCES -> SENTENCE . COMMA SENTENCES

    $end            reduce using rule 130 (SENTENCES -> SENTENCE .)
    RPAREN          reduce using rule 130 (SENTENCES -> SENTENCE .)
    COMMA           shift and go to state 116


state 154

    (131) SENTENCES -> SENTENCE COMMA SENTENCES .

    $end            reduce using rule 131 (SENTENCES -> SENTENCE COMMA SENTENCES .)
    RPAREN          reduce using rule 131 (SENTENCES -> SENTENCE COMMA SENTENCES .)


state 155

    (40) DEFINE -> PP_DEFINE VARIABLELEX VALUE .

    $end            reduce using rule 40 (DEFINE -> PP_DEFINE VARIABLELEX VALUE .)


state 156

    (53) WHILE_STRUCTURE -> WHILE LPAREN COMPARISONS . RPAREN LCURL_BRACE BODY_STRUCTURE RCURL_BRACE

    RPAREN          shift and go to state 171


state 157

    (63) FOR_ARGUMENTS_STRUCTURE -> LPAREN DECLARATIONS SEMICOLON . COMPARISONS SEMICOLON BUCLE RPAREN
    (123) COMPARISONS -> . COMPARISON
    (124) COMPARISONS -> . COMPARISON LOGICAL_OPERATOR COMPARISONS
    (121) COMPARISON -> . VALUE COMPARISON_OPERATOR VALUE
    (122) COMPARISON -> . SENTENCE COMPARISON_OPERATOR SENTENCE
    (42) VALUE -> . NUMBER
    (43) VALUE -> . STRING
    (128) SENTENCE -> . NUMBER
    (129) SENTENCE -> . VARNAME
    (44) NUMBER -> . INTEGER
    (45) NUMBER -> . DECIMAL

    STRING          shift and go to state 41
    VARNAME         shift and go to state 150
    INTEGER         shift and go to state 42
    DECIMAL         shift and go to state 43

    COMPARISONS                    shift and go to state 172
    COMPARISON                     shift and go to state 145
    VALUE                          shift and go to state 147
    SENTENCE                       shift and go to state 148
    NUMBER                         shift and go to state 149

state 158

    (59) SWITCH_STRUCTURE -> SWITCH LPAREN COMPARISONS . RPAREN LCURL_BRACE SWITCH_BODY RCURL_BRACE

    RPAREN          shift and go to state 173


state 159

    (67) IF_STRUCTURE -> IF LPAREN COMPARISONS . RPAREN LCURL_BRACE EXPRESSIONS RCURL_BRACE
    (68) IF_STRUCTURE -> IF LPAREN COMPARISONS . RPAREN LCURL_BRACE EXPRESSIONS RCURL_BRACE ELSE_STRUCTURE

    RPAREN          shift and go to state 174


state 160

    (62) FOR_STRUCTURE -> FOR FOR_ARGUMENTS_STRUCTURE LCURL_BRACE . FOR_BODY_STRUCTURE RCURL_BRACE
    (64) FOR_BODY_STRUCTURE -> . EXPRESSIONS
    (65) FOR_BODY_STRUCTURE -> . BREAK SEMICOLON
    (66) FOR_BODY_STRUCTURE -> . CONTINUE SEMICOLON
    (80) EXPRESSIONS -> . EXPRESSION
    (81) EXPRESSIONS -> . EXPRESSION EXPRESSIONS
    (78) EXPRESSION -> . CODE SEMICOLON
    (79) EXPRESSION -> . CONTROL_STRUCTURES
    (73) CODE -> . FUNCTION
    (74) CODE -> . INTEGER_DECLARATION
    (75) CODE -> . DECIMAL_DECLARATION
    (76) CODE -> . ASSIGNMENT_DECLARATION
    (77) CODE -> . COMENTARIOLEX
    (46) CONTROL_STRUCTURES -> . IF_STRUCTURE
    (47) CONTROL_STRUCTURES -> . FOR_STRUCTURE
    (48) CONTROL_STRUCTURES -> . WHILE_STRUCTURE
    (49) CONTROL_STRUCTURES -> . SWITCH_STRUCTURE
    (82) FUNCTION -> . VARNAME LPAREN FUNCTION_ARGUMENTS RPAREN
    (90) INTEGER_DECLARATION -> . INTEGER_TYPE VARNAME EQUAL INTEGER
    (91) DECIMAL_DECLARATION -> . DECIMAL_TYPE VARNAME EQUAL DECIMAL
    (92) ASSIGNMENT_DECLARATION -> . VARNAME ASSIGNMENT_OPERATOR SENTENCE
    (105) COMENTARIOLEX -> . COMMENT
    (67) IF_STRUCTURE -> . IF LPAREN COMPARISONS RPAREN LCURL_BRACE EXPRESSIONS RCURL_BRACE
    (68) IF_STRUCTURE -> . IF LPAREN COMPARISONS RPAREN LCURL_BRACE EXPRESSIONS RCURL_BRACE ELSE_STRUCTURE
    (62) FOR_STRUCTURE -> . FOR FOR_ARGUMENTS_STRUCTURE LCURL_BRACE FOR_BODY_STRUCTURE RCURL_BRACE
    (53) WHILE_STRUCTURE -> . WHILE LPAREN COMPARISONS RPAREN LCURL_BRACE BODY_STRUCTURE RCURL_BRACE
    (59) SWITCH_STRUCTURE -> . SWITCH LPAREN COMPARISONS RPAREN LCURL_BRACE SWITCH_BODY RCURL_BRACE
    (85) INTEGER_TYPE -> . INT
    (86) INTEGER_TYPE -> . SHORT
    (87) INTEGER_TYPE -> . LONG
    (88) DECIMAL_TYPE -> . FLOAT
    (89) DECIMAL_TYPE -> . DOUBLE

    BREAK           shift and go to state 87
    CONTINUE        shift and go to state 88
    VARNAME         shift and go to state 107
    COMMENT         shift and go to state 67
    IF              shift and go to state 47
    FOR             shift and go to state 48
    WHILE           shift and go to state 44
    SWITCH          shift and go to state 46
    INT             shift and go to state 50
    SHORT           shift and go to state 51
    LONG            shift and go to state 52
    FLOAT           shift and go to state 53
    DOUBLE          shift and go to state 54

    FOR_BODY_STRUCTURE             shift and go to state 175
    EXPRESSIONS                    shift and go to state 176
    EXPRESSION                     shift and go to state 94
    CODE                           shift and go to state 96
    CONTROL_STRUCTURES             shift and go to state 97
    FUNCTION                       shift and go to state 98
    INTEGER_DECLARATION            shift and go to state 99
    DECIMAL_DECLARATION            shift and go to state 100
    ASSIGNMENT_DECLARATION         shift and go to state 101
    COMENTARIOLEX                  shift and go to state 102
    IF_STRUCTURE                   shift and go to state 103
    FOR_STRUCTURE                  shift and go to state 104
    WHILE_STRUCTURE                shift and go to state 105
    SWITCH_STRUCTURE               shift and go to state 106
    INTEGER_TYPE                   shift and go to state 108
    DECIMAL_TYPE                   shift and go to state 109

state 161

    (82) FUNCTION -> VARNAME LPAREN FUNCTION_ARGUMENTS . RPAREN

    RPAREN          shift and go to state 177


state 162

    (84) FUNCTION_ARGUMENTS -> COMPARISONS .

    RPAREN          reduce using rule 84 (FUNCTION_ARGUMENTS -> COMPARISONS .)


state 163

    (130) SENTENCES -> SENTENCE .
    (131) SENTENCES -> SENTENCE . COMMA SENTENCES
    (122) COMPARISON -> SENTENCE . COMPARISON_OPERATOR SENTENCE
    (115) COMPARISON_OPERATOR -> . EQUAL_TO
    (116) COMPARISON_OPERATOR -> . NOT_EQUAL
    (117) COMPARISON_OPERATOR -> . GREATER_THAN
    (118) COMPARISON_OPERATOR -> . LESS_THAN
    (119) COMPARISON_OPERATOR -> . GREATER_EQUAL
    (120) COMPARISON_OPERATOR -> . LESS_EQUAL

    RPAREN          reduce using rule 130 (SENTENCES -> SENTENCE .)
    COMMA           shift and go to state 116
    EQUAL_TO        shift and go to state 73
    NOT_EQUAL       shift and go to state 74
    GREATER_THAN    shift and go to state 75
    LESS_THAN       shift and go to state 76
    GREATER_EQUAL   shift and go to state 77
    LESS_EQUAL      shift and go to state 78

    COMPARISON_OPERATOR            shift and go to state 115

state 164

    (128) SENTENCE -> NUMBER .
    (42) VALUE -> NUMBER .

  ! reduce/reduce conflict for EQUAL_TO resolved using rule 42 (VALUE -> NUMBER .)
  ! reduce/reduce conflict for NOT_EQUAL resolved using rule 42 (VALUE -> NUMBER .)
  ! reduce/reduce conflict for GREATER_THAN resolved using rule 42 (VALUE -> NUMBER .)
  ! reduce/reduce conflict for LESS_THAN resolved using rule 42 (VALUE -> NUMBER .)
  ! reduce/reduce conflict for GREATER_EQUAL resolved using rule 42 (VALUE -> NUMBER .)
  ! reduce/reduce conflict for LESS_EQUAL resolved using rule 42 (VALUE -> NUMBER .)
    COMMA           reduce using rule 128 (SENTENCE -> NUMBER .)
    RPAREN          reduce using rule 128 (SENTENCE -> NUMBER .)
    EQUAL_TO        reduce using rule 42 (VALUE -> NUMBER .)
    NOT_EQUAL       reduce using rule 42 (VALUE -> NUMBER .)
    GREATER_THAN    reduce using rule 42 (VALUE -> NUMBER .)
    LESS_THAN       reduce using rule 42 (VALUE -> NUMBER .)
    GREATER_EQUAL   reduce using rule 42 (VALUE -> NUMBER .)
    LESS_EQUAL      reduce using rule 42 (VALUE -> NUMBER .)

  ! EQUAL_TO        [ reduce using rule 128 (SENTENCE -> NUMBER .) ]
  ! NOT_EQUAL       [ reduce using rule 128 (SENTENCE -> NUMBER .) ]
  ! GREATER_THAN    [ reduce using rule 128 (SENTENCE -> NUMBER .) ]
  ! LESS_THAN       [ reduce using rule 128 (SENTENCE -> NUMBER .) ]
  ! GREATER_EQUAL   [ reduce using rule 128 (SENTENCE -> NUMBER .) ]
  ! LESS_EQUAL      [ reduce using rule 128 (SENTENCE -> NUMBER .) ]


state 165

    (92) ASSIGNMENT_DECLARATION -> VARNAME ASSIGNMENT_OPERATOR SENTENCE .

    $end            reduce using rule 92 (ASSIGNMENT_DECLARATION -> VARNAME ASSIGNMENT_OPERATOR SENTENCE .)
    SEMICOLON       reduce using rule 92 (ASSIGNMENT_DECLARATION -> VARNAME ASSIGNMENT_OPERATOR SENTENCE .)


state 166

    (69) ELSE_STRUCTURE -> ELSE LCURL_BRACE EXPRESSIONS . RCURL_BRACE

    RCURL_BRACE     shift and go to state 178


state 167

    (54) SWITCH_CASE -> CASE INTEGER COLON . EXPRESSIONS BREAK SEMICOLON
    (80) EXPRESSIONS -> . EXPRESSION
    (81) EXPRESSIONS -> . EXPRESSION EXPRESSIONS
    (78) EXPRESSION -> . CODE SEMICOLON
    (79) EXPRESSION -> . CONTROL_STRUCTURES
    (73) CODE -> . FUNCTION
    (74) CODE -> . INTEGER_DECLARATION
    (75) CODE -> . DECIMAL_DECLARATION
    (76) CODE -> . ASSIGNMENT_DECLARATION
    (77) CODE -> . COMENTARIOLEX
    (46) CONTROL_STRUCTURES -> . IF_STRUCTURE
    (47) CONTROL_STRUCTURES -> . FOR_STRUCTURE
    (48) CONTROL_STRUCTURES -> . WHILE_STRUCTURE
    (49) CONTROL_STRUCTURES -> . SWITCH_STRUCTURE
    (82) FUNCTION -> . VARNAME LPAREN FUNCTION_ARGUMENTS RPAREN
    (90) INTEGER_DECLARATION -> . INTEGER_TYPE VARNAME EQUAL INTEGER
    (91) DECIMAL_DECLARATION -> . DECIMAL_TYPE VARNAME EQUAL DECIMAL
    (92) ASSIGNMENT_DECLARATION -> . VARNAME ASSIGNMENT_OPERATOR SENTENCE
    (105) COMENTARIOLEX -> . COMMENT
    (67) IF_STRUCTURE -> . IF LPAREN COMPARISONS RPAREN LCURL_BRACE EXPRESSIONS RCURL_BRACE
    (68) IF_STRUCTURE -> . IF LPAREN COMPARISONS RPAREN LCURL_BRACE EXPRESSIONS RCURL_BRACE ELSE_STRUCTURE
    (62) FOR_STRUCTURE -> . FOR FOR_ARGUMENTS_STRUCTURE LCURL_BRACE FOR_BODY_STRUCTURE RCURL_BRACE
    (53) WHILE_STRUCTURE -> . WHILE LPAREN COMPARISONS RPAREN LCURL_BRACE BODY_STRUCTURE RCURL_BRACE
    (59) SWITCH_STRUCTURE -> . SWITCH LPAREN COMPARISONS RPAREN LCURL_BRACE SWITCH_BODY RCURL_BRACE
    (85) INTEGER_TYPE -> . INT
    (86) INTEGER_TYPE -> . SHORT
    (87) INTEGER_TYPE -> . LONG
    (88) DECIMAL_TYPE -> . FLOAT
    (89) DECIMAL_TYPE -> . DOUBLE

    VARNAME         shift and go to state 107
    COMMENT         shift and go to state 67
    IF              shift and go to state 47
    FOR             shift and go to state 48
    WHILE           shift and go to state 44
    SWITCH          shift and go to state 46
    INT             shift and go to state 50
    SHORT           shift and go to state 51
    LONG            shift and go to state 52
    FLOAT           shift and go to state 53
    DOUBLE          shift and go to state 54

    EXPRESSIONS                    shift and go to state 179
    EXPRESSION                     shift and go to state 94
    CODE                           shift and go to state 96
    CONTROL_STRUCTURES             shift and go to state 97
    FUNCTION                       shift and go to state 98
    INTEGER_DECLARATION            shift and go to state 99
    DECIMAL_DECLARATION            shift and go to state 100
    ASSIGNMENT_DECLARATION         shift and go to state 101
    COMENTARIOLEX                  shift and go to state 102
    IF_STRUCTURE                   shift and go to state 103
    FOR_STRUCTURE                  shift and go to state 104
    WHILE_STRUCTURE                shift and go to state 105
    SWITCH_STRUCTURE               shift and go to state 106
    INTEGER_TYPE                   shift and go to state 108
    DECIMAL_TYPE                   shift and go to state 109

state 168

    (55) SWITCH_DEFAULT -> DEFAULT COLON EXPRESSIONS . BREAK SEMICOLON

    BREAK           shift and go to state 180


state 169

    (90) INTEGER_DECLARATION -> INTEGER_TYPE VARNAME EQUAL INTEGER .

    $end            reduce using rule 90 (INTEGER_DECLARATION -> INTEGER_TYPE VARNAME EQUAL INTEGER .)
    SEMICOLON       reduce using rule 90 (INTEGER_DECLARATION -> INTEGER_TYPE VARNAME EQUAL INTEGER .)


state 170

    (91) DECIMAL_DECLARATION -> DECIMAL_TYPE VARNAME EQUAL DECIMAL .

    $end            reduce using rule 91 (DECIMAL_DECLARATION -> DECIMAL_TYPE VARNAME EQUAL DECIMAL .)
    SEMICOLON       reduce using rule 91 (DECIMAL_DECLARATION -> DECIMAL_TYPE VARNAME EQUAL DECIMAL .)


state 171

    (53) WHILE_STRUCTURE -> WHILE LPAREN COMPARISONS RPAREN . LCURL_BRACE BODY_STRUCTURE RCURL_BRACE

    LCURL_BRACE     shift and go to state 181


state 172

    (63) FOR_ARGUMENTS_STRUCTURE -> LPAREN DECLARATIONS SEMICOLON COMPARISONS . SEMICOLON BUCLE RPAREN

    SEMICOLON       shift and go to state 182


state 173

    (59) SWITCH_STRUCTURE -> SWITCH LPAREN COMPARISONS RPAREN . LCURL_BRACE SWITCH_BODY RCURL_BRACE

    LCURL_BRACE     shift and go to state 183


state 174

    (67) IF_STRUCTURE -> IF LPAREN COMPARISONS RPAREN . LCURL_BRACE EXPRESSIONS RCURL_BRACE
    (68) IF_STRUCTURE -> IF LPAREN COMPARISONS RPAREN . LCURL_BRACE EXPRESSIONS RCURL_BRACE ELSE_STRUCTURE

    LCURL_BRACE     shift and go to state 184


state 175

    (62) FOR_STRUCTURE -> FOR FOR_ARGUMENTS_STRUCTURE LCURL_BRACE FOR_BODY_STRUCTURE . RCURL_BRACE

    RCURL_BRACE     shift and go to state 185


state 176

    (64) FOR_BODY_STRUCTURE -> EXPRESSIONS .

    RCURL_BRACE     reduce using rule 64 (FOR_BODY_STRUCTURE -> EXPRESSIONS .)


state 177

    (82) FUNCTION -> VARNAME LPAREN FUNCTION_ARGUMENTS RPAREN .

    $end            reduce using rule 82 (FUNCTION -> VARNAME LPAREN FUNCTION_ARGUMENTS RPAREN .)
    SEMICOLON       reduce using rule 82 (FUNCTION -> VARNAME LPAREN FUNCTION_ARGUMENTS RPAREN .)


state 178

    (69) ELSE_STRUCTURE -> ELSE LCURL_BRACE EXPRESSIONS RCURL_BRACE .

    $end            reduce using rule 69 (ELSE_STRUCTURE -> ELSE LCURL_BRACE EXPRESSIONS RCURL_BRACE .)
    VARNAME         reduce using rule 69 (ELSE_STRUCTURE -> ELSE LCURL_BRACE EXPRESSIONS RCURL_BRACE .)
    COMMENT         reduce using rule 69 (ELSE_STRUCTURE -> ELSE LCURL_BRACE EXPRESSIONS RCURL_BRACE .)
    IF              reduce using rule 69 (ELSE_STRUCTURE -> ELSE LCURL_BRACE EXPRESSIONS RCURL_BRACE .)
    FOR             reduce using rule 69 (ELSE_STRUCTURE -> ELSE LCURL_BRACE EXPRESSIONS RCURL_BRACE .)
    WHILE           reduce using rule 69 (ELSE_STRUCTURE -> ELSE LCURL_BRACE EXPRESSIONS RCURL_BRACE .)
    SWITCH          reduce using rule 69 (ELSE_STRUCTURE -> ELSE LCURL_BRACE EXPRESSIONS RCURL_BRACE .)
    INT             reduce using rule 69 (ELSE_STRUCTURE -> ELSE LCURL_BRACE EXPRESSIONS RCURL_BRACE .)
    SHORT           reduce using rule 69 (ELSE_STRUCTURE -> ELSE LCURL_BRACE EXPRESSIONS RCURL_BRACE .)
    LONG            reduce using rule 69 (ELSE_STRUCTURE -> ELSE LCURL_BRACE EXPRESSIONS RCURL_BRACE .)
    FLOAT           reduce using rule 69 (ELSE_STRUCTURE -> ELSE LCURL_BRACE EXPRESSIONS RCURL_BRACE .)
    DOUBLE          reduce using rule 69 (ELSE_STRUCTURE -> ELSE LCURL_BRACE EXPRESSIONS RCURL_BRACE .)
    RCURL_BRACE     reduce using rule 69 (ELSE_STRUCTURE -> ELSE LCURL_BRACE EXPRESSIONS RCURL_BRACE .)
    BREAK           reduce using rule 69 (ELSE_STRUCTURE -> ELSE LCURL_BRACE EXPRESSIONS RCURL_BRACE .)
    CONTINUE        reduce using rule 69 (ELSE_STRUCTURE -> ELSE LCURL_BRACE EXPRESSIONS RCURL_BRACE .)


state 179

    (54) SWITCH_CASE -> CASE INTEGER COLON EXPRESSIONS . BREAK SEMICOLON

    BREAK           shift and go to state 186


state 180

    (55) SWITCH_DEFAULT -> DEFAULT COLON EXPRESSIONS BREAK . SEMICOLON

    SEMICOLON       shift and go to state 187


state 181

    (53) WHILE_STRUCTURE -> WHILE LPAREN COMPARISONS RPAREN LCURL_BRACE . BODY_STRUCTURE RCURL_BRACE
    (50) BODY_STRUCTURE -> . EXPRESSIONS
    (51) BODY_STRUCTURE -> . EXPRESSIONS BREAK SEMICOLON
    (52) BODY_STRUCTURE -> . EXPRESSIONS CONTINUE SEMICOLON
    (80) EXPRESSIONS -> . EXPRESSION
    (81) EXPRESSIONS -> . EXPRESSION EXPRESSIONS
    (78) EXPRESSION -> . CODE SEMICOLON
    (79) EXPRESSION -> . CONTROL_STRUCTURES
    (73) CODE -> . FUNCTION
    (74) CODE -> . INTEGER_DECLARATION
    (75) CODE -> . DECIMAL_DECLARATION
    (76) CODE -> . ASSIGNMENT_DECLARATION
    (77) CODE -> . COMENTARIOLEX
    (46) CONTROL_STRUCTURES -> . IF_STRUCTURE
    (47) CONTROL_STRUCTURES -> . FOR_STRUCTURE
    (48) CONTROL_STRUCTURES -> . WHILE_STRUCTURE
    (49) CONTROL_STRUCTURES -> . SWITCH_STRUCTURE
    (82) FUNCTION -> . VARNAME LPAREN FUNCTION_ARGUMENTS RPAREN
    (90) INTEGER_DECLARATION -> . INTEGER_TYPE VARNAME EQUAL INTEGER
    (91) DECIMAL_DECLARATION -> . DECIMAL_TYPE VARNAME EQUAL DECIMAL
    (92) ASSIGNMENT_DECLARATION -> . VARNAME ASSIGNMENT_OPERATOR SENTENCE
    (105) COMENTARIOLEX -> . COMMENT
    (67) IF_STRUCTURE -> . IF LPAREN COMPARISONS RPAREN LCURL_BRACE EXPRESSIONS RCURL_BRACE
    (68) IF_STRUCTURE -> . IF LPAREN COMPARISONS RPAREN LCURL_BRACE EXPRESSIONS RCURL_BRACE ELSE_STRUCTURE
    (62) FOR_STRUCTURE -> . FOR FOR_ARGUMENTS_STRUCTURE LCURL_BRACE FOR_BODY_STRUCTURE RCURL_BRACE
    (53) WHILE_STRUCTURE -> . WHILE LPAREN COMPARISONS RPAREN LCURL_BRACE BODY_STRUCTURE RCURL_BRACE
    (59) SWITCH_STRUCTURE -> . SWITCH LPAREN COMPARISONS RPAREN LCURL_BRACE SWITCH_BODY RCURL_BRACE
    (85) INTEGER_TYPE -> . INT
    (86) INTEGER_TYPE -> . SHORT
    (87) INTEGER_TYPE -> . LONG
    (88) DECIMAL_TYPE -> . FLOAT
    (89) DECIMAL_TYPE -> . DOUBLE

    VARNAME         shift and go to state 107
    COMMENT         shift and go to state 67
    IF              shift and go to state 47
    FOR             shift and go to state 48
    WHILE           shift and go to state 44
    SWITCH          shift and go to state 46
    INT             shift and go to state 50
    SHORT           shift and go to state 51
    LONG            shift and go to state 52
    FLOAT           shift and go to state 53
    DOUBLE          shift and go to state 54

    BODY_STRUCTURE                 shift and go to state 188
    EXPRESSIONS                    shift and go to state 189
    EXPRESSION                     shift and go to state 94
    CODE                           shift and go to state 96
    CONTROL_STRUCTURES             shift and go to state 97
    FUNCTION                       shift and go to state 98
    INTEGER_DECLARATION            shift and go to state 99
    DECIMAL_DECLARATION            shift and go to state 100
    ASSIGNMENT_DECLARATION         shift and go to state 101
    COMENTARIOLEX                  shift and go to state 102
    IF_STRUCTURE                   shift and go to state 103
    FOR_STRUCTURE                  shift and go to state 104
    WHILE_STRUCTURE                shift and go to state 105
    SWITCH_STRUCTURE               shift and go to state 106
    INTEGER_TYPE                   shift and go to state 108
    DECIMAL_TYPE                   shift and go to state 109

state 182

    (63) FOR_ARGUMENTS_STRUCTURE -> LPAREN DECLARATIONS SEMICOLON COMPARISONS SEMICOLON . BUCLE RPAREN
    (60) BUCLE -> . VARIABLELEX INCREASE
    (61) BUCLE -> . DECREASE VARIABLELEX
    (106) VARIABLELEX -> . VARNAME

    DECREASE        shift and go to state 84
    VARNAME         shift and go to state 118

    BUCLE                          shift and go to state 190
    VARIABLELEX                    shift and go to state 191

state 183

    (59) SWITCH_STRUCTURE -> SWITCH LPAREN COMPARISONS RPAREN LCURL_BRACE . SWITCH_BODY RCURL_BRACE
    (56) SWITCH_BODY -> . SWITCH_CASE
    (57) SWITCH_BODY -> . SWITCH_DEFAULT
    (58) SWITCH_BODY -> . SWITCH_CASE SWITCH_BODY
    (54) SWITCH_CASE -> . CASE INTEGER COLON EXPRESSIONS BREAK SEMICOLON
    (55) SWITCH_DEFAULT -> . DEFAULT COLON EXPRESSIONS BREAK SEMICOLON

    CASE            shift and go to state 89
    DEFAULT         shift and go to state 90

    SWITCH_BODY                    shift and go to state 192
    SWITCH_CASE                    shift and go to state 82
    SWITCH_DEFAULT                 shift and go to state 83

state 184

    (67) IF_STRUCTURE -> IF LPAREN COMPARISONS RPAREN LCURL_BRACE . EXPRESSIONS RCURL_BRACE
    (68) IF_STRUCTURE -> IF LPAREN COMPARISONS RPAREN LCURL_BRACE . EXPRESSIONS RCURL_BRACE ELSE_STRUCTURE
    (80) EXPRESSIONS -> . EXPRESSION
    (81) EXPRESSIONS -> . EXPRESSION EXPRESSIONS
    (78) EXPRESSION -> . CODE SEMICOLON
    (79) EXPRESSION -> . CONTROL_STRUCTURES
    (73) CODE -> . FUNCTION
    (74) CODE -> . INTEGER_DECLARATION
    (75) CODE -> . DECIMAL_DECLARATION
    (76) CODE -> . ASSIGNMENT_DECLARATION
    (77) CODE -> . COMENTARIOLEX
    (46) CONTROL_STRUCTURES -> . IF_STRUCTURE
    (47) CONTROL_STRUCTURES -> . FOR_STRUCTURE
    (48) CONTROL_STRUCTURES -> . WHILE_STRUCTURE
    (49) CONTROL_STRUCTURES -> . SWITCH_STRUCTURE
    (82) FUNCTION -> . VARNAME LPAREN FUNCTION_ARGUMENTS RPAREN
    (90) INTEGER_DECLARATION -> . INTEGER_TYPE VARNAME EQUAL INTEGER
    (91) DECIMAL_DECLARATION -> . DECIMAL_TYPE VARNAME EQUAL DECIMAL
    (92) ASSIGNMENT_DECLARATION -> . VARNAME ASSIGNMENT_OPERATOR SENTENCE
    (105) COMENTARIOLEX -> . COMMENT
    (67) IF_STRUCTURE -> . IF LPAREN COMPARISONS RPAREN LCURL_BRACE EXPRESSIONS RCURL_BRACE
    (68) IF_STRUCTURE -> . IF LPAREN COMPARISONS RPAREN LCURL_BRACE EXPRESSIONS RCURL_BRACE ELSE_STRUCTURE
    (62) FOR_STRUCTURE -> . FOR FOR_ARGUMENTS_STRUCTURE LCURL_BRACE FOR_BODY_STRUCTURE RCURL_BRACE
    (53) WHILE_STRUCTURE -> . WHILE LPAREN COMPARISONS RPAREN LCURL_BRACE BODY_STRUCTURE RCURL_BRACE
    (59) SWITCH_STRUCTURE -> . SWITCH LPAREN COMPARISONS RPAREN LCURL_BRACE SWITCH_BODY RCURL_BRACE
    (85) INTEGER_TYPE -> . INT
    (86) INTEGER_TYPE -> . SHORT
    (87) INTEGER_TYPE -> . LONG
    (88) DECIMAL_TYPE -> . FLOAT
    (89) DECIMAL_TYPE -> . DOUBLE

    VARNAME         shift and go to state 107
    COMMENT         shift and go to state 67
    IF              shift and go to state 47
    FOR             shift and go to state 48
    WHILE           shift and go to state 44
    SWITCH          shift and go to state 46
    INT             shift and go to state 50
    SHORT           shift and go to state 51
    LONG            shift and go to state 52
    FLOAT           shift and go to state 53
    DOUBLE          shift and go to state 54

    EXPRESSIONS                    shift and go to state 193
    EXPRESSION                     shift and go to state 94
    CODE                           shift and go to state 96
    CONTROL_STRUCTURES             shift and go to state 97
    FUNCTION                       shift and go to state 98
    INTEGER_DECLARATION            shift and go to state 99
    DECIMAL_DECLARATION            shift and go to state 100
    ASSIGNMENT_DECLARATION         shift and go to state 101
    COMENTARIOLEX                  shift and go to state 102
    IF_STRUCTURE                   shift and go to state 103
    FOR_STRUCTURE                  shift and go to state 104
    WHILE_STRUCTURE                shift and go to state 105
    SWITCH_STRUCTURE               shift and go to state 106
    INTEGER_TYPE                   shift and go to state 108
    DECIMAL_TYPE                   shift and go to state 109

state 185

    (62) FOR_STRUCTURE -> FOR FOR_ARGUMENTS_STRUCTURE LCURL_BRACE FOR_BODY_STRUCTURE RCURL_BRACE .

    $end            reduce using rule 62 (FOR_STRUCTURE -> FOR FOR_ARGUMENTS_STRUCTURE LCURL_BRACE FOR_BODY_STRUCTURE RCURL_BRACE .)
    VARNAME         reduce using rule 62 (FOR_STRUCTURE -> FOR FOR_ARGUMENTS_STRUCTURE LCURL_BRACE FOR_BODY_STRUCTURE RCURL_BRACE .)
    COMMENT         reduce using rule 62 (FOR_STRUCTURE -> FOR FOR_ARGUMENTS_STRUCTURE LCURL_BRACE FOR_BODY_STRUCTURE RCURL_BRACE .)
    IF              reduce using rule 62 (FOR_STRUCTURE -> FOR FOR_ARGUMENTS_STRUCTURE LCURL_BRACE FOR_BODY_STRUCTURE RCURL_BRACE .)
    FOR             reduce using rule 62 (FOR_STRUCTURE -> FOR FOR_ARGUMENTS_STRUCTURE LCURL_BRACE FOR_BODY_STRUCTURE RCURL_BRACE .)
    WHILE           reduce using rule 62 (FOR_STRUCTURE -> FOR FOR_ARGUMENTS_STRUCTURE LCURL_BRACE FOR_BODY_STRUCTURE RCURL_BRACE .)
    SWITCH          reduce using rule 62 (FOR_STRUCTURE -> FOR FOR_ARGUMENTS_STRUCTURE LCURL_BRACE FOR_BODY_STRUCTURE RCURL_BRACE .)
    INT             reduce using rule 62 (FOR_STRUCTURE -> FOR FOR_ARGUMENTS_STRUCTURE LCURL_BRACE FOR_BODY_STRUCTURE RCURL_BRACE .)
    SHORT           reduce using rule 62 (FOR_STRUCTURE -> FOR FOR_ARGUMENTS_STRUCTURE LCURL_BRACE FOR_BODY_STRUCTURE RCURL_BRACE .)
    LONG            reduce using rule 62 (FOR_STRUCTURE -> FOR FOR_ARGUMENTS_STRUCTURE LCURL_BRACE FOR_BODY_STRUCTURE RCURL_BRACE .)
    FLOAT           reduce using rule 62 (FOR_STRUCTURE -> FOR FOR_ARGUMENTS_STRUCTURE LCURL_BRACE FOR_BODY_STRUCTURE RCURL_BRACE .)
    DOUBLE          reduce using rule 62 (FOR_STRUCTURE -> FOR FOR_ARGUMENTS_STRUCTURE LCURL_BRACE FOR_BODY_STRUCTURE RCURL_BRACE .)
    RCURL_BRACE     reduce using rule 62 (FOR_STRUCTURE -> FOR FOR_ARGUMENTS_STRUCTURE LCURL_BRACE FOR_BODY_STRUCTURE RCURL_BRACE .)
    BREAK           reduce using rule 62 (FOR_STRUCTURE -> FOR FOR_ARGUMENTS_STRUCTURE LCURL_BRACE FOR_BODY_STRUCTURE RCURL_BRACE .)
    CONTINUE        reduce using rule 62 (FOR_STRUCTURE -> FOR FOR_ARGUMENTS_STRUCTURE LCURL_BRACE FOR_BODY_STRUCTURE RCURL_BRACE .)


state 186

    (54) SWITCH_CASE -> CASE INTEGER COLON EXPRESSIONS BREAK . SEMICOLON

    SEMICOLON       shift and go to state 194


state 187

    (55) SWITCH_DEFAULT -> DEFAULT COLON EXPRESSIONS BREAK SEMICOLON .

    $end            reduce using rule 55 (SWITCH_DEFAULT -> DEFAULT COLON EXPRESSIONS BREAK SEMICOLON .)
    RCURL_BRACE     reduce using rule 55 (SWITCH_DEFAULT -> DEFAULT COLON EXPRESSIONS BREAK SEMICOLON .)


state 188

    (53) WHILE_STRUCTURE -> WHILE LPAREN COMPARISONS RPAREN LCURL_BRACE BODY_STRUCTURE . RCURL_BRACE

    RCURL_BRACE     shift and go to state 195


state 189

    (50) BODY_STRUCTURE -> EXPRESSIONS .
    (51) BODY_STRUCTURE -> EXPRESSIONS . BREAK SEMICOLON
    (52) BODY_STRUCTURE -> EXPRESSIONS . CONTINUE SEMICOLON

    RCURL_BRACE     reduce using rule 50 (BODY_STRUCTURE -> EXPRESSIONS .)
    BREAK           shift and go to state 196
    CONTINUE        shift and go to state 197


state 190

    (63) FOR_ARGUMENTS_STRUCTURE -> LPAREN DECLARATIONS SEMICOLON COMPARISONS SEMICOLON BUCLE . RPAREN

    RPAREN          shift and go to state 198


state 191

    (60) BUCLE -> VARIABLELEX . INCREASE

    INCREASE        shift and go to state 112


state 192

    (59) SWITCH_STRUCTURE -> SWITCH LPAREN COMPARISONS RPAREN LCURL_BRACE SWITCH_BODY . RCURL_BRACE

    RCURL_BRACE     shift and go to state 199


state 193

    (67) IF_STRUCTURE -> IF LPAREN COMPARISONS RPAREN LCURL_BRACE EXPRESSIONS . RCURL_BRACE
    (68) IF_STRUCTURE -> IF LPAREN COMPARISONS RPAREN LCURL_BRACE EXPRESSIONS . RCURL_BRACE ELSE_STRUCTURE

    RCURL_BRACE     shift and go to state 200


state 194

    (54) SWITCH_CASE -> CASE INTEGER COLON EXPRESSIONS BREAK SEMICOLON .

    CASE            reduce using rule 54 (SWITCH_CASE -> CASE INTEGER COLON EXPRESSIONS BREAK SEMICOLON .)
    DEFAULT         reduce using rule 54 (SWITCH_CASE -> CASE INTEGER COLON EXPRESSIONS BREAK SEMICOLON .)
    $end            reduce using rule 54 (SWITCH_CASE -> CASE INTEGER COLON EXPRESSIONS BREAK SEMICOLON .)
    RCURL_BRACE     reduce using rule 54 (SWITCH_CASE -> CASE INTEGER COLON EXPRESSIONS BREAK SEMICOLON .)


state 195

    (53) WHILE_STRUCTURE -> WHILE LPAREN COMPARISONS RPAREN LCURL_BRACE BODY_STRUCTURE RCURL_BRACE .

    $end            reduce using rule 53 (WHILE_STRUCTURE -> WHILE LPAREN COMPARISONS RPAREN LCURL_BRACE BODY_STRUCTURE RCURL_BRACE .)
    VARNAME         reduce using rule 53 (WHILE_STRUCTURE -> WHILE LPAREN COMPARISONS RPAREN LCURL_BRACE BODY_STRUCTURE RCURL_BRACE .)
    COMMENT         reduce using rule 53 (WHILE_STRUCTURE -> WHILE LPAREN COMPARISONS RPAREN LCURL_BRACE BODY_STRUCTURE RCURL_BRACE .)
    IF              reduce using rule 53 (WHILE_STRUCTURE -> WHILE LPAREN COMPARISONS RPAREN LCURL_BRACE BODY_STRUCTURE RCURL_BRACE .)
    FOR             reduce using rule 53 (WHILE_STRUCTURE -> WHILE LPAREN COMPARISONS RPAREN LCURL_BRACE BODY_STRUCTURE RCURL_BRACE .)
    WHILE           reduce using rule 53 (WHILE_STRUCTURE -> WHILE LPAREN COMPARISONS RPAREN LCURL_BRACE BODY_STRUCTURE RCURL_BRACE .)
    SWITCH          reduce using rule 53 (WHILE_STRUCTURE -> WHILE LPAREN COMPARISONS RPAREN LCURL_BRACE BODY_STRUCTURE RCURL_BRACE .)
    INT             reduce using rule 53 (WHILE_STRUCTURE -> WHILE LPAREN COMPARISONS RPAREN LCURL_BRACE BODY_STRUCTURE RCURL_BRACE .)
    SHORT           reduce using rule 53 (WHILE_STRUCTURE -> WHILE LPAREN COMPARISONS RPAREN LCURL_BRACE BODY_STRUCTURE RCURL_BRACE .)
    LONG            reduce using rule 53 (WHILE_STRUCTURE -> WHILE LPAREN COMPARISONS RPAREN LCURL_BRACE BODY_STRUCTURE RCURL_BRACE .)
    FLOAT           reduce using rule 53 (WHILE_STRUCTURE -> WHILE LPAREN COMPARISONS RPAREN LCURL_BRACE BODY_STRUCTURE RCURL_BRACE .)
    DOUBLE          reduce using rule 53 (WHILE_STRUCTURE -> WHILE LPAREN COMPARISONS RPAREN LCURL_BRACE BODY_STRUCTURE RCURL_BRACE .)
    RCURL_BRACE     reduce using rule 53 (WHILE_STRUCTURE -> WHILE LPAREN COMPARISONS RPAREN LCURL_BRACE BODY_STRUCTURE RCURL_BRACE .)
    BREAK           reduce using rule 53 (WHILE_STRUCTURE -> WHILE LPAREN COMPARISONS RPAREN LCURL_BRACE BODY_STRUCTURE RCURL_BRACE .)
    CONTINUE        reduce using rule 53 (WHILE_STRUCTURE -> WHILE LPAREN COMPARISONS RPAREN LCURL_BRACE BODY_STRUCTURE RCURL_BRACE .)


state 196

    (51) BODY_STRUCTURE -> EXPRESSIONS BREAK . SEMICOLON

    SEMICOLON       shift and go to state 201


state 197

    (52) BODY_STRUCTURE -> EXPRESSIONS CONTINUE . SEMICOLON

    SEMICOLON       shift and go to state 202


state 198

    (63) FOR_ARGUMENTS_STRUCTURE -> LPAREN DECLARATIONS SEMICOLON COMPARISONS SEMICOLON BUCLE RPAREN .

    $end            reduce using rule 63 (FOR_ARGUMENTS_STRUCTURE -> LPAREN DECLARATIONS SEMICOLON COMPARISONS SEMICOLON BUCLE RPAREN .)
    LCURL_BRACE     reduce using rule 63 (FOR_ARGUMENTS_STRUCTURE -> LPAREN DECLARATIONS SEMICOLON COMPARISONS SEMICOLON BUCLE RPAREN .)


state 199

    (59) SWITCH_STRUCTURE -> SWITCH LPAREN COMPARISONS RPAREN LCURL_BRACE SWITCH_BODY RCURL_BRACE .

    $end            reduce using rule 59 (SWITCH_STRUCTURE -> SWITCH LPAREN COMPARISONS RPAREN LCURL_BRACE SWITCH_BODY RCURL_BRACE .)
    VARNAME         reduce using rule 59 (SWITCH_STRUCTURE -> SWITCH LPAREN COMPARISONS RPAREN LCURL_BRACE SWITCH_BODY RCURL_BRACE .)
    COMMENT         reduce using rule 59 (SWITCH_STRUCTURE -> SWITCH LPAREN COMPARISONS RPAREN LCURL_BRACE SWITCH_BODY RCURL_BRACE .)
    IF              reduce using rule 59 (SWITCH_STRUCTURE -> SWITCH LPAREN COMPARISONS RPAREN LCURL_BRACE SWITCH_BODY RCURL_BRACE .)
    FOR             reduce using rule 59 (SWITCH_STRUCTURE -> SWITCH LPAREN COMPARISONS RPAREN LCURL_BRACE SWITCH_BODY RCURL_BRACE .)
    WHILE           reduce using rule 59 (SWITCH_STRUCTURE -> SWITCH LPAREN COMPARISONS RPAREN LCURL_BRACE SWITCH_BODY RCURL_BRACE .)
    SWITCH          reduce using rule 59 (SWITCH_STRUCTURE -> SWITCH LPAREN COMPARISONS RPAREN LCURL_BRACE SWITCH_BODY RCURL_BRACE .)
    INT             reduce using rule 59 (SWITCH_STRUCTURE -> SWITCH LPAREN COMPARISONS RPAREN LCURL_BRACE SWITCH_BODY RCURL_BRACE .)
    SHORT           reduce using rule 59 (SWITCH_STRUCTURE -> SWITCH LPAREN COMPARISONS RPAREN LCURL_BRACE SWITCH_BODY RCURL_BRACE .)
    LONG            reduce using rule 59 (SWITCH_STRUCTURE -> SWITCH LPAREN COMPARISONS RPAREN LCURL_BRACE SWITCH_BODY RCURL_BRACE .)
    FLOAT           reduce using rule 59 (SWITCH_STRUCTURE -> SWITCH LPAREN COMPARISONS RPAREN LCURL_BRACE SWITCH_BODY RCURL_BRACE .)
    DOUBLE          reduce using rule 59 (SWITCH_STRUCTURE -> SWITCH LPAREN COMPARISONS RPAREN LCURL_BRACE SWITCH_BODY RCURL_BRACE .)
    RCURL_BRACE     reduce using rule 59 (SWITCH_STRUCTURE -> SWITCH LPAREN COMPARISONS RPAREN LCURL_BRACE SWITCH_BODY RCURL_BRACE .)
    BREAK           reduce using rule 59 (SWITCH_STRUCTURE -> SWITCH LPAREN COMPARISONS RPAREN LCURL_BRACE SWITCH_BODY RCURL_BRACE .)
    CONTINUE        reduce using rule 59 (SWITCH_STRUCTURE -> SWITCH LPAREN COMPARISONS RPAREN LCURL_BRACE SWITCH_BODY RCURL_BRACE .)


state 200

    (67) IF_STRUCTURE -> IF LPAREN COMPARISONS RPAREN LCURL_BRACE EXPRESSIONS RCURL_BRACE .
    (68) IF_STRUCTURE -> IF LPAREN COMPARISONS RPAREN LCURL_BRACE EXPRESSIONS RCURL_BRACE . ELSE_STRUCTURE
    (69) ELSE_STRUCTURE -> . ELSE LCURL_BRACE EXPRESSIONS RCURL_BRACE
    (70) ELSE_STRUCTURE -> . ELSE IF_STRUCTURE

    $end            reduce using rule 67 (IF_STRUCTURE -> IF LPAREN COMPARISONS RPAREN LCURL_BRACE EXPRESSIONS RCURL_BRACE .)
    VARNAME         reduce using rule 67 (IF_STRUCTURE -> IF LPAREN COMPARISONS RPAREN LCURL_BRACE EXPRESSIONS RCURL_BRACE .)
    COMMENT         reduce using rule 67 (IF_STRUCTURE -> IF LPAREN COMPARISONS RPAREN LCURL_BRACE EXPRESSIONS RCURL_BRACE .)
    IF              reduce using rule 67 (IF_STRUCTURE -> IF LPAREN COMPARISONS RPAREN LCURL_BRACE EXPRESSIONS RCURL_BRACE .)
    FOR             reduce using rule 67 (IF_STRUCTURE -> IF LPAREN COMPARISONS RPAREN LCURL_BRACE EXPRESSIONS RCURL_BRACE .)
    WHILE           reduce using rule 67 (IF_STRUCTURE -> IF LPAREN COMPARISONS RPAREN LCURL_BRACE EXPRESSIONS RCURL_BRACE .)
    SWITCH          reduce using rule 67 (IF_STRUCTURE -> IF LPAREN COMPARISONS RPAREN LCURL_BRACE EXPRESSIONS RCURL_BRACE .)
    INT             reduce using rule 67 (IF_STRUCTURE -> IF LPAREN COMPARISONS RPAREN LCURL_BRACE EXPRESSIONS RCURL_BRACE .)
    SHORT           reduce using rule 67 (IF_STRUCTURE -> IF LPAREN COMPARISONS RPAREN LCURL_BRACE EXPRESSIONS RCURL_BRACE .)
    LONG            reduce using rule 67 (IF_STRUCTURE -> IF LPAREN COMPARISONS RPAREN LCURL_BRACE EXPRESSIONS RCURL_BRACE .)
    FLOAT           reduce using rule 67 (IF_STRUCTURE -> IF LPAREN COMPARISONS RPAREN LCURL_BRACE EXPRESSIONS RCURL_BRACE .)
    DOUBLE          reduce using rule 67 (IF_STRUCTURE -> IF LPAREN COMPARISONS RPAREN LCURL_BRACE EXPRESSIONS RCURL_BRACE .)
    RCURL_BRACE     reduce using rule 67 (IF_STRUCTURE -> IF LPAREN COMPARISONS RPAREN LCURL_BRACE EXPRESSIONS RCURL_BRACE .)
    BREAK           reduce using rule 67 (IF_STRUCTURE -> IF LPAREN COMPARISONS RPAREN LCURL_BRACE EXPRESSIONS RCURL_BRACE .)
    CONTINUE        reduce using rule 67 (IF_STRUCTURE -> IF LPAREN COMPARISONS RPAREN LCURL_BRACE EXPRESSIONS RCURL_BRACE .)
    ELSE            shift and go to state 85

    ELSE_STRUCTURE                 shift and go to state 203

state 201

    (51) BODY_STRUCTURE -> EXPRESSIONS BREAK SEMICOLON .

    RCURL_BRACE     reduce using rule 51 (BODY_STRUCTURE -> EXPRESSIONS BREAK SEMICOLON .)


state 202

    (52) BODY_STRUCTURE -> EXPRESSIONS CONTINUE SEMICOLON .

    RCURL_BRACE     reduce using rule 52 (BODY_STRUCTURE -> EXPRESSIONS CONTINUE SEMICOLON .)


state 203

    (68) IF_STRUCTURE -> IF LPAREN COMPARISONS RPAREN LCURL_BRACE EXPRESSIONS RCURL_BRACE ELSE_STRUCTURE .

    $end            reduce using rule 68 (IF_STRUCTURE -> IF LPAREN COMPARISONS RPAREN LCURL_BRACE EXPRESSIONS RCURL_BRACE ELSE_STRUCTURE .)
    VARNAME         reduce using rule 68 (IF_STRUCTURE -> IF LPAREN COMPARISONS RPAREN LCURL_BRACE EXPRESSIONS RCURL_BRACE ELSE_STRUCTURE .)
    COMMENT         reduce using rule 68 (IF_STRUCTURE -> IF LPAREN COMPARISONS RPAREN LCURL_BRACE EXPRESSIONS RCURL_BRACE ELSE_STRUCTURE .)
    IF              reduce using rule 68 (IF_STRUCTURE -> IF LPAREN COMPARISONS RPAREN LCURL_BRACE EXPRESSIONS RCURL_BRACE ELSE_STRUCTURE .)
    FOR             reduce using rule 68 (IF_STRUCTURE -> IF LPAREN COMPARISONS RPAREN LCURL_BRACE EXPRESSIONS RCURL_BRACE ELSE_STRUCTURE .)
    WHILE           reduce using rule 68 (IF_STRUCTURE -> IF LPAREN COMPARISONS RPAREN LCURL_BRACE EXPRESSIONS RCURL_BRACE ELSE_STRUCTURE .)
    SWITCH          reduce using rule 68 (IF_STRUCTURE -> IF LPAREN COMPARISONS RPAREN LCURL_BRACE EXPRESSIONS RCURL_BRACE ELSE_STRUCTURE .)
    INT             reduce using rule 68 (IF_STRUCTURE -> IF LPAREN COMPARISONS RPAREN LCURL_BRACE EXPRESSIONS RCURL_BRACE ELSE_STRUCTURE .)
    SHORT           reduce using rule 68 (IF_STRUCTURE -> IF LPAREN COMPARISONS RPAREN LCURL_BRACE EXPRESSIONS RCURL_BRACE ELSE_STRUCTURE .)
    LONG            reduce using rule 68 (IF_STRUCTURE -> IF LPAREN COMPARISONS RPAREN LCURL_BRACE EXPRESSIONS RCURL_BRACE ELSE_STRUCTURE .)
    FLOAT           reduce using rule 68 (IF_STRUCTURE -> IF LPAREN COMPARISONS RPAREN LCURL_BRACE EXPRESSIONS RCURL_BRACE ELSE_STRUCTURE .)
    DOUBLE          reduce using rule 68 (IF_STRUCTURE -> IF LPAREN COMPARISONS RPAREN LCURL_BRACE EXPRESSIONS RCURL_BRACE ELSE_STRUCTURE .)
    RCURL_BRACE     reduce using rule 68 (IF_STRUCTURE -> IF LPAREN COMPARISONS RPAREN LCURL_BRACE EXPRESSIONS RCURL_BRACE ELSE_STRUCTURE .)
    BREAK           reduce using rule 68 (IF_STRUCTURE -> IF LPAREN COMPARISONS RPAREN LCURL_BRACE EXPRESSIONS RCURL_BRACE ELSE_STRUCTURE .)
    CONTINUE        reduce using rule 68 (IF_STRUCTURE -> IF LPAREN COMPARISONS RPAREN LCURL_BRACE EXPRESSIONS RCURL_BRACE ELSE_STRUCTURE .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: reduce/reduce conflict in state 3 resolved using rule (ROOT -> DEFINE)
WARNING: rejected rule (PREPROCESOR_DIRECTIVE -> DEFINE) in state 3
WARNING: reduce/reduce conflict in state 4 resolved using rule (ROOT -> INCLUDE)
WARNING: rejected rule (PREPROCESOR_DIRECTIVE -> INCLUDE) in state 4
WARNING: reduce/reduce conflict in state 6 resolved using rule (ROOT -> NUMBER)
WARNING: rejected rule (VALUE -> NUMBER) in state 6
WARNING: reduce/reduce conflict in state 6 resolved using rule (VALUE -> NUMBER)
WARNING: rejected rule (SENTENCE -> NUMBER) in state 6
WARNING: reduce/reduce conflict in state 6 resolved using rule (ROOT -> NUMBER)
WARNING: rejected rule (SENTENCE -> NUMBER) in state 6
WARNING: reduce/reduce conflict in state 7 resolved using rule (ROOT -> CONTROL_STRUCTURES)
WARNING: rejected rule (EXPRESSION -> CONTROL_STRUCTURES) in state 7
WARNING: reduce/reduce conflict in state 8 resolved using rule (ROOT -> WHILE_STRUCTURE)
WARNING: rejected rule (CONTROL_STRUCTURES -> WHILE_STRUCTURE) in state 8
WARNING: reduce/reduce conflict in state 9 resolved using rule (ROOT -> SWITCH_STRUCTURE)
WARNING: rejected rule (CONTROL_STRUCTURES -> SWITCH_STRUCTURE) in state 9
WARNING: reduce/reduce conflict in state 10 resolved using rule (ROOT -> IF_STRUCTURE)
WARNING: rejected rule (CONTROL_STRUCTURES -> IF_STRUCTURE) in state 10
WARNING: reduce/reduce conflict in state 11 resolved using rule (ROOT -> FOR_STRUCTURE)
WARNING: rejected rule (CONTROL_STRUCTURES -> FOR_STRUCTURE) in state 11
WARNING: reduce/reduce conflict in state 13 resolved using rule (ROOT -> EXPRESSION)
WARNING: rejected rule (EXPRESSIONS -> EXPRESSION) in state 13
WARNING: reduce/reduce conflict in state 14 resolved using rule (ROOT -> EXPRESSIONS)
WARNING: rejected rule (FOR_BODY_STRUCTURE -> EXPRESSIONS) in state 14
WARNING: reduce/reduce conflict in state 15 resolved using rule (ROOT -> FUNCTION)
WARNING: rejected rule (CODE -> FUNCTION) in state 15
WARNING: reduce/reduce conflict in state 18 resolved using rule (ROOT -> INTEGER_DECLARATION)
WARNING: rejected rule (CODE -> INTEGER_DECLARATION) in state 18
WARNING: reduce/reduce conflict in state 18 resolved using rule (ROOT -> INTEGER_DECLARATION)
WARNING: rejected rule (DECLARATIONS -> INTEGER_DECLARATION) in state 18
WARNING: reduce/reduce conflict in state 19 resolved using rule (ROOT -> DECIMAL_DECLARATION)
WARNING: rejected rule (CODE -> DECIMAL_DECLARATION) in state 19
WARNING: reduce/reduce conflict in state 19 resolved using rule (ROOT -> DECIMAL_DECLARATION)
WARNING: rejected rule (DECLARATIONS -> DECIMAL_DECLARATION) in state 19
WARNING: reduce/reduce conflict in state 20 resolved using rule (ROOT -> ASSIGNMENT_DECLARATION)
WARNING: rejected rule (CODE -> ASSIGNMENT_DECLARATION) in state 20
WARNING: reduce/reduce conflict in state 22 resolved using rule (ROOT -> COMENTARIOLEX)
WARNING: rejected rule (CODE -> COMENTARIOLEX) in state 22
WARNING: reduce/reduce conflict in state 25 resolved using rule (ROOT -> OPERATION)
WARNING: rejected rule (OPERATIONS -> OPERATION) in state 25
WARNING: reduce/reduce conflict in state 28 resolved using rule (ROOT -> COMPARISON)
WARNING: rejected rule (COMPARISONS -> COMPARISON) in state 28
WARNING: reduce/reduce conflict in state 29 resolved using rule (ROOT -> COMPARISONS)
WARNING: rejected rule (FUNCTION_ARGUMENTS -> COMPARISONS) in state 29
WARNING: reduce/reduce conflict in state 31 resolved using rule (ROOT -> SENTENCE)
WARNING: rejected rule (SENTENCES -> SENTENCE) in state 31
WARNING: reduce/reduce conflict in state 49 resolved using rule (VARIABLELEX -> VARNAME)
WARNING: rejected rule (SENTENCE -> VARNAME) in state 49
WARNING: reduce/reduce conflict in state 149 resolved using rule (VALUE -> NUMBER)
WARNING: rejected rule (SENTENCE -> NUMBER) in state 149
WARNING: reduce/reduce conflict in state 164 resolved using rule (VALUE -> NUMBER)
WARNING: rejected rule (SENTENCE -> NUMBER) in state 164
WARNING: Rule (PREPROCESOR_DIRECTIVE -> DEFINE) is never reduced
WARNING: Rule (PREPROCESOR_DIRECTIVE -> INCLUDE) is never reduced
