Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    AMPERSAND
    AND
    AND_EQUAL
    AUTO
    BACKSLASH
    BACKSPACE
    BREAK
    B_AND
    B_COMPLEMENT
    B_OR
    B_XOR
    CASE
    CHARACTER
    COLON
    COMMA
    COMPLEMENT_EQUAL
    CONST
    CONTINUE
    DEFAULT
    DIV_EQUAL
    DO
    DOT
    DOUBLE_APOS
    DOUBLE_QUOTE
    ENUM
    EQUAL_TO
    EXTERN
    FF_PAGEBREAK
    FS_CHAR
    FS_DOUBLE
    FS_FLOAT
    FS_HEX
    FS_INT
    FS_LONG
    FS_LONG_DOUBLE
    FS_OCT
    FS_OCT_LONG
    FS_POINTER
    FS_SCI_NOTATION
    FS_STRING
    FS_UNSIGNED_INT
    FS_UNSIGNED_LONG
    GOTO
    GREATER_EQUAL
    GREATER_THAN
    HTAB
    IGNORE
    LBRACKET
    LCURL_BRACE
    LESS_EQUAL
    LESS_THAN
    LPAREN
    MINUS_EQUAL
    MOD_EQUAL
    NEWLINE
    NOT
    NOT_EQUAL
    NULL
    OR
    OR_EQUAL
    PLUS_EQUAL
    PP_DATE
    PP_DTMACRO
    PP_ERROR
    PP_FILE
    PP_IF
    PP_IFDEF
    PP_IFNDEF
    PP_LINE
    PP_PRAGMA
    PP_STMACRO
    PP_TIME
    PP_TIMESTAMP
    PP_UNDEF
    QUESTIONMARK
    RBRACKET
    RCURL_BRACE
    REGISTER
    RETURN
    RPAREN
    SEMICOLON
    SHIFTL_EQUAL
    SHIFTR_EQUAL
    SHIFT_LEFT
    SHIFT_RIGHT
    SIGNED
    SINGLE_APOS
    SINGLE_QUOTE
    SIZEOF
    STATIC
    STRING
    STRUCT
    TILDE
    TIMES_EQUAL
    TYPEDEF
    UNION
    UNSIGNED
    VOID
    VOLTILE
    VTAB
    XOR_EQUAL

Grammar

Rule 0     S' -> EXPRESSION
Rule 1     EXPRESSION -> COMENTARIOLEX
Rule 2     EXPRESSION -> VARIABLELEX
Rule 3     EXPRESSION -> OPERATION
Rule 4     EXPRESSION -> DECLARATION
Rule 5     EXPRESSION -> SENTENCIAS
Rule 6     EXPRESSION -> INCLUDE
Rule 7     EXPRESSION -> PREPROCCESOR_DIRECTIVE
Rule 8     PREPROCCESOR_DIRECTIVE -> DEFINE
Rule 9     PREPROCCESOR_DIRECTIVE -> INCLUDE
Rule 10    DEFINE -> PP_DEFINE VARIABLELEX VALUE
Rule 11    INCLUDE -> PP_INCLUDE HEADER_LIB
Rule 12    VALUE -> INTEGER
Rule 13    VALUE -> DECIMAL
Rule 14    SENTENCIAS -> IF
Rule 15    SENTENCIAS -> ELSEIF
Rule 16    SENTENCIAS -> ELSE
Rule 17    SENTENCIAS -> FOR
Rule 18    SENTENCIAS -> WHILE
Rule 19    SENTENCIAS -> SWITCH
Rule 20    DATA_TYPE -> INTEGER_TYPE
Rule 21    DATA_TYPE -> DECIMAL_TYPE
Rule 22    DATA_TYPE -> CHAR
Rule 23    INTEGER_TYPE -> INT
Rule 24    INTEGER_TYPE -> SHORT
Rule 25    INTEGER_TYPE -> LONG
Rule 26    DECIMAL_TYPE -> FLOAT
Rule 27    DECIMAL_TYPE -> DOUBLE
Rule 28    DECLARATION -> DATA_TYPE VARNAME EQUAL INTEGER
Rule 29    INTEGER_DECLARATION -> INTEGER_TYPE VARNAME EQUAL INTEGER
Rule 30    DECIMAL_DECLARATION -> DECIMAL_TYPE VARNAME EQUAL DECIMAL
Rule 31    COMENTARIOLEX -> COMMENT
Rule 32    VARIABLELEX -> VARNAME
Rule 33    OPERADOR -> PLUS
Rule 34    OPERADOR -> MINUS
Rule 35    OPERADOR -> TIMES
Rule 36    OPERADOR -> MODULUS
Rule 37    OPERADOR -> DIVIDE
Rule 38    OPERATION -> VALUE OPERADOR VALUE

Terminals, with rules where they appear

AMPERSAND            : 
AND                  : 
AND_EQUAL            : 
AUTO                 : 
BACKSLASH            : 
BACKSPACE            : 
BREAK                : 
B_AND                : 
B_COMPLEMENT         : 
B_OR                 : 
B_XOR                : 
CASE                 : 
CHAR                 : 22
CHARACTER            : 
COLON                : 
COMMA                : 
COMMENT              : 31
COMPLEMENT_EQUAL     : 
CONST                : 
CONTINUE             : 
DECIMAL              : 13 30
DEFAULT              : 
DIVIDE               : 37
DIV_EQUAL            : 
DO                   : 
DOT                  : 
DOUBLE               : 27
DOUBLE_APOS          : 
DOUBLE_QUOTE         : 
ELSE                 : 16
ELSEIF               : 15
ENUM                 : 
EQUAL                : 28 29 30
EQUAL_TO             : 
EXTERN               : 
FF_PAGEBREAK         : 
FLOAT                : 26
FOR                  : 17
FS_CHAR              : 
FS_DOUBLE            : 
FS_FLOAT             : 
FS_HEX               : 
FS_INT               : 
FS_LONG              : 
FS_LONG_DOUBLE       : 
FS_OCT               : 
FS_OCT_LONG          : 
FS_POINTER           : 
FS_SCI_NOTATION      : 
FS_STRING            : 
FS_UNSIGNED_INT      : 
FS_UNSIGNED_LONG     : 
GOTO                 : 
GREATER_EQUAL        : 
GREATER_THAN         : 
HEADER_LIB           : 11
HTAB                 : 
IF                   : 14
IGNORE               : 
INT                  : 23
INTEGER              : 12 28 29
LBRACKET             : 
LCURL_BRACE          : 
LESS_EQUAL           : 
LESS_THAN            : 
LONG                 : 25
LPAREN               : 
MINUS                : 34
MINUS_EQUAL          : 
MODULUS              : 36
MOD_EQUAL            : 
NEWLINE              : 
NOT                  : 
NOT_EQUAL            : 
NULL                 : 
OR                   : 
OR_EQUAL             : 
PLUS                 : 33
PLUS_EQUAL           : 
PP_DATE              : 
PP_DEFINE            : 10
PP_DTMACRO           : 
PP_ERROR             : 
PP_FILE              : 
PP_IF                : 
PP_IFDEF             : 
PP_IFNDEF            : 
PP_INCLUDE           : 11
PP_LINE              : 
PP_PRAGMA            : 
PP_STMACRO           : 
PP_TIME              : 
PP_TIMESTAMP         : 
PP_UNDEF             : 
QUESTIONMARK         : 
RBRACKET             : 
RCURL_BRACE          : 
REGISTER             : 
RETURN               : 
RPAREN               : 
SEMICOLON            : 
SHIFTL_EQUAL         : 
SHIFTR_EQUAL         : 
SHIFT_LEFT           : 
SHIFT_RIGHT          : 
SHORT                : 24
SIGNED               : 
SINGLE_APOS          : 
SINGLE_QUOTE         : 
SIZEOF               : 
STATIC               : 
STRING               : 
STRUCT               : 
SWITCH               : 19
TILDE                : 
TIMES                : 35
TIMES_EQUAL          : 
TYPEDEF              : 
UNION                : 
UNSIGNED             : 
VARNAME              : 28 29 30 32
VOID                 : 
VOLTILE              : 
VTAB                 : 
WHILE                : 18
XOR_EQUAL            : 
error                : 

Nonterminals, with rules where they appear

COMENTARIOLEX        : 1
DATA_TYPE            : 28
DECIMAL_DECLARATION  : 
DECIMAL_TYPE         : 21 30
DECLARATION          : 4
DEFINE               : 8
EXPRESSION           : 0
INCLUDE              : 6 9
INTEGER_DECLARATION  : 
INTEGER_TYPE         : 20 29
OPERADOR             : 38
OPERATION            : 3
PREPROCCESOR_DIRECTIVE : 7
SENTENCIAS           : 5
VALUE                : 10 38 38
VARIABLELEX          : 2 10

Parsing method: LALR

state 0

    (0) S' -> . EXPRESSION
    (1) EXPRESSION -> . COMENTARIOLEX
    (2) EXPRESSION -> . VARIABLELEX
    (3) EXPRESSION -> . OPERATION
    (4) EXPRESSION -> . DECLARATION
    (5) EXPRESSION -> . SENTENCIAS
    (6) EXPRESSION -> . INCLUDE
    (7) EXPRESSION -> . PREPROCCESOR_DIRECTIVE
    (31) COMENTARIOLEX -> . COMMENT
    (32) VARIABLELEX -> . VARNAME
    (38) OPERATION -> . VALUE OPERADOR VALUE
    (28) DECLARATION -> . DATA_TYPE VARNAME EQUAL INTEGER
    (14) SENTENCIAS -> . IF
    (15) SENTENCIAS -> . ELSEIF
    (16) SENTENCIAS -> . ELSE
    (17) SENTENCIAS -> . FOR
    (18) SENTENCIAS -> . WHILE
    (19) SENTENCIAS -> . SWITCH
    (11) INCLUDE -> . PP_INCLUDE HEADER_LIB
    (8) PREPROCCESOR_DIRECTIVE -> . DEFINE
    (9) PREPROCCESOR_DIRECTIVE -> . INCLUDE
    (12) VALUE -> . INTEGER
    (13) VALUE -> . DECIMAL
    (20) DATA_TYPE -> . INTEGER_TYPE
    (21) DATA_TYPE -> . DECIMAL_TYPE
    (22) DATA_TYPE -> . CHAR
    (10) DEFINE -> . PP_DEFINE VARIABLELEX VALUE
    (23) INTEGER_TYPE -> . INT
    (24) INTEGER_TYPE -> . SHORT
    (25) INTEGER_TYPE -> . LONG
    (26) DECIMAL_TYPE -> . FLOAT
    (27) DECIMAL_TYPE -> . DOUBLE

    COMMENT         shift and go to state 9
    VARNAME         shift and go to state 10
    IF              shift and go to state 14
    ELSEIF          shift and go to state 15
    ELSE            shift and go to state 16
    FOR             shift and go to state 17
    WHILE           shift and go to state 18
    SWITCH          shift and go to state 19
    PP_INCLUDE      shift and go to state 20
    INTEGER         shift and go to state 13
    DECIMAL         shift and go to state 22
    CHAR            shift and go to state 25
    PP_DEFINE       shift and go to state 26
    INT             shift and go to state 27
    SHORT           shift and go to state 28
    LONG            shift and go to state 29
    FLOAT           shift and go to state 30
    DOUBLE          shift and go to state 31

    EXPRESSION                     shift and go to state 1
    COMENTARIOLEX                  shift and go to state 2
    VARIABLELEX                    shift and go to state 3
    OPERATION                      shift and go to state 4
    DECLARATION                    shift and go to state 5
    SENTENCIAS                     shift and go to state 6
    INCLUDE                        shift and go to state 7
    PREPROCCESOR_DIRECTIVE         shift and go to state 8
    VALUE                          shift and go to state 11
    DATA_TYPE                      shift and go to state 12
    DEFINE                         shift and go to state 21
    INTEGER_TYPE                   shift and go to state 23
    DECIMAL_TYPE                   shift and go to state 24

state 1

    (0) S' -> EXPRESSION .



state 2

    (1) EXPRESSION -> COMENTARIOLEX .

    $end            reduce using rule 1 (EXPRESSION -> COMENTARIOLEX .)


state 3

    (2) EXPRESSION -> VARIABLELEX .

    $end            reduce using rule 2 (EXPRESSION -> VARIABLELEX .)


state 4

    (3) EXPRESSION -> OPERATION .

    $end            reduce using rule 3 (EXPRESSION -> OPERATION .)


state 5

    (4) EXPRESSION -> DECLARATION .

    $end            reduce using rule 4 (EXPRESSION -> DECLARATION .)


state 6

    (5) EXPRESSION -> SENTENCIAS .

    $end            reduce using rule 5 (EXPRESSION -> SENTENCIAS .)


state 7

    (6) EXPRESSION -> INCLUDE .
    (9) PREPROCCESOR_DIRECTIVE -> INCLUDE .

  ! reduce/reduce conflict for $end resolved using rule 6 (EXPRESSION -> INCLUDE .)
    $end            reduce using rule 6 (EXPRESSION -> INCLUDE .)

  ! $end            [ reduce using rule 9 (PREPROCCESOR_DIRECTIVE -> INCLUDE .) ]


state 8

    (7) EXPRESSION -> PREPROCCESOR_DIRECTIVE .

    $end            reduce using rule 7 (EXPRESSION -> PREPROCCESOR_DIRECTIVE .)


state 9

    (31) COMENTARIOLEX -> COMMENT .

    $end            reduce using rule 31 (COMENTARIOLEX -> COMMENT .)


state 10

    (32) VARIABLELEX -> VARNAME .

    $end            reduce using rule 32 (VARIABLELEX -> VARNAME .)
    INTEGER         reduce using rule 32 (VARIABLELEX -> VARNAME .)
    DECIMAL         reduce using rule 32 (VARIABLELEX -> VARNAME .)


state 11

    (38) OPERATION -> VALUE . OPERADOR VALUE
    (33) OPERADOR -> . PLUS
    (34) OPERADOR -> . MINUS
    (35) OPERADOR -> . TIMES
    (36) OPERADOR -> . MODULUS
    (37) OPERADOR -> . DIVIDE

    PLUS            shift and go to state 33
    MINUS           shift and go to state 34
    TIMES           shift and go to state 35
    MODULUS         shift and go to state 36
    DIVIDE          shift and go to state 37

    OPERADOR                       shift and go to state 32

state 12

    (28) DECLARATION -> DATA_TYPE . VARNAME EQUAL INTEGER

    VARNAME         shift and go to state 38


state 13

    (12) VALUE -> INTEGER .

    PLUS            reduce using rule 12 (VALUE -> INTEGER .)
    MINUS           reduce using rule 12 (VALUE -> INTEGER .)
    TIMES           reduce using rule 12 (VALUE -> INTEGER .)
    MODULUS         reduce using rule 12 (VALUE -> INTEGER .)
    DIVIDE          reduce using rule 12 (VALUE -> INTEGER .)
    $end            reduce using rule 12 (VALUE -> INTEGER .)


state 14

    (14) SENTENCIAS -> IF .

    $end            reduce using rule 14 (SENTENCIAS -> IF .)


state 15

    (15) SENTENCIAS -> ELSEIF .

    $end            reduce using rule 15 (SENTENCIAS -> ELSEIF .)


state 16

    (16) SENTENCIAS -> ELSE .

    $end            reduce using rule 16 (SENTENCIAS -> ELSE .)


state 17

    (17) SENTENCIAS -> FOR .

    $end            reduce using rule 17 (SENTENCIAS -> FOR .)


state 18

    (18) SENTENCIAS -> WHILE .

    $end            reduce using rule 18 (SENTENCIAS -> WHILE .)


state 19

    (19) SENTENCIAS -> SWITCH .

    $end            reduce using rule 19 (SENTENCIAS -> SWITCH .)


state 20

    (11) INCLUDE -> PP_INCLUDE . HEADER_LIB

    HEADER_LIB      shift and go to state 39


state 21

    (8) PREPROCCESOR_DIRECTIVE -> DEFINE .

    $end            reduce using rule 8 (PREPROCCESOR_DIRECTIVE -> DEFINE .)


state 22

    (13) VALUE -> DECIMAL .

    PLUS            reduce using rule 13 (VALUE -> DECIMAL .)
    MINUS           reduce using rule 13 (VALUE -> DECIMAL .)
    TIMES           reduce using rule 13 (VALUE -> DECIMAL .)
    MODULUS         reduce using rule 13 (VALUE -> DECIMAL .)
    DIVIDE          reduce using rule 13 (VALUE -> DECIMAL .)
    $end            reduce using rule 13 (VALUE -> DECIMAL .)


state 23

    (20) DATA_TYPE -> INTEGER_TYPE .

    VARNAME         reduce using rule 20 (DATA_TYPE -> INTEGER_TYPE .)


state 24

    (21) DATA_TYPE -> DECIMAL_TYPE .

    VARNAME         reduce using rule 21 (DATA_TYPE -> DECIMAL_TYPE .)


state 25

    (22) DATA_TYPE -> CHAR .

    VARNAME         reduce using rule 22 (DATA_TYPE -> CHAR .)


state 26

    (10) DEFINE -> PP_DEFINE . VARIABLELEX VALUE
    (32) VARIABLELEX -> . VARNAME

    VARNAME         shift and go to state 10

    VARIABLELEX                    shift and go to state 40

state 27

    (23) INTEGER_TYPE -> INT .

    VARNAME         reduce using rule 23 (INTEGER_TYPE -> INT .)


state 28

    (24) INTEGER_TYPE -> SHORT .

    VARNAME         reduce using rule 24 (INTEGER_TYPE -> SHORT .)


state 29

    (25) INTEGER_TYPE -> LONG .

    VARNAME         reduce using rule 25 (INTEGER_TYPE -> LONG .)


state 30

    (26) DECIMAL_TYPE -> FLOAT .

    VARNAME         reduce using rule 26 (DECIMAL_TYPE -> FLOAT .)


state 31

    (27) DECIMAL_TYPE -> DOUBLE .

    VARNAME         reduce using rule 27 (DECIMAL_TYPE -> DOUBLE .)


state 32

    (38) OPERATION -> VALUE OPERADOR . VALUE
    (12) VALUE -> . INTEGER
    (13) VALUE -> . DECIMAL

    INTEGER         shift and go to state 13
    DECIMAL         shift and go to state 22

    VALUE                          shift and go to state 41

state 33

    (33) OPERADOR -> PLUS .

    INTEGER         reduce using rule 33 (OPERADOR -> PLUS .)
    DECIMAL         reduce using rule 33 (OPERADOR -> PLUS .)


state 34

    (34) OPERADOR -> MINUS .

    INTEGER         reduce using rule 34 (OPERADOR -> MINUS .)
    DECIMAL         reduce using rule 34 (OPERADOR -> MINUS .)


state 35

    (35) OPERADOR -> TIMES .

    INTEGER         reduce using rule 35 (OPERADOR -> TIMES .)
    DECIMAL         reduce using rule 35 (OPERADOR -> TIMES .)


state 36

    (36) OPERADOR -> MODULUS .

    INTEGER         reduce using rule 36 (OPERADOR -> MODULUS .)
    DECIMAL         reduce using rule 36 (OPERADOR -> MODULUS .)


state 37

    (37) OPERADOR -> DIVIDE .

    INTEGER         reduce using rule 37 (OPERADOR -> DIVIDE .)
    DECIMAL         reduce using rule 37 (OPERADOR -> DIVIDE .)


state 38

    (28) DECLARATION -> DATA_TYPE VARNAME . EQUAL INTEGER

    EQUAL           shift and go to state 42


state 39

    (11) INCLUDE -> PP_INCLUDE HEADER_LIB .

    $end            reduce using rule 11 (INCLUDE -> PP_INCLUDE HEADER_LIB .)


state 40

    (10) DEFINE -> PP_DEFINE VARIABLELEX . VALUE
    (12) VALUE -> . INTEGER
    (13) VALUE -> . DECIMAL

    INTEGER         shift and go to state 13
    DECIMAL         shift and go to state 22

    VALUE                          shift and go to state 43

state 41

    (38) OPERATION -> VALUE OPERADOR VALUE .

    $end            reduce using rule 38 (OPERATION -> VALUE OPERADOR VALUE .)


state 42

    (28) DECLARATION -> DATA_TYPE VARNAME EQUAL . INTEGER

    INTEGER         shift and go to state 44


state 43

    (10) DEFINE -> PP_DEFINE VARIABLELEX VALUE .

    $end            reduce using rule 10 (DEFINE -> PP_DEFINE VARIABLELEX VALUE .)


state 44

    (28) DECLARATION -> DATA_TYPE VARNAME EQUAL INTEGER .

    $end            reduce using rule 28 (DECLARATION -> DATA_TYPE VARNAME EQUAL INTEGER .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: reduce/reduce conflict in state 7 resolved using rule (EXPRESSION -> INCLUDE)
WARNING: rejected rule (PREPROCCESOR_DIRECTIVE -> INCLUDE) in state 7
WARNING: Rule (PREPROCCESOR_DIRECTIVE -> INCLUDE) is never reduced
