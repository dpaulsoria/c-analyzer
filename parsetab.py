
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'AMPERSAND AND AND_EQUAL AUTO BACKSLASH BACKSPACE BREAK B_AND B_COMPLEMENT B_OR B_XOR CASE CHAR CHARACTER COLON COMMA COMMENT COMPLEMENT_EQUAL CONST CONTINUE DECIMAL DEFAULT DIVIDE DIV_EQUAL DO DOT DOUBLE DOUBLE_APOS DOUBLE_QUOTE ELSE ELSEIF ENUM EQUAL EQUAL_TO EXTERN FF_PAGEBREAK FLOAT FOR FS_CHAR FS_DOUBLE FS_FLOAT FS_HEX FS_INT FS_LONG FS_LONG_DOUBLE FS_OCT FS_OCT_LONG FS_POINTER FS_SCI_NOTATION FS_STRING FS_UNSIGNED_INT FS_UNSIGNED_LONG GOTO GREATER_EQUAL GREATER_THAN HEADER_LIB HTAB IF IGNORE INT INTEGER LBRACKET LCURL_BRACE LESS_EQUAL LESS_THAN LONG LPAREN MINUS MINUS_EQUAL MODULUS MOD_EQUAL NEWLINE NOT NOT_EQUAL NULL OR OR_EQUAL PLUS PLUS_EQUAL PP_DATE PP_DEFINE PP_DTMACRO PP_ERROR PP_FILE PP_IF PP_IFDEF PP_IFNDEF PP_INCLUDE PP_LINE PP_PRAGMA PP_STMACRO PP_TIME PP_TIMESTAMP PP_UNDEF QUESTIONMARK RBRACKET RCURL_BRACE REGISTER RETURN RPAREN SEMICOLON SHIFTL_EQUAL SHIFTR_EQUAL SHIFT_LEFT SHIFT_RIGHT SHORT SIGNED SINGLE_APOS SINGLE_QUOTE SIZEOF STATIC STRING STRUCT SWITCH TILDE TIMES TIMES_EQUAL TYPEDEF UNION UNSIGNED VARNAME VOID VOLTILE VTAB WHILE XOR_EQUAL\n    EXPRESSION : COMENTARIOLEX\n                | VARIABLELEX \n                | OPERATION\n                | OPERATIONS\n                | OPERATOR\n                | SENTENCIAS\n                | INCLUDE\n                | DEFINE\n                | PREPROCESOR_DIRECTIVE\n                | LOGICAL_OPERATOR\n                | COMPARISONS\n                | COMPARISON\n                | COMPARISON_OPERATOR\n                | DECIMAL_DECLARATION\n                | INTEGER_DECLARATION\n                | DECIMAL_TYPE\n                | INTEGER_TYPE\n\n    \n    PREPROCESOR_DIRECTIVE : DEFINE\n                            | INCLUDE\n    \n    DEFINE : PP_DEFINE VARIABLELEX VALUE\n    \n    \n    INCLUDE : PP_INCLUDE HEADER_LIB\n    \n    VALUE : NUMBER \n            | STRING\n    \n    NUMBER : INTEGER\n            | DECIMAL\n    \n    SENTENCIAS : IF\n                | ELSEIF\n                | ELSE\n                | FOR\n                | WHILE\n                | SWITCH\n    \n    INTEGER_TYPE : INT\n                | SHORT\n                | LONG\n    \n    DECIMAL_TYPE : FLOAT\n                | DOUBLE\n    \n    INTEGER_DECLARATION : INTEGER_TYPE VARNAME EQUAL INTEGER\n    \n    DECIMAL_DECLARATION : DECIMAL_TYPE VARNAME EQUAL DECIMAL\n    \n    COMENTARIOLEX : COMMENT\n    \n    VARIABLELEX : VARNAME\n    \n    OPERATOR : PLUS\n              | MINUS\n              | TIMES\n              | MODULUS\n              | DIVIDE\n    \n    OPERATION : NUMBER OPERATOR NUMBER\n    \n    OPERATIONS : OPERATION\n                | OPERATION OPERATOR OPERATIONS\n    \n    COMPARISON_OPERATOR : EQUAL_TO\n                        | NOT_EQUAL\n                        | GREATER_THAN\n                        | LESS_THAN\n                        | GREATER_EQUAL\n                        | LESS_EQUAL\n    \n    COMPARISON : VALUE COMPARISON_OPERATOR VALUE\n    \n    COMPARISONS : COMPARISON\n                | COMPARISON LOGICAL_OPERATOR COMPARISONS\n    \n    LOGICAL_OPERATOR : AND\n                    | OR\n                    | NOT\n    '
    
_lr_action_items = {'COMMENT':([0,],[19,]),'VARNAME':([0,17,18,34,47,48,49,50,51,],[20,55,56,20,-35,-36,-32,-33,-34,]),'PLUS':([0,4,21,45,46,61,63,69,],[22,22,22,-25,-24,22,22,-46,]),'MINUS':([0,4,21,45,46,61,63,69,],[23,23,23,-25,-24,23,23,-46,]),'TIMES':([0,4,21,45,46,61,63,69,],[24,24,24,-25,-24,24,24,-46,]),'MODULUS':([0,4,21,45,46,61,63,69,],[25,25,25,-25,-24,25,25,-46,]),'DIVIDE':([0,4,21,45,46,61,63,69,],[26,26,26,-25,-24,26,26,-46,]),'IF':([0,],[27,]),'ELSEIF':([0,],[28,]),'ELSE':([0,],[29,]),'FOR':([0,],[30,]),'WHILE':([0,],[31,]),'SWITCH':([0,],[32,]),'PP_INCLUDE':([0,],[33,]),'PP_DEFINE':([0,],[34,]),'AND':([0,13,45,46,52,64,66,71,],[36,36,-25,-24,-23,36,-22,-55,]),'OR':([0,13,45,46,52,64,66,71,],[37,37,-25,-24,-23,37,-22,-55,]),'NOT':([0,13,45,46,52,64,66,71,],[38,38,-25,-24,-23,38,-22,-55,]),'EQUAL_TO':([0,21,35,45,46,52,66,],[39,-22,39,-25,-24,-23,-22,]),'NOT_EQUAL':([0,21,35,45,46,52,66,],[40,-22,40,-25,-24,-23,-22,]),'GREATER_THAN':([0,21,35,45,46,52,66,],[41,-22,41,-25,-24,-23,-22,]),'LESS_THAN':([0,21,35,45,46,52,66,],[42,-22,42,-25,-24,-23,-22,]),'GREATER_EQUAL':([0,21,35,45,46,52,66,],[43,-22,43,-25,-24,-23,-22,]),'LESS_EQUAL':([0,21,35,45,46,52,66,],[44,-22,44,-25,-24,-23,-22,]),'FLOAT':([0,],[47,]),'DOUBLE':([0,],[48,]),'INT':([0,],[49,]),'SHORT':([0,],[50,]),'LONG':([0,],[51,]),'INTEGER':([0,20,22,23,24,25,26,36,37,38,39,40,41,42,43,44,53,54,57,59,60,68,],[46,-40,-41,-42,-43,-44,-45,-58,-59,-60,-49,-50,-51,-52,-53,-54,46,46,46,46,46,73,]),'DECIMAL':([0,20,22,23,24,25,26,36,37,38,39,40,41,42,43,44,53,54,57,59,60,67,],[45,-40,-41,-42,-43,-44,-45,-58,-59,-60,-49,-50,-51,-52,-53,-54,45,45,45,45,45,72,]),'STRING':([0,20,36,37,38,39,40,41,42,43,44,54,59,60,],[52,-40,-58,-59,-60,-49,-50,-51,-52,-53,-54,52,52,52,]),'$end':([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,22,23,24,25,26,27,28,29,30,31,32,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,58,61,62,64,65,66,69,70,71,72,73,],[0,-1,-2,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-39,-40,-41,-42,-43,-44,-45,-26,-27,-28,-29,-30,-31,-58,-59,-60,-49,-50,-51,-52,-53,-54,-25,-24,-35,-36,-32,-33,-34,-23,-21,-47,-48,-56,-57,-22,-46,-20,-55,-38,-37,]),'HEADER_LIB':([33,],[58,]),'EQUAL':([55,56,],[67,68,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'EXPRESSION':([0,],[1,]),'COMENTARIOLEX':([0,],[2,]),'VARIABLELEX':([0,34,],[3,59,]),'OPERATION':([0,53,],[4,61,]),'OPERATIONS':([0,53,],[5,62,]),'OPERATOR':([0,4,21,61,63,],[6,53,57,53,57,]),'SENTENCIAS':([0,],[7,]),'INCLUDE':([0,],[8,]),'DEFINE':([0,],[9,]),'PREPROCESOR_DIRECTIVE':([0,],[10,]),'LOGICAL_OPERATOR':([0,13,64,],[11,54,54,]),'COMPARISONS':([0,54,],[12,65,]),'COMPARISON':([0,54,],[13,64,]),'COMPARISON_OPERATOR':([0,35,],[14,60,]),'DECIMAL_DECLARATION':([0,],[15,]),'INTEGER_DECLARATION':([0,],[16,]),'DECIMAL_TYPE':([0,],[17,]),'INTEGER_TYPE':([0,],[18,]),'NUMBER':([0,53,54,57,59,60,],[21,63,66,69,66,66,]),'VALUE':([0,54,59,60,],[35,35,70,71,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> EXPRESSION","S'",1,None,None,None),
  ('EXPRESSION -> COMENTARIOLEX','EXPRESSION',1,'p_EXPRESSION','syntax.py',7),
  ('EXPRESSION -> VARIABLELEX','EXPRESSION',1,'p_EXPRESSION','syntax.py',8),
  ('EXPRESSION -> OPERATION','EXPRESSION',1,'p_EXPRESSION','syntax.py',9),
  ('EXPRESSION -> OPERATIONS','EXPRESSION',1,'p_EXPRESSION','syntax.py',10),
  ('EXPRESSION -> OPERATOR','EXPRESSION',1,'p_EXPRESSION','syntax.py',11),
  ('EXPRESSION -> SENTENCIAS','EXPRESSION',1,'p_EXPRESSION','syntax.py',12),
  ('EXPRESSION -> INCLUDE','EXPRESSION',1,'p_EXPRESSION','syntax.py',13),
  ('EXPRESSION -> DEFINE','EXPRESSION',1,'p_EXPRESSION','syntax.py',14),
  ('EXPRESSION -> PREPROCESOR_DIRECTIVE','EXPRESSION',1,'p_EXPRESSION','syntax.py',15),
  ('EXPRESSION -> LOGICAL_OPERATOR','EXPRESSION',1,'p_EXPRESSION','syntax.py',16),
  ('EXPRESSION -> COMPARISONS','EXPRESSION',1,'p_EXPRESSION','syntax.py',17),
  ('EXPRESSION -> COMPARISON','EXPRESSION',1,'p_EXPRESSION','syntax.py',18),
  ('EXPRESSION -> COMPARISON_OPERATOR','EXPRESSION',1,'p_EXPRESSION','syntax.py',19),
  ('EXPRESSION -> DECIMAL_DECLARATION','EXPRESSION',1,'p_EXPRESSION','syntax.py',20),
  ('EXPRESSION -> INTEGER_DECLARATION','EXPRESSION',1,'p_EXPRESSION','syntax.py',21),
  ('EXPRESSION -> DECIMAL_TYPE','EXPRESSION',1,'p_EXPRESSION','syntax.py',22),
  ('EXPRESSION -> INTEGER_TYPE','EXPRESSION',1,'p_EXPRESSION','syntax.py',23),
  ('PREPROCESOR_DIRECTIVE -> DEFINE','PREPROCESOR_DIRECTIVE',1,'p_PREPROCESOR_DIRECTIVE','syntax.py',32),
  ('PREPROCESOR_DIRECTIVE -> INCLUDE','PREPROCESOR_DIRECTIVE',1,'p_PREPROCESOR_DIRECTIVE','syntax.py',33),
  ('DEFINE -> PP_DEFINE VARIABLELEX VALUE','DEFINE',3,'p_DEFINE','syntax.py',40),
  ('INCLUDE -> PP_INCLUDE HEADER_LIB','INCLUDE',2,'p_INCLUDE','syntax.py',48),
  ('VALUE -> NUMBER','VALUE',1,'p_VALUE','syntax.py',55),
  ('VALUE -> STRING','VALUE',1,'p_VALUE','syntax.py',56),
  ('NUMBER -> INTEGER','NUMBER',1,'p_NUMBER','syntax.py',63),
  ('NUMBER -> DECIMAL','NUMBER',1,'p_NUMBER','syntax.py',64),
  ('SENTENCIAS -> IF','SENTENCIAS',1,'p_SENTENCIAS','syntax.py',71),
  ('SENTENCIAS -> ELSEIF','SENTENCIAS',1,'p_SENTENCIAS','syntax.py',72),
  ('SENTENCIAS -> ELSE','SENTENCIAS',1,'p_SENTENCIAS','syntax.py',73),
  ('SENTENCIAS -> FOR','SENTENCIAS',1,'p_SENTENCIAS','syntax.py',74),
  ('SENTENCIAS -> WHILE','SENTENCIAS',1,'p_SENTENCIAS','syntax.py',75),
  ('SENTENCIAS -> SWITCH','SENTENCIAS',1,'p_SENTENCIAS','syntax.py',76),
  ('INTEGER_TYPE -> INT','INTEGER_TYPE',1,'p_INTEGER_TYPE','syntax.py',98),
  ('INTEGER_TYPE -> SHORT','INTEGER_TYPE',1,'p_INTEGER_TYPE','syntax.py',99),
  ('INTEGER_TYPE -> LONG','INTEGER_TYPE',1,'p_INTEGER_TYPE','syntax.py',100),
  ('DECIMAL_TYPE -> FLOAT','DECIMAL_TYPE',1,'p_DECIMAL_TYPE','syntax.py',107),
  ('DECIMAL_TYPE -> DOUBLE','DECIMAL_TYPE',1,'p_DECIMAL_TYPE','syntax.py',108),
  ('INTEGER_DECLARATION -> INTEGER_TYPE VARNAME EQUAL INTEGER','INTEGER_DECLARATION',4,'p_INTEGER_DECLARATION','syntax.py',115),
  ('DECIMAL_DECLARATION -> DECIMAL_TYPE VARNAME EQUAL DECIMAL','DECIMAL_DECLARATION',4,'p_DECIMAL_DECLARATION','syntax.py',122),
  ('COMENTARIOLEX -> COMMENT','COMENTARIOLEX',1,'p_COMENTARIOLEX','syntax.py',129),
  ('VARIABLELEX -> VARNAME','VARIABLELEX',1,'p_VARIABLELEX','syntax.py',136),
  ('OPERATOR -> PLUS','OPERATOR',1,'p_OPERATOR','syntax.py',143),
  ('OPERATOR -> MINUS','OPERATOR',1,'p_OPERATOR','syntax.py',144),
  ('OPERATOR -> TIMES','OPERATOR',1,'p_OPERATOR','syntax.py',145),
  ('OPERATOR -> MODULUS','OPERATOR',1,'p_OPERATOR','syntax.py',146),
  ('OPERATOR -> DIVIDE','OPERATOR',1,'p_OPERATOR','syntax.py',147),
  ('OPERATION -> NUMBER OPERATOR NUMBER','OPERATION',3,'p_OPERATION','syntax.py',154),
  ('OPERATIONS -> OPERATION','OPERATIONS',1,'p_OPERATIONS','syntax.py',161),
  ('OPERATIONS -> OPERATION OPERATOR OPERATIONS','OPERATIONS',3,'p_OPERATIONS','syntax.py',162),
  ('COMPARISON_OPERATOR -> EQUAL_TO','COMPARISON_OPERATOR',1,'p_COMPARISON_OPERATOR','syntax.py',169),
  ('COMPARISON_OPERATOR -> NOT_EQUAL','COMPARISON_OPERATOR',1,'p_COMPARISON_OPERATOR','syntax.py',170),
  ('COMPARISON_OPERATOR -> GREATER_THAN','COMPARISON_OPERATOR',1,'p_COMPARISON_OPERATOR','syntax.py',171),
  ('COMPARISON_OPERATOR -> LESS_THAN','COMPARISON_OPERATOR',1,'p_COMPARISON_OPERATOR','syntax.py',172),
  ('COMPARISON_OPERATOR -> GREATER_EQUAL','COMPARISON_OPERATOR',1,'p_COMPARISON_OPERATOR','syntax.py',173),
  ('COMPARISON_OPERATOR -> LESS_EQUAL','COMPARISON_OPERATOR',1,'p_COMPARISON_OPERATOR','syntax.py',174),
  ('COMPARISON -> VALUE COMPARISON_OPERATOR VALUE','COMPARISON',3,'p_COMPARISON','syntax.py',181),
  ('COMPARISONS -> COMPARISON','COMPARISONS',1,'p_COMPARISONS','syntax.py',188),
  ('COMPARISONS -> COMPARISON LOGICAL_OPERATOR COMPARISONS','COMPARISONS',3,'p_COMPARISONS','syntax.py',189),
  ('LOGICAL_OPERATOR -> AND','LOGICAL_OPERATOR',1,'p_LOGICAL_OPERATOR','syntax.py',196),
  ('LOGICAL_OPERATOR -> OR','LOGICAL_OPERATOR',1,'p_LOGICAL_OPERATOR','syntax.py',197),
  ('LOGICAL_OPERATOR -> NOT','LOGICAL_OPERATOR',1,'p_LOGICAL_OPERATOR','syntax.py',198),
]
