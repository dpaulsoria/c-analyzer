
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'AMPERSAND AND AND_EQUAL AUTO BACKSLASH BACKSPACE BREAK B_AND B_COMPLEMENT B_OR B_XOR CASE CHAR CHARACTER COLON COMMA COMMENT COMPLEMENT_EQUAL CONST CONTINUE DECIMAL DEFAULT DIVIDE DIV_EQUAL DO DOT DOUBLE DOUBLE_APOS DOUBLE_QUOTE ELSE ELSEIF ENUM EQUAL EQUAL_TO EXTERN FF_PAGEBREAK FLOAT FOR FS_CHAR FS_DOUBLE FS_FLOAT FS_HEX FS_INT FS_LONG FS_LONG_DOUBLE FS_OCT FS_OCT_LONG FS_POINTER FS_SCI_NOTATION FS_STRING FS_UNSIGNED_INT FS_UNSIGNED_LONG GOTO GREATER_EQUAL GREATER_THAN HEADER_LIB HTAB IF IGNORE INT INTEGER LBRACKET LCURL_BRACE LESS_EQUAL LESS_THAN LONG LPAREN MINUS MINUS_EQUAL MODULUS MOD_EQUAL NEWLINE NOT NOT_EQUAL NULL OR OR_EQUAL PLUS PLUS_EQUAL PP_DATE PP_DEFINE PP_DTMACRO PP_ERROR PP_FILE PP_IF PP_IFDEF PP_IFNDEF PP_INCLUDE PP_LINE PP_PRAGMA PP_STMACRO PP_TIME PP_TIMESTAMP PP_UNDEF QUESTIONMARK RBRACKET RCURL_BRACE REGISTER RETURN RPAREN SEMICOLON SHIFTL_EQUAL SHIFTR_EQUAL SHIFT_LEFT SHIFT_RIGHT SHORT SIGNED SINGLE_APOS SINGLE_QUOTE SIZEOF STATIC STRING STRUCT SWITCH TILDE TIMES TIMES_EQUAL TYPEDEF UNION UNSIGNED VARNAME VOID VOLTILE VTAB WHILE XOR_EQUAL\n    EXPRESSION : COMENTARIOLEX\n                | VARIABLELEX\n                | SUMA\n    \n    COMENTARIOLEX : COMMENT\n    \n    VARIABLELEX : VARNAME\n    \n    OPERADOR : PLUS\n              | MINUS\n              | TIMES\n              | MODULUS\n              | DIVIDE\n    \n    SUMA : INTEGER OPERADOR INTEGER\n    '
    
_lr_action_items = {'COMMENT':([0,],[5,]),'VARNAME':([0,],[6,]),'INTEGER':([0,8,9,10,11,12,13,],[7,14,-6,-7,-8,-9,-10,]),'$end':([1,2,3,4,5,6,14,],[0,-1,-2,-3,-4,-5,-11,]),'PLUS':([7,],[9,]),'MINUS':([7,],[10,]),'TIMES':([7,],[11,]),'MODULUS':([7,],[12,]),'DIVIDE':([7,],[13,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'EXPRESSION':([0,],[1,]),'COMENTARIOLEX':([0,],[2,]),'VARIABLELEX':([0,],[3,]),'SUMA':([0,],[4,]),'OPERADOR':([7,],[8,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> EXPRESSION","S'",1,None,None,None),
  ('EXPRESSION -> COMENTARIOLEX','EXPRESSION',1,'p_EXPRESSION','syntax.py',7),
  ('EXPRESSION -> VARIABLELEX','EXPRESSION',1,'p_EXPRESSION','syntax.py',8),
  ('EXPRESSION -> SUMA','EXPRESSION',1,'p_EXPRESSION','syntax.py',9),
  ('COMENTARIOLEX -> COMMENT','COMENTARIOLEX',1,'p_COMENTARIOLEX','syntax.py',16),
  ('VARIABLELEX -> VARNAME','VARIABLELEX',1,'p_VARIABLELEX','syntax.py',23),
  ('OPERADOR -> PLUS','OPERADOR',1,'p_OPERADOR','syntax.py',30),
  ('OPERADOR -> MINUS','OPERADOR',1,'p_OPERADOR','syntax.py',31),
  ('OPERADOR -> TIMES','OPERADOR',1,'p_OPERADOR','syntax.py',32),
  ('OPERADOR -> MODULUS','OPERADOR',1,'p_OPERADOR','syntax.py',33),
  ('OPERADOR -> DIVIDE','OPERADOR',1,'p_OPERADOR','syntax.py',34),
  ('SUMA -> INTEGER OPERADOR INTEGER','SUMA',3,'p_SUMA','syntax.py',41),
]
