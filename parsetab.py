
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'AMPERSAND AND AND_EQUAL AUTO BACKSLASH BACKSPACE BREAK B_AND B_COMPLEMENT B_OR B_XOR CASE CHAR CHARACTER COLON COMMA COMMENT COMPLEMENT_EQUAL CONST CONTINUE DECIMAL DECREASE DEFAULT DIVIDE DIV_EQUAL DO DOT DOUBLE DOUBLE_APOS DOUBLE_QUOTE ELSE ENUM EQUAL EQUAL_TO EXTERN FF_PAGEBREAK FLOAT FOR FS_CHAR FS_DOUBLE FS_FLOAT FS_HEX FS_INT FS_LONG FS_LONG_DOUBLE FS_OCT FS_OCT_LONG FS_POINTER FS_SCI_NOTATION FS_STRING FS_UNSIGNED_INT FS_UNSIGNED_LONG GOTO GREATER_EQUAL GREATER_THAN HEADER_LIB HTAB IF IGNORE INCREASE INT INTEGER LBRACKET LCURL_BRACE LESS_EQUAL LESS_THAN LONG LPAREN MINUS MINUS_EQUAL MODULUS MOD_EQUAL NEWLINE NOT NOT_EQUAL NULL OR OR_EQUAL PLUS PLUS_EQUAL PP_DATE PP_DEFINE PP_DTMACRO PP_ERROR PP_FILE PP_IF PP_IFDEF PP_IFNDEF PP_INCLUDE PP_LINE PP_PRAGMA PP_STMACRO PP_TIME PP_TIMESTAMP PP_UNDEF QUESTIONMARK RBRACKET RCURL_BRACE REGISTER RETURN RPAREN SEMICOLON SHIFTL_EQUAL SHIFTR_EQUAL SHIFT_LEFT SHIFT_RIGHT SHORT SIGNED SINGLE_APOS SINGLE_QUOTE SIZEOF STATIC STRING STRUCT SWITCH TILDE TIMES TIMES_EQUAL TYPEDEF UNION UNSIGNED VARNAME VOID VOLTILE VTAB WHILE XOR_EQUAL\n    ROOT : PREPROCESOR_DIRECTIVE\n         | DEFINE\n         | INCLUDE\n         | VALUE\n         | NUMBER\n         | CONTROL_STRUCTURES\n         | WHILE_STRUCTURE\n         | SWITCH_STRUCTURE\n         | IF_STRUCTURE\n         | FOR_STRUCTURE\n         | CODE\n         | EXPRESSION\n         | EXPRESSIONS\n         | FUNCTION\n         | INTEGER_TYPE\n         | DECIMAL_TYPE\n         | INTEGER_DECLARATION\n         | DECIMAL_DECLARATION\n         | ASSIGNMENT_DECLARATION\n         | ASSIGNMENT_OPERATOR\n         | COMENTARIOLEX\n         | VARIABLELEX\n         | OPERATOR\n         | OPERATION\n         | OPERATIONS\n         | COMPARISON_OPERATOR\n         | COMPARISON\n         | COMPARISONS\n         | LOGICAL_OPERATOR\n         | SENTENCE\n         | SWITCH_BODY\n         | BUCLE\n         | ELSE_STRUCTURE\n         | FUNCTION_ARGUMENTS\n         | DECLARATIONS\n    \n    PREPROCESOR_DIRECTIVE : DEFINE\n                          | INCLUDE\n    \n    DEFINE : PP_DEFINE VARIABLELEX VALUE\n    \n    \n    INCLUDE : PP_INCLUDE HEADER_LIB\n    \n    VALUE : NUMBER \n          | STRING\n    \n    NUMBER : INTEGER\n           | DECIMAL\n    \n    CONTROL_STRUCTURES : IF_STRUCTURE\n                       | FOR_STRUCTURE\n                       | WHILE_STRUCTURE\n                       | SWITCH_STRUCTURE\n    \n    BODY_STRUCTURE : EXPRESSIONS \n                   | EXPRESSIONS BREAK SEMICOLON\n                   | EXPRESSIONS CONTINUE SEMICOLON\n    \n    WHILE_STRUCTURE : WHILE LPAREN COMPARISONS RPAREN LCURL_BRACE BODY_STRUCTURE RCURL_BRACE\n    \n    SWITCH_CASE : CASE INTEGER COLON EXPRESSIONS BREAK SEMICOLON\n    \n    SWITCH_DEFAULT : DEFAULT COLON EXPRESSIONS BREAK SEMICOLON\n    \n    SWITCH_BODY : SWITCH_CASE\n                | SWITCH_DEFAULT\n                |  SWITCH_CASE SWITCH_BODY   \n    \n    SWITCH_STRUCTURE : SWITCH LPAREN COMPARISONS RPAREN LCURL_BRACE SWITCH_BODY RCURL_BRACE\n    \n    BUCLE : VARIABLELEX INCREASE \n          | DECREASE VARIABLELEX\n    \n    FOR_STRUCTURE : FOR LPAREN DECLARATIONS SEMICOLON COMPARISONS SEMICOLON BUCLE RPAREN\n    \n    IF_STRUCTURE : IF LPAREN COMPARISONS RPAREN LCURL_BRACE EXPRESSIONS RCURL_BRACE\n                 | IF LPAREN COMPARISONS RPAREN LCURL_BRACE EXPRESSIONS RCURL_BRACE ELSE_STRUCTURE\n    \n    ELSE_STRUCTURE : ELSE LCURL_BRACE EXPRESSIONS RCURL_BRACE\n                   | ELSE IF_STRUCTURE\n    \n    DECLARATIONS : INTEGER_DECLARATION\n                 | DECIMAL_DECLARATION\n    \n    CODE : FUNCTION\n         | INTEGER_DECLARATION\n         | DECIMAL_DECLARATION\n         | ASSIGNMENT_DECLARATION\n         | COMENTARIOLEX\n    \n    EXPRESSION : CODE SEMICOLON\n               | CONTROL_STRUCTURES\n    \n    EXPRESSIONS : EXPRESSION\n                | EXPRESSION EXPRESSIONS\n    \n    FUNCTION : VARNAME LPAREN FUNCTION_ARGUMENTS RPAREN\n    \n    FUNCTION_ARGUMENTS : SENTENCES\n                       | COMPARISONS\n    \n    INTEGER_TYPE : INT\n                 | SHORT\n                 | LONG\n    \n    DECIMAL_TYPE : FLOAT\n                 | DOUBLE\n    \n    INTEGER_DECLARATION : INTEGER_TYPE VARNAME EQUAL INTEGER\n    \n    DECIMAL_DECLARATION : DECIMAL_TYPE VARNAME EQUAL DECIMAL\n    \n    ASSIGNMENT_DECLARATION : VARNAME ASSIGNMENT_OPERATOR SENTENCE\n    \n    ASSIGNMENT_OPERATOR : EQUAL\n                        | PLUS_EQUAL\n                        | MINUS_EQUAL\n                        | DIV_EQUAL\n                        | TIMES_EQUAL\n                        | MOD_EQUAL\n                        | AND_EQUAL\n                        | OR_EQUAL\n                        | XOR_EQUAL\n                        | COMPLEMENT_EQUAL\n                        | SHIFTL_EQUAL\n                        | SHIFTR_EQUAL\n    \n    COMENTARIOLEX : COMMENT\n    \n    VARIABLELEX : VARNAME\n    \n    OPERATOR : PLUS\n             | MINUS\n             | TIMES\n             | MODULUS\n             | DIVIDE\n    \n    OPERATION : NUMBER OPERATOR NUMBER\n    \n    OPERATIONS : OPERATION\n                | OPERATION OPERATOR OPERATIONS\n    \n    COMPARISON_OPERATOR : EQUAL_TO\n                        | NOT_EQUAL\n                        | GREATER_THAN\n                        | LESS_THAN\n                        | GREATER_EQUAL\n                        | LESS_EQUAL\n    \n    COMPARISON : VALUE COMPARISON_OPERATOR VALUE\n               | SENTENCE COMPARISON_OPERATOR SENTENCE\n    \n    COMPARISONS : COMPARISON\n                | COMPARISON LOGICAL_OPERATOR COMPARISONS\n    \n    LOGICAL_OPERATOR : AND\n                     | OR\n                     | NOT\n    \n    SENTENCE : NUMBER\n             | VARNAME\n    \n    SENTENCES : SENTENCE\n              | SENTENCE COMMA SENTENCES\n    '
    
_lr_action_items = {'PP_DEFINE':([0,],[37,]),'PP_INCLUDE':([0,],[38,]),'STRING':([0,70,71,72,73,74,75,76,77,78,86,109,112,113,115,116,117,119,165,],[39,-109,-110,-111,-112,-113,-114,-119,-120,-121,39,39,39,-100,39,39,39,39,39,]),'INTEGER':([0,52,53,54,55,56,57,58,59,60,61,62,63,65,66,67,68,69,70,71,72,73,74,75,76,77,78,84,86,87,108,109,110,111,112,113,115,116,117,119,120,130,165,],[40,-87,-88,-89,-90,-91,-92,-93,-94,-95,-96,-97,-98,-101,-102,-103,-104,-105,-109,-110,-111,-112,-113,-114,-119,-120,-121,125,40,40,40,40,40,40,40,-100,40,40,40,40,40,160,40,]),'DECIMAL':([0,52,53,54,55,56,57,58,59,60,61,62,63,65,66,67,68,69,70,71,72,73,74,75,76,77,78,86,87,108,109,110,111,112,113,115,116,117,119,120,131,165,],[41,-87,-88,-89,-90,-91,-92,-93,-94,-95,-96,-97,-98,-101,-102,-103,-104,-105,-109,-110,-111,-112,-113,-114,-119,-120,-121,41,41,41,41,41,41,41,-100,41,41,41,41,41,161,41,]),'WHILE':([0,7,8,9,10,11,13,88,89,92,98,99,100,101,123,124,126,158,167,170,172,182,185,186,191,192,],[42,-73,-46,-47,-44,-45,42,-72,42,-73,-44,-45,-46,-47,42,-64,42,42,-63,42,42,-51,-57,-61,-62,-60,]),'SWITCH':([0,7,8,9,10,11,13,88,89,92,98,99,100,101,123,124,126,158,167,170,172,182,185,186,191,192,],[43,-73,-46,-47,-44,-45,43,-72,43,-73,-44,-45,-46,-47,43,-64,43,43,-63,43,43,-51,-57,-61,-62,-60,]),'IF':([0,7,8,9,10,11,13,82,88,89,92,98,99,100,101,123,124,126,158,167,170,172,182,185,186,191,192,],[44,-73,-46,-47,-44,-45,44,44,-72,44,-73,-44,-45,-46,-47,44,-64,44,44,-63,44,44,-51,-57,-61,-62,-60,]),'FOR':([0,7,8,9,10,11,13,88,89,92,98,99,100,101,123,124,126,158,167,170,172,182,185,186,191,192,],[45,-73,-46,-47,-44,-45,45,-72,45,-73,-44,-45,-46,-47,45,-64,45,45,-63,45,45,-51,-57,-61,-62,-60,]),'VARNAME':([0,7,8,9,10,11,13,16,17,37,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,70,71,72,73,74,75,76,77,78,81,88,89,92,98,99,100,101,103,104,109,110,111,115,116,117,119,120,123,124,126,158,165,167,170,172,180,182,185,186,191,192,],[46,-73,-46,-47,-44,-45,102,105,106,113,-79,-80,-81,-82,-83,-87,-88,-89,-90,-91,-92,-93,-94,-95,-96,-97,-98,-109,-110,-111,-112,-113,-114,-119,-120,-121,113,-72,102,-73,-44,-45,-46,-47,105,106,140,140,140,140,140,140,140,140,102,-64,102,102,140,-63,102,102,113,-51,-57,-61,-62,-60,]),'INT':([0,7,8,9,10,11,13,88,89,92,98,99,100,101,118,123,124,126,158,167,170,172,182,185,186,191,192,],[47,-73,-46,-47,-44,-45,47,-72,47,-73,-44,-45,-46,-47,47,47,-64,47,47,-63,47,47,-51,-57,-61,-62,-60,]),'SHORT':([0,7,8,9,10,11,13,88,89,92,98,99,100,101,118,123,124,126,158,167,170,172,182,185,186,191,192,],[48,-73,-46,-47,-44,-45,48,-72,48,-73,-44,-45,-46,-47,48,48,-64,48,48,-63,48,48,-51,-57,-61,-62,-60,]),'LONG':([0,7,8,9,10,11,13,88,89,92,98,99,100,101,118,123,124,126,158,167,170,172,182,185,186,191,192,],[49,-73,-46,-47,-44,-45,49,-72,49,-73,-44,-45,-46,-47,49,49,-64,49,49,-63,49,49,-51,-57,-61,-62,-60,]),'FLOAT':([0,7,8,9,10,11,13,88,89,92,98,99,100,101,118,123,124,126,158,167,170,172,182,185,186,191,192,],[50,-73,-46,-47,-44,-45,50,-72,50,-73,-44,-45,-46,-47,50,50,-64,50,50,-63,50,50,-51,-57,-61,-62,-60,]),'DOUBLE':([0,7,8,9,10,11,13,88,89,92,98,99,100,101,118,123,124,126,158,167,170,172,182,185,186,191,192,],[51,-73,-46,-47,-44,-45,51,-72,51,-73,-44,-45,-46,-47,51,51,-64,51,51,-63,51,51,-51,-57,-61,-62,-60,]),'EQUAL':([0,46,102,105,106,],[52,52,52,130,131,]),'PLUS_EQUAL':([0,46,102,],[53,53,53,]),'MINUS_EQUAL':([0,46,102,],[54,54,54,]),'DIV_EQUAL':([0,46,102,],[55,55,55,]),'TIMES_EQUAL':([0,46,102,],[56,56,56,]),'MOD_EQUAL':([0,46,102,],[57,57,57,]),'AND_EQUAL':([0,46,102,],[58,58,58,]),'OR_EQUAL':([0,46,102,],[59,59,59,]),'XOR_EQUAL':([0,46,102,],[60,60,60,]),'COMPLEMENT_EQUAL':([0,46,102,],[61,61,61,]),'SHIFTL_EQUAL':([0,46,102,],[62,62,62,]),'SHIFTR_EQUAL':([0,46,102,],[63,63,63,]),'COMMENT':([0,7,8,9,10,11,13,88,89,92,98,99,100,101,123,124,126,158,167,170,172,182,185,186,191,192,],[64,-73,-46,-47,-44,-45,64,-72,64,-73,-44,-45,-46,-47,64,-64,64,64,-63,64,64,-51,-57,-61,-62,-60,]),'PLUS':([0,6,25,40,41,129,132,134,],[65,65,65,-42,-43,-106,65,65,]),'MINUS':([0,6,25,40,41,129,132,134,],[66,66,66,-42,-43,-106,66,66,]),'TIMES':([0,6,25,40,41,129,132,134,],[67,67,67,-42,-43,-106,67,67,]),'MODULUS':([0,6,25,40,41,129,132,134,],[68,68,68,-42,-43,-106,68,68,]),'DIVIDE':([0,6,25,40,41,129,132,134,],[69,69,69,-42,-43,-106,69,69,]),'EQUAL_TO':([0,5,6,31,39,40,41,46,137,138,139,140,154,155,],[70,70,-40,70,-41,-42,-43,-123,70,70,-40,-123,70,-40,]),'NOT_EQUAL':([0,5,6,31,39,40,41,46,137,138,139,140,154,155,],[71,71,-40,71,-41,-42,-43,-123,71,71,-40,-123,71,-40,]),'GREATER_THAN':([0,5,6,31,39,40,41,46,137,138,139,140,154,155,],[72,72,-40,72,-41,-42,-43,-123,72,72,-40,-123,72,-40,]),'LESS_THAN':([0,5,6,31,39,40,41,46,137,138,139,140,154,155,],[73,73,-40,73,-41,-42,-43,-123,73,73,-40,-123,73,-40,]),'GREATER_EQUAL':([0,5,6,31,39,40,41,46,137,138,139,140,154,155,],[74,74,-40,74,-41,-42,-43,-123,74,74,-40,-123,74,-40,]),'LESS_EQUAL':([0,5,6,31,39,40,41,46,137,138,139,140,154,155,],[75,75,-40,75,-41,-42,-43,-123,75,75,-40,-123,75,-40,]),'AND':([0,28,39,40,41,127,128,135,140,141,142,],[76,76,-41,-42,-43,-115,-40,76,-123,-116,-122,]),'OR':([0,28,39,40,41,127,128,135,140,141,142,],[77,77,-41,-42,-43,-115,-40,77,-123,-116,-122,]),'NOT':([0,28,39,40,41,127,128,135,140,141,142,],[78,78,-41,-42,-43,-115,-40,78,-123,-116,-122,]),'DECREASE':([0,180,],[81,81,]),'ELSE':([0,186,],[82,82,]),'CASE':([0,79,171,181,],[84,84,84,-52,]),'DEFAULT':([0,79,171,181,],[85,85,85,-52,]),'$end':([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,39,40,41,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,83,88,89,90,92,98,99,100,101,107,113,114,121,122,124,127,128,129,132,133,135,136,140,141,142,143,144,145,156,160,161,166,167,175,181,182,185,186,191,192,],[0,-1,-2,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,-22,-23,-24,-25,-26,-27,-28,-29,-30,-31,-32,-33,-34,-35,-41,-42,-43,-100,-79,-80,-81,-82,-83,-87,-88,-89,-90,-91,-92,-93,-94,-95,-96,-97,-98,-99,-101,-102,-103,-104,-105,-109,-110,-111,-112,-113,-114,-119,-120,-121,-54,-55,-77,-72,-74,-75,-73,-44,-45,-46,-47,-58,-100,-39,-56,-59,-64,-115,-40,-106,-107,-108,-117,-118,-123,-116,-122,-124,-125,-38,-86,-84,-85,-76,-63,-53,-52,-51,-57,-61,-62,-60,]),'COMMA':([6,31,40,41,46,140,142,143,154,155,],[-122,111,-42,-43,-123,-123,-122,111,111,-122,]),'SEMICOLON':([12,15,18,19,20,22,39,40,41,64,91,93,94,95,96,97,127,128,135,136,140,141,142,149,150,151,156,160,161,166,169,173,174,183,184,],[88,-67,-68,-69,-70,-71,-41,-42,-43,-99,88,-67,-68,-69,-70,-71,-115,-40,-117,-118,-123,-116,-122,165,-65,-66,-86,-84,-85,-76,175,180,181,189,190,]),'INCREASE':([23,46,113,188,],[107,-100,-100,107,]),'HEADER_LIB':([38,],[114,]),'RPAREN':([39,40,41,83,107,113,122,127,128,135,136,140,141,142,143,144,146,147,148,152,153,154,155,187,],[-41,-42,-43,-77,-58,-100,-59,-115,-40,-117,-118,-123,-116,-122,-124,-125,162,163,164,166,-78,-124,-122,192,]),'LPAREN':([42,43,44,45,46,102,],[115,116,117,118,119,119,]),'RCURL_BRACE':([79,80,88,89,90,92,98,99,100,101,121,124,157,167,175,176,177,178,179,181,182,185,186,189,190,191,192,],[-54,-55,-72,-74,-75,-73,-44,-45,-46,-47,-56,-64,167,-63,-53,182,-48,185,186,-52,-51,-57,-61,-49,-50,-62,-60,]),'LCURL_BRACE':([82,162,163,164,],[123,170,171,172,]),'COLON':([85,125,],[126,158,]),'BREAK':([88,89,90,92,98,99,100,101,124,159,167,168,177,182,185,186,191,192,],[-72,-74,-75,-73,-44,-45,-46,-47,-64,169,-63,174,183,-51,-57,-61,-62,-60,]),'CONTINUE':([88,89,90,92,98,99,100,101,124,167,177,182,185,186,191,192,],[-72,-74,-75,-73,-44,-45,-46,-47,-64,-63,184,-51,-57,-61,-62,-60,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'ROOT':([0,],[1,]),'PREPROCESOR_DIRECTIVE':([0,],[2,]),'DEFINE':([0,],[3,]),'INCLUDE':([0,],[4,]),'VALUE':([0,86,109,112,115,116,117,119,165,],[5,127,137,145,137,137,137,137,137,]),'NUMBER':([0,86,87,108,109,110,111,112,115,116,117,119,120,165,],[6,128,129,134,139,142,142,128,139,139,139,155,142,139,]),'CONTROL_STRUCTURES':([0,13,89,123,126,158,170,172,],[7,92,92,92,92,92,92,92,]),'WHILE_STRUCTURE':([0,13,89,123,126,158,170,172,],[8,100,100,100,100,100,100,100,]),'SWITCH_STRUCTURE':([0,13,89,123,126,158,170,172,],[9,101,101,101,101,101,101,101,]),'IF_STRUCTURE':([0,13,82,89,123,126,158,170,172,],[10,98,124,98,98,98,98,98,98,]),'FOR_STRUCTURE':([0,13,89,123,126,158,170,172,],[11,99,99,99,99,99,99,99,]),'CODE':([0,13,89,123,126,158,170,172,],[12,91,91,91,91,91,91,91,]),'EXPRESSION':([0,13,89,123,126,158,170,172,],[13,89,89,89,89,89,89,89,]),'EXPRESSIONS':([0,13,89,123,126,158,170,172,],[14,90,90,157,159,168,177,179,]),'FUNCTION':([0,13,89,123,126,158,170,172,],[15,93,93,93,93,93,93,93,]),'INTEGER_TYPE':([0,13,89,118,123,126,158,170,172,],[16,103,103,103,103,103,103,103,103,]),'DECIMAL_TYPE':([0,13,89,118,123,126,158,170,172,],[17,104,104,104,104,104,104,104,104,]),'INTEGER_DECLARATION':([0,13,89,118,123,126,158,170,172,],[18,94,94,150,94,94,94,94,94,]),'DECIMAL_DECLARATION':([0,13,89,118,123,126,158,170,172,],[19,95,95,151,95,95,95,95,95,]),'ASSIGNMENT_DECLARATION':([0,13,89,123,126,158,170,172,],[20,96,96,96,96,96,96,96,]),'ASSIGNMENT_OPERATOR':([0,46,102,],[21,120,120,]),'COMENTARIOLEX':([0,13,89,123,126,158,170,172,],[22,97,97,97,97,97,97,97,]),'VARIABLELEX':([0,37,81,180,],[23,112,122,188,]),'OPERATOR':([0,6,25,132,134,],[24,87,108,108,87,]),'OPERATION':([0,108,],[25,132,]),'OPERATIONS':([0,108,],[26,133,]),'COMPARISON_OPERATOR':([0,5,31,137,138,154,],[27,86,110,86,110,110,]),'COMPARISON':([0,109,115,116,117,119,165,],[28,135,135,135,135,135,135,]),'COMPARISONS':([0,109,115,116,117,119,165,],[29,136,146,147,148,153,173,]),'LOGICAL_OPERATOR':([0,28,135,],[30,109,109,]),'SENTENCE':([0,109,110,111,115,116,117,119,120,165,],[31,138,141,143,138,138,138,154,156,138,]),'SWITCH_BODY':([0,79,171,],[32,121,178,]),'BUCLE':([0,180,],[33,187,]),'ELSE_STRUCTURE':([0,186,],[34,191,]),'FUNCTION_ARGUMENTS':([0,119,],[35,152,]),'DECLARATIONS':([0,118,],[36,149,]),'SWITCH_CASE':([0,79,171,],[79,79,79,]),'SWITCH_DEFAULT':([0,79,171,],[80,80,80,]),'SENTENCES':([0,111,119,],[83,144,83,]),'BODY_STRUCTURE':([170,],[176,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> ROOT","S'",1,None,None,None),
  ('ROOT -> PREPROCESOR_DIRECTIVE','ROOT',1,'p_ROOT','syntax.py',7),
  ('ROOT -> DEFINE','ROOT',1,'p_ROOT','syntax.py',8),
  ('ROOT -> INCLUDE','ROOT',1,'p_ROOT','syntax.py',9),
  ('ROOT -> VALUE','ROOT',1,'p_ROOT','syntax.py',10),
  ('ROOT -> NUMBER','ROOT',1,'p_ROOT','syntax.py',11),
  ('ROOT -> CONTROL_STRUCTURES','ROOT',1,'p_ROOT','syntax.py',12),
  ('ROOT -> WHILE_STRUCTURE','ROOT',1,'p_ROOT','syntax.py',13),
  ('ROOT -> SWITCH_STRUCTURE','ROOT',1,'p_ROOT','syntax.py',14),
  ('ROOT -> IF_STRUCTURE','ROOT',1,'p_ROOT','syntax.py',15),
  ('ROOT -> FOR_STRUCTURE','ROOT',1,'p_ROOT','syntax.py',16),
  ('ROOT -> CODE','ROOT',1,'p_ROOT','syntax.py',17),
  ('ROOT -> EXPRESSION','ROOT',1,'p_ROOT','syntax.py',18),
  ('ROOT -> EXPRESSIONS','ROOT',1,'p_ROOT','syntax.py',19),
  ('ROOT -> FUNCTION','ROOT',1,'p_ROOT','syntax.py',20),
  ('ROOT -> INTEGER_TYPE','ROOT',1,'p_ROOT','syntax.py',21),
  ('ROOT -> DECIMAL_TYPE','ROOT',1,'p_ROOT','syntax.py',22),
  ('ROOT -> INTEGER_DECLARATION','ROOT',1,'p_ROOT','syntax.py',23),
  ('ROOT -> DECIMAL_DECLARATION','ROOT',1,'p_ROOT','syntax.py',24),
  ('ROOT -> ASSIGNMENT_DECLARATION','ROOT',1,'p_ROOT','syntax.py',25),
  ('ROOT -> ASSIGNMENT_OPERATOR','ROOT',1,'p_ROOT','syntax.py',26),
  ('ROOT -> COMENTARIOLEX','ROOT',1,'p_ROOT','syntax.py',27),
  ('ROOT -> VARIABLELEX','ROOT',1,'p_ROOT','syntax.py',28),
  ('ROOT -> OPERATOR','ROOT',1,'p_ROOT','syntax.py',29),
  ('ROOT -> OPERATION','ROOT',1,'p_ROOT','syntax.py',30),
  ('ROOT -> OPERATIONS','ROOT',1,'p_ROOT','syntax.py',31),
  ('ROOT -> COMPARISON_OPERATOR','ROOT',1,'p_ROOT','syntax.py',32),
  ('ROOT -> COMPARISON','ROOT',1,'p_ROOT','syntax.py',33),
  ('ROOT -> COMPARISONS','ROOT',1,'p_ROOT','syntax.py',34),
  ('ROOT -> LOGICAL_OPERATOR','ROOT',1,'p_ROOT','syntax.py',35),
  ('ROOT -> SENTENCE','ROOT',1,'p_ROOT','syntax.py',36),
  ('ROOT -> SWITCH_BODY','ROOT',1,'p_ROOT','syntax.py',37),
  ('ROOT -> BUCLE','ROOT',1,'p_ROOT','syntax.py',38),
  ('ROOT -> ELSE_STRUCTURE','ROOT',1,'p_ROOT','syntax.py',39),
  ('ROOT -> FUNCTION_ARGUMENTS','ROOT',1,'p_ROOT','syntax.py',40),
  ('ROOT -> DECLARATIONS','ROOT',1,'p_ROOT','syntax.py',41),
  ('PREPROCESOR_DIRECTIVE -> DEFINE','PREPROCESOR_DIRECTIVE',1,'p_PREPROCESOR_DIRECTIVE','syntax.py',49),
  ('PREPROCESOR_DIRECTIVE -> INCLUDE','PREPROCESOR_DIRECTIVE',1,'p_PREPROCESOR_DIRECTIVE','syntax.py',50),
  ('DEFINE -> PP_DEFINE VARIABLELEX VALUE','DEFINE',3,'p_DEFINE','syntax.py',57),
  ('INCLUDE -> PP_INCLUDE HEADER_LIB','INCLUDE',2,'p_INCLUDE','syntax.py',65),
  ('VALUE -> NUMBER','VALUE',1,'p_VALUE','syntax.py',72),
  ('VALUE -> STRING','VALUE',1,'p_VALUE','syntax.py',73),
  ('NUMBER -> INTEGER','NUMBER',1,'p_NUMBER','syntax.py',80),
  ('NUMBER -> DECIMAL','NUMBER',1,'p_NUMBER','syntax.py',81),
  ('CONTROL_STRUCTURES -> IF_STRUCTURE','CONTROL_STRUCTURES',1,'p_CONTROL_STRUCTURES','syntax.py',88),
  ('CONTROL_STRUCTURES -> FOR_STRUCTURE','CONTROL_STRUCTURES',1,'p_CONTROL_STRUCTURES','syntax.py',89),
  ('CONTROL_STRUCTURES -> WHILE_STRUCTURE','CONTROL_STRUCTURES',1,'p_CONTROL_STRUCTURES','syntax.py',90),
  ('CONTROL_STRUCTURES -> SWITCH_STRUCTURE','CONTROL_STRUCTURES',1,'p_CONTROL_STRUCTURES','syntax.py',91),
  ('BODY_STRUCTURE -> EXPRESSIONS','BODY_STRUCTURE',1,'p_BODY_STRUCTURE','syntax.py',98),
  ('BODY_STRUCTURE -> EXPRESSIONS BREAK SEMICOLON','BODY_STRUCTURE',3,'p_BODY_STRUCTURE','syntax.py',99),
  ('BODY_STRUCTURE -> EXPRESSIONS CONTINUE SEMICOLON','BODY_STRUCTURE',3,'p_BODY_STRUCTURE','syntax.py',100),
  ('WHILE_STRUCTURE -> WHILE LPAREN COMPARISONS RPAREN LCURL_BRACE BODY_STRUCTURE RCURL_BRACE','WHILE_STRUCTURE',7,'p_WHILE_STRUCTURE','syntax.py',109),
  ('SWITCH_CASE -> CASE INTEGER COLON EXPRESSIONS BREAK SEMICOLON','SWITCH_CASE',6,'p_SWITCH_CASE','syntax.py',118),
  ('SWITCH_DEFAULT -> DEFAULT COLON EXPRESSIONS BREAK SEMICOLON','SWITCH_DEFAULT',5,'p_SWITCH_DEFAULT','syntax.py',125),
  ('SWITCH_BODY -> SWITCH_CASE','SWITCH_BODY',1,'p_SWITCH_BODY','syntax.py',132),
  ('SWITCH_BODY -> SWITCH_DEFAULT','SWITCH_BODY',1,'p_SWITCH_BODY','syntax.py',133),
  ('SWITCH_BODY -> SWITCH_CASE SWITCH_BODY','SWITCH_BODY',2,'p_SWITCH_BODY','syntax.py',134),
  ('SWITCH_STRUCTURE -> SWITCH LPAREN COMPARISONS RPAREN LCURL_BRACE SWITCH_BODY RCURL_BRACE','SWITCH_STRUCTURE',7,'p_SWITCH_STRUCTURE','syntax.py',141),
  ('BUCLE -> VARIABLELEX INCREASE','BUCLE',2,'p_BUCLE','syntax.py',150),
  ('BUCLE -> DECREASE VARIABLELEX','BUCLE',2,'p_BUCLE','syntax.py',151),
  ('FOR_STRUCTURE -> FOR LPAREN DECLARATIONS SEMICOLON COMPARISONS SEMICOLON BUCLE RPAREN','FOR_STRUCTURE',8,'p_FOR_STRUCTURE','syntax.py',159),
  ('IF_STRUCTURE -> IF LPAREN COMPARISONS RPAREN LCURL_BRACE EXPRESSIONS RCURL_BRACE','IF_STRUCTURE',7,'p_IF_STRUCTURE','syntax.py',172),
  ('IF_STRUCTURE -> IF LPAREN COMPARISONS RPAREN LCURL_BRACE EXPRESSIONS RCURL_BRACE ELSE_STRUCTURE','IF_STRUCTURE',8,'p_IF_STRUCTURE','syntax.py',173),
  ('ELSE_STRUCTURE -> ELSE LCURL_BRACE EXPRESSIONS RCURL_BRACE','ELSE_STRUCTURE',4,'p_ELSE_STRUCTURE','syntax.py',180),
  ('ELSE_STRUCTURE -> ELSE IF_STRUCTURE','ELSE_STRUCTURE',2,'p_ELSE_STRUCTURE','syntax.py',181),
  ('DECLARATIONS -> INTEGER_DECLARATION','DECLARATIONS',1,'p_DECLARATIONS','syntax.py',188),
  ('DECLARATIONS -> DECIMAL_DECLARATION','DECLARATIONS',1,'p_DECLARATIONS','syntax.py',189),
  ('CODE -> FUNCTION','CODE',1,'p_CODE','syntax.py',196),
  ('CODE -> INTEGER_DECLARATION','CODE',1,'p_CODE','syntax.py',197),
  ('CODE -> DECIMAL_DECLARATION','CODE',1,'p_CODE','syntax.py',198),
  ('CODE -> ASSIGNMENT_DECLARATION','CODE',1,'p_CODE','syntax.py',199),
  ('CODE -> COMENTARIOLEX','CODE',1,'p_CODE','syntax.py',200),
  ('EXPRESSION -> CODE SEMICOLON','EXPRESSION',2,'p_EXPRESSION','syntax.py',207),
  ('EXPRESSION -> CONTROL_STRUCTURES','EXPRESSION',1,'p_EXPRESSION','syntax.py',208),
  ('EXPRESSIONS -> EXPRESSION','EXPRESSIONS',1,'p_EXPRESSIONS','syntax.py',215),
  ('EXPRESSIONS -> EXPRESSION EXPRESSIONS','EXPRESSIONS',2,'p_EXPRESSIONS','syntax.py',216),
  ('FUNCTION -> VARNAME LPAREN FUNCTION_ARGUMENTS RPAREN','FUNCTION',4,'p_FUNCTION','syntax.py',223),
  ('FUNCTION_ARGUMENTS -> SENTENCES','FUNCTION_ARGUMENTS',1,'p_FUNCTION_ARGUMENTS','syntax.py',230),
  ('FUNCTION_ARGUMENTS -> COMPARISONS','FUNCTION_ARGUMENTS',1,'p_FUNCTION_ARGUMENTS','syntax.py',231),
  ('INTEGER_TYPE -> INT','INTEGER_TYPE',1,'p_INTEGER_TYPE','syntax.py',238),
  ('INTEGER_TYPE -> SHORT','INTEGER_TYPE',1,'p_INTEGER_TYPE','syntax.py',239),
  ('INTEGER_TYPE -> LONG','INTEGER_TYPE',1,'p_INTEGER_TYPE','syntax.py',240),
  ('DECIMAL_TYPE -> FLOAT','DECIMAL_TYPE',1,'p_DECIMAL_TYPE','syntax.py',247),
  ('DECIMAL_TYPE -> DOUBLE','DECIMAL_TYPE',1,'p_DECIMAL_TYPE','syntax.py',248),
  ('INTEGER_DECLARATION -> INTEGER_TYPE VARNAME EQUAL INTEGER','INTEGER_DECLARATION',4,'p_INTEGER_DECLARATION','syntax.py',255),
  ('DECIMAL_DECLARATION -> DECIMAL_TYPE VARNAME EQUAL DECIMAL','DECIMAL_DECLARATION',4,'p_DECIMAL_DECLARATION','syntax.py',262),
  ('ASSIGNMENT_DECLARATION -> VARNAME ASSIGNMENT_OPERATOR SENTENCE','ASSIGNMENT_DECLARATION',3,'p_ASSIGNMENT_DECLARATION','syntax.py',269),
  ('ASSIGNMENT_OPERATOR -> EQUAL','ASSIGNMENT_OPERATOR',1,'p_ASSIGNMENT_OPERATOR','syntax.py',276),
  ('ASSIGNMENT_OPERATOR -> PLUS_EQUAL','ASSIGNMENT_OPERATOR',1,'p_ASSIGNMENT_OPERATOR','syntax.py',277),
  ('ASSIGNMENT_OPERATOR -> MINUS_EQUAL','ASSIGNMENT_OPERATOR',1,'p_ASSIGNMENT_OPERATOR','syntax.py',278),
  ('ASSIGNMENT_OPERATOR -> DIV_EQUAL','ASSIGNMENT_OPERATOR',1,'p_ASSIGNMENT_OPERATOR','syntax.py',279),
  ('ASSIGNMENT_OPERATOR -> TIMES_EQUAL','ASSIGNMENT_OPERATOR',1,'p_ASSIGNMENT_OPERATOR','syntax.py',280),
  ('ASSIGNMENT_OPERATOR -> MOD_EQUAL','ASSIGNMENT_OPERATOR',1,'p_ASSIGNMENT_OPERATOR','syntax.py',281),
  ('ASSIGNMENT_OPERATOR -> AND_EQUAL','ASSIGNMENT_OPERATOR',1,'p_ASSIGNMENT_OPERATOR','syntax.py',282),
  ('ASSIGNMENT_OPERATOR -> OR_EQUAL','ASSIGNMENT_OPERATOR',1,'p_ASSIGNMENT_OPERATOR','syntax.py',283),
  ('ASSIGNMENT_OPERATOR -> XOR_EQUAL','ASSIGNMENT_OPERATOR',1,'p_ASSIGNMENT_OPERATOR','syntax.py',284),
  ('ASSIGNMENT_OPERATOR -> COMPLEMENT_EQUAL','ASSIGNMENT_OPERATOR',1,'p_ASSIGNMENT_OPERATOR','syntax.py',285),
  ('ASSIGNMENT_OPERATOR -> SHIFTL_EQUAL','ASSIGNMENT_OPERATOR',1,'p_ASSIGNMENT_OPERATOR','syntax.py',286),
  ('ASSIGNMENT_OPERATOR -> SHIFTR_EQUAL','ASSIGNMENT_OPERATOR',1,'p_ASSIGNMENT_OPERATOR','syntax.py',287),
  ('COMENTARIOLEX -> COMMENT','COMENTARIOLEX',1,'p_COMENTARIOLEX','syntax.py',294),
  ('VARIABLELEX -> VARNAME','VARIABLELEX',1,'p_VARIABLELEX','syntax.py',301),
  ('OPERATOR -> PLUS','OPERATOR',1,'p_OPERATOR','syntax.py',308),
  ('OPERATOR -> MINUS','OPERATOR',1,'p_OPERATOR','syntax.py',309),
  ('OPERATOR -> TIMES','OPERATOR',1,'p_OPERATOR','syntax.py',310),
  ('OPERATOR -> MODULUS','OPERATOR',1,'p_OPERATOR','syntax.py',311),
  ('OPERATOR -> DIVIDE','OPERATOR',1,'p_OPERATOR','syntax.py',312),
  ('OPERATION -> NUMBER OPERATOR NUMBER','OPERATION',3,'p_OPERATION','syntax.py',319),
  ('OPERATIONS -> OPERATION','OPERATIONS',1,'p_OPERATIONS','syntax.py',326),
  ('OPERATIONS -> OPERATION OPERATOR OPERATIONS','OPERATIONS',3,'p_OPERATIONS','syntax.py',327),
  ('COMPARISON_OPERATOR -> EQUAL_TO','COMPARISON_OPERATOR',1,'p_COMPARISON_OPERATOR','syntax.py',334),
  ('COMPARISON_OPERATOR -> NOT_EQUAL','COMPARISON_OPERATOR',1,'p_COMPARISON_OPERATOR','syntax.py',335),
  ('COMPARISON_OPERATOR -> GREATER_THAN','COMPARISON_OPERATOR',1,'p_COMPARISON_OPERATOR','syntax.py',336),
  ('COMPARISON_OPERATOR -> LESS_THAN','COMPARISON_OPERATOR',1,'p_COMPARISON_OPERATOR','syntax.py',337),
  ('COMPARISON_OPERATOR -> GREATER_EQUAL','COMPARISON_OPERATOR',1,'p_COMPARISON_OPERATOR','syntax.py',338),
  ('COMPARISON_OPERATOR -> LESS_EQUAL','COMPARISON_OPERATOR',1,'p_COMPARISON_OPERATOR','syntax.py',339),
  ('COMPARISON -> VALUE COMPARISON_OPERATOR VALUE','COMPARISON',3,'p_COMPARISON','syntax.py',346),
  ('COMPARISON -> SENTENCE COMPARISON_OPERATOR SENTENCE','COMPARISON',3,'p_COMPARISON','syntax.py',347),
  ('COMPARISONS -> COMPARISON','COMPARISONS',1,'p_COMPARISONS','syntax.py',354),
  ('COMPARISONS -> COMPARISON LOGICAL_OPERATOR COMPARISONS','COMPARISONS',3,'p_COMPARISONS','syntax.py',355),
  ('LOGICAL_OPERATOR -> AND','LOGICAL_OPERATOR',1,'p_LOGICAL_OPERATOR','syntax.py',362),
  ('LOGICAL_OPERATOR -> OR','LOGICAL_OPERATOR',1,'p_LOGICAL_OPERATOR','syntax.py',363),
  ('LOGICAL_OPERATOR -> NOT','LOGICAL_OPERATOR',1,'p_LOGICAL_OPERATOR','syntax.py',364),
  ('SENTENCE -> NUMBER','SENTENCE',1,'p_SENTENCE','syntax.py',371),
  ('SENTENCE -> VARNAME','SENTENCE',1,'p_SENTENCE','syntax.py',372),
  ('SENTENCES -> SENTENCE','SENTENCES',1,'p_SENTENCES','syntax.py',379),
  ('SENTENCES -> SENTENCE COMMA SENTENCES','SENTENCES',3,'p_SENTENCES','syntax.py',380),
]
