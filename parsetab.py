
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'AMPERSAND AND AND_EQUAL AUTO BACKSLASH BACKSPACE BREAK B_AND B_COMPLEMENT B_OR B_XOR CASE CHAR CHARACTER COLON COMMA COMMENT COMPLEMENT_EQUAL CONST CONTINUE DECIMAL DEFAULT DIVIDE DIV_EQUAL DO DOT DOUBLE DOUBLE_APOS DOUBLE_QUOTE ELSE ELSEIF ENUM EQUAL EQUAL_TO EXTERN FF_PAGEBREAK FLOAT FOR FS_CHAR FS_DOUBLE FS_FLOAT FS_HEX FS_INT FS_LONG FS_LONG_DOUBLE FS_OCT FS_OCT_LONG FS_POINTER FS_SCI_NOTATION FS_STRING FS_UNSIGNED_INT FS_UNSIGNED_LONG GOTO GREATER_EQUAL GREATER_THAN HEADER_LIB HTAB IF IGNORE INT INTEGER LBRACKET LCURL_BRACE LESS_EQUAL LESS_THAN LONG LPAREN MINUS MINUS_EQUAL MODULUS MOD_EQUAL NEWLINE NOT NOT_EQUAL NULL OR OR_EQUAL PLUS PLUS_EQUAL PP_DATE PP_DEFINE PP_DTMACRO PP_ERROR PP_FILE PP_IF PP_IFDEF PP_IFNDEF PP_INCLUDE PP_LINE PP_PRAGMA PP_STMACRO PP_TIME PP_TIMESTAMP PP_UNDEF QUESTIONMARK RBRACKET RCURL_BRACE REGISTER RETURN RPAREN SEMICOLON SHIFTL_EQUAL SHIFTR_EQUAL SHIFT_LEFT SHIFT_RIGHT SHORT SIGNED SINGLE_APOS SINGLE_QUOTE SIZEOF STATIC STRING STRUCT SWITCH TILDE TIMES TIMES_EQUAL TYPEDEF UNION UNSIGNED VARNAME VOID VOLTILE VTAB WHILE XOR_EQUAL\n    EXPRESSION : COMENTARIOLEX\n                | VARIABLELEX \n                | OPERATION\n                | DECLARATION\n                | SENTENCIAS\n                | INCLUDE\n\n\n    \n    INCLUDE : PP_INCLUDE LESS_THAN HEADER_LIB GREATER_THAN \n              | PP_INCLUDE DOUBLE_APOS HEADER_LIB DOUBLE_APOS\n  \n    VALUE : INTEGER\n            | DECIMAL\n    \n    SENTENCIAS : IF\n                | ELSEIF\n                | ELSE\n                | FOR\n                | WHILE\n                | SWITCH\n    \n    DATA_TYPE : INT \n                | FLOAT\n                | LONG \n                | DOUBLE\n                | CHAR\n                | SHORT           \n    \n    DECLARATION : DATA_TYPE VARNAME EQUAL INTEGER\n    \n    COMENTARIOLEX : COMMENT\n    \n    VARIABLELEX : VARNAME\n    \n    OPERADOR : PLUS\n              | MINUS\n              | TIMES\n              | MODULUS\n              | DIVIDE\n    \n    OPERATION : VALUE OPERADOR VALUE\n    '
    
_lr_action_items = {'COMMENT':([0,],[8,]),'VARNAME':([0,11,21,22,23,24,25,26,],[9,33,-17,-18,-19,-20,-21,-22,]),'IF':([0,],[13,]),'ELSEIF':([0,],[14,]),'ELSE':([0,],[15,]),'FOR':([0,],[16,]),'WHILE':([0,],[17,]),'SWITCH':([0,],[18,]),'PP_INCLUDE':([0,],[19,]),'INTEGER':([0,27,28,29,30,31,32,37,],[12,12,-26,-27,-28,-29,-30,40,]),'DECIMAL':([0,27,28,29,30,31,32,],[20,20,-26,-27,-28,-29,-30,]),'INT':([0,],[21,]),'FLOAT':([0,],[22,]),'LONG':([0,],[23,]),'DOUBLE':([0,],[24,]),'CHAR':([0,],[25,]),'SHORT':([0,],[26,]),'$end':([1,2,3,4,5,6,7,8,9,12,13,14,15,16,17,18,20,36,40,41,42,],[0,-1,-2,-3,-4,-5,-6,-24,-25,-9,-11,-12,-13,-14,-15,-16,-10,-31,-23,-7,-8,]),'PLUS':([10,12,20,],[28,-9,-10,]),'MINUS':([10,12,20,],[29,-9,-10,]),'TIMES':([10,12,20,],[30,-9,-10,]),'MODULUS':([10,12,20,],[31,-9,-10,]),'DIVIDE':([10,12,20,],[32,-9,-10,]),'LESS_THAN':([19,],[34,]),'DOUBLE_APOS':([19,39,],[35,42,]),'EQUAL':([33,],[37,]),'HEADER_LIB':([34,35,],[38,39,]),'GREATER_THAN':([38,],[41,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'EXPRESSION':([0,],[1,]),'COMENTARIOLEX':([0,],[2,]),'VARIABLELEX':([0,],[3,]),'OPERATION':([0,],[4,]),'DECLARATION':([0,],[5,]),'SENTENCIAS':([0,],[6,]),'INCLUDE':([0,],[7,]),'VALUE':([0,27,],[10,36,]),'DATA_TYPE':([0,],[11,]),'OPERADOR':([10,],[27,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> EXPRESSION","S'",1,None,None,None),
  ('EXPRESSION -> COMENTARIOLEX','EXPRESSION',1,'p_EXPRESSION','syntactic.py',7),
  ('EXPRESSION -> VARIABLELEX','EXPRESSION',1,'p_EXPRESSION','syntactic.py',8),
  ('EXPRESSION -> OPERATION','EXPRESSION',1,'p_EXPRESSION','syntactic.py',9),
  ('EXPRESSION -> DECLARATION','EXPRESSION',1,'p_EXPRESSION','syntactic.py',10),
  ('EXPRESSION -> SENTENCIAS','EXPRESSION',1,'p_EXPRESSION','syntactic.py',11),
  ('EXPRESSION -> INCLUDE','EXPRESSION',1,'p_EXPRESSION','syntactic.py',12),
  ('INCLUDE -> PP_INCLUDE LESS_THAN HEADER_LIB GREATER_THAN','INCLUDE',4,'p_INCLUDE','syntactic.py',22),
  ('INCLUDE -> PP_INCLUDE DOUBLE_APOS HEADER_LIB DOUBLE_APOS','INCLUDE',4,'p_INCLUDE','syntactic.py',23),
  ('VALUE -> INTEGER','VALUE',1,'p_VALUE','syntactic.py',29),
  ('VALUE -> DECIMAL','VALUE',1,'p_VALUE','syntactic.py',30),
  ('SENTENCIAS -> IF','SENTENCIAS',1,'p_SENTENCIAS','syntactic.py',35),
  ('SENTENCIAS -> ELSEIF','SENTENCIAS',1,'p_SENTENCIAS','syntactic.py',36),
  ('SENTENCIAS -> ELSE','SENTENCIAS',1,'p_SENTENCIAS','syntactic.py',37),
  ('SENTENCIAS -> FOR','SENTENCIAS',1,'p_SENTENCIAS','syntactic.py',38),
  ('SENTENCIAS -> WHILE','SENTENCIAS',1,'p_SENTENCIAS','syntactic.py',39),
  ('SENTENCIAS -> SWITCH','SENTENCIAS',1,'p_SENTENCIAS','syntactic.py',40),
  ('DATA_TYPE -> INT','DATA_TYPE',1,'p_DATA_TYPE','syntactic.py',47),
  ('DATA_TYPE -> FLOAT','DATA_TYPE',1,'p_DATA_TYPE','syntactic.py',48),
  ('DATA_TYPE -> LONG','DATA_TYPE',1,'p_DATA_TYPE','syntactic.py',49),
  ('DATA_TYPE -> DOUBLE','DATA_TYPE',1,'p_DATA_TYPE','syntactic.py',50),
  ('DATA_TYPE -> CHAR','DATA_TYPE',1,'p_DATA_TYPE','syntactic.py',51),
  ('DATA_TYPE -> SHORT','DATA_TYPE',1,'p_DATA_TYPE','syntactic.py',52),
  ('DECLARATION -> DATA_TYPE VARNAME EQUAL INTEGER','DECLARATION',4,'p_DECLARATION','syntactic.py',58),
  ('COMENTARIOLEX -> COMMENT','COMENTARIOLEX',1,'p_COMENTARIOLEX','syntactic.py',67),
  ('VARIABLELEX -> VARNAME','VARIABLELEX',1,'p_VARIABLELEX','syntactic.py',74),
  ('OPERADOR -> PLUS','OPERADOR',1,'p_OPERADOR','syntactic.py',81),
  ('OPERADOR -> MINUS','OPERADOR',1,'p_OPERADOR','syntactic.py',82),
  ('OPERADOR -> TIMES','OPERADOR',1,'p_OPERADOR','syntactic.py',83),
  ('OPERADOR -> MODULUS','OPERADOR',1,'p_OPERADOR','syntactic.py',84),
  ('OPERADOR -> DIVIDE','OPERADOR',1,'p_OPERADOR','syntactic.py',85),
  ('OPERATION -> VALUE OPERADOR VALUE','OPERATION',3,'p_OPERATION','syntactic.py',92),
]
