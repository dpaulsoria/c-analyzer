
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'AMPERSAND AND AND_EQUAL AUTO BACKSLASH BACKSPACE BREAK B_AND B_COMPLEMENT B_OR B_XOR CASE CHAR CHARACTER COLON COMMA COMMENT COMPLEMENT_EQUAL CONST CONTINUE DECIMAL DEFAULT DIVIDE DIV_EQUAL DO DOT DOUBLE DOUBLE_APOS DOUBLE_QUOTE ELSE ELSEIF ENUM EQUAL EQUAL_TO EXTERN FF_PAGEBREAK FLOAT FOR FS_CHAR FS_DOUBLE FS_FLOAT FS_HEX FS_INT FS_LONG FS_LONG_DOUBLE FS_OCT FS_OCT_LONG FS_POINTER FS_SCI_NOTATION FS_STRING FS_UNSIGNED_INT FS_UNSIGNED_LONG GOTO GREATER_EQUAL GREATER_THAN HEADER_LIB HTAB IF IGNORE INT INTEGER LBRACKET LCURL_BRACE LESS_EQUAL LESS_THAN LONG LPAREN MINUS MINUS_EQUAL MODULUS MOD_EQUAL NEWLINE NOT NOT_EQUAL NULL OR OR_EQUAL PLUS PLUS_EQUAL PP_DATE PP_DEFINE PP_DTMACRO PP_ERROR PP_FILE PP_IF PP_IFDEF PP_IFNDEF PP_INCLUDE PP_LINE PP_PRAGMA PP_STMACRO PP_TIME PP_TIMESTAMP PP_UNDEF QUESTIONMARK RBRACKET RCURL_BRACE REGISTER RETURN RPAREN SEMICOLON SHIFTL_EQUAL SHIFTR_EQUAL SHIFT_LEFT SHIFT_RIGHT SHORT SIGNED SINGLE_APOS SINGLE_QUOTE SIZEOF STATIC STRING STRUCT SWITCH TILDE TIMES TIMES_EQUAL TYPEDEF UNION UNSIGNED VARNAME VOID VOLTILE VTAB WHILE XOR_EQUAL\n    ROOT : COMENTARIOLEX\n                | VARIABLELEX \n                | OPERATION\n                | OPERATIONS\n                | OPERATOR\n                | INCLUDE\n                | DEFINE\n                | PREPROCESOR_DIRECTIVE\n                | LOGICAL_OPERATOR\n                | COMPARISONS\n                | COMPARISON\n                | COMPARISON_OPERATOR\n                | DECIMAL_DECLARATION\n                | INTEGER_DECLARATION\n                | DECIMAL_TYPE\n                | INTEGER_TYPE\n                | ASSIGNMENT_DECLARATION\n                | ASSIGNMENT_OPERATOR\n\n    \n    PREPROCESOR_DIRECTIVE : DEFINE\n                            | INCLUDE\n    \n    DEFINE : PP_DEFINE VARIABLELEX VALUE\n    \n    \n    INCLUDE : PP_INCLUDE HEADER_LIB\n    \n    VALUE : NUMBER \n            | STRING\n    \n    NUMBER : INTEGER\n            | DECIMAL\n    \n    CONTROL_STRUCTURES : IF_STRUCTURE\n                        | FOR_STRUCTURE\n                        | WHILE_STRUCTURE\n                        | SWITCH_STRUCTURE\n    \n    WHILE_STRUCTURE : INTEGER\n    \n    SWITCH_STRUCTURE : WHILE LPAREN COMPARISONS RPAREN LCURL_BRACE EXPRESSIONS RCURL_BRACE\n    \n    IF_STRUCTURE : IF LPAREN COMPARISONS RPAREN LCURL_BRACE EXPRESSIONS RCURL_BRACE\n    \n    FOR_STRUCTURE : VARNAME\n    \n    CODE : FUNCTION\n        | CONTROL_STRUCTURES\n        | INTEGER_DECLARATION\n        | DECIMAL_DECLARATION\n        | ASSIGNMENT_DECLARATION\n        | COMENTARIOLEX\n    \n    EXPRESSION : CODE SEMICOLON\n    \n    EXPRESSIONS : EXPRESSION\n                | EXPRESSION EXPRESSIONS\n    \n    FUNCTION : VARNAME LPAREN RPAREN\n    \n    INTEGER_TYPE : INT\n                | SHORT\n                | LONG\n    \n    DECIMAL_TYPE : FLOAT\n                | DOUBLE\n    \n    INTEGER_DECLARATION : INTEGER_TYPE VARNAME EQUAL INTEGER\n    \n    DECIMAL_DECLARATION : DECIMAL_TYPE VARNAME EQUAL DECIMAL\n    \n    ASSIGNMENT_DECLARATION : VARNAME ASSIGNMENT_OPERATOR SENTENCE\n    \n    ASSIGNMENT_OPERATOR : EQUAL\n                        | PLUS_EQUAL\n                        | MINUS_EQUAL\n                        | DIV_EQUAL\n                        | TIMES_EQUAL\n                        | MOD_EQUAL\n                        | AND_EQUAL\n                        | OR_EQUAL\n                        | XOR_EQUAL\n                        | COMPLEMENT_EQUAL\n                        | SHIFTL_EQUAL\n                        | SHIFTR_EQUAL\n    \n    COMENTARIOLEX : COMMENT\n    \n    VARIABLELEX : VARNAME\n    \n    OPERATOR : PLUS\n              | MINUS\n              | TIMES\n              | MODULUS\n              | DIVIDE\n    \n    OPERATION : NUMBER OPERATOR NUMBER\n    \n    OPERATIONS : OPERATION\n                | OPERATION OPERATOR OPERATIONS\n    \n    COMPARISON_OPERATOR : EQUAL_TO\n                        | NOT_EQUAL\n                        | GREATER_THAN\n                        | LESS_THAN\n                        | GREATER_EQUAL\n                        | LESS_EQUAL\n    \n    COMPARISON : VALUE COMPARISON_OPERATOR VALUE\n    \n    COMPARISONS : COMPARISON\n                | COMPARISON LOGICAL_OPERATOR COMPARISONS\n    \n    LOGICAL_OPERATOR : AND\n                    | OR\n                    | NOT\n    \n    SENTENCE : NUMBER\n            | VARNAME\n    '
    
_lr_action_items = {'COMMENT':([0,],[20,]),'VARNAME':([0,16,17,29,40,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,64,],[21,62,63,68,-53,-48,-49,-45,-46,-47,-54,-55,-56,-57,-58,-59,-60,-61,-62,-63,-64,78,]),'PLUS':([0,4,22,41,42,70,72,81,],[23,23,23,-26,-25,23,23,-72,]),'MINUS':([0,4,22,41,42,70,72,81,],[24,24,24,-26,-25,24,24,-72,]),'TIMES':([0,4,22,41,42,70,72,81,],[25,25,25,-26,-25,25,25,-72,]),'MODULUS':([0,4,22,41,42,70,72,81,],[26,26,26,-26,-25,26,26,-72,]),'DIVIDE':([0,4,22,41,42,70,72,81,],[27,27,27,-26,-25,27,27,-72,]),'PP_INCLUDE':([0,],[28,]),'PP_DEFINE':([0,],[29,]),'AND':([0,12,41,42,59,73,75,83,],[31,31,-26,-25,-24,31,-23,-81,]),'OR':([0,12,41,42,59,73,75,83,],[32,32,-26,-25,-24,32,-23,-81,]),'NOT':([0,12,41,42,59,73,75,83,],[33,33,-26,-25,-24,33,-23,-81,]),'EQUAL_TO':([0,22,30,41,42,59,75,],[34,-23,34,-26,-25,-24,-23,]),'NOT_EQUAL':([0,22,30,41,42,59,75,],[35,-23,35,-26,-25,-24,-23,]),'GREATER_THAN':([0,22,30,41,42,59,75,],[36,-23,36,-26,-25,-24,-23,]),'LESS_THAN':([0,22,30,41,42,59,75,],[37,-23,37,-26,-25,-24,-23,]),'GREATER_EQUAL':([0,22,30,41,42,59,75,],[38,-23,38,-26,-25,-24,-23,]),'LESS_EQUAL':([0,22,30,41,42,59,75,],[39,-23,39,-26,-25,-24,-23,]),'FLOAT':([0,],[43,]),'DOUBLE':([0,],[44,]),'INT':([0,],[45,]),'SHORT':([0,],[46,]),'LONG':([0,],[47,]),'EQUAL':([0,21,62,63,],[40,40,76,77,]),'PLUS_EQUAL':([0,21,],[48,48,]),'MINUS_EQUAL':([0,21,],[49,49,]),'DIV_EQUAL':([0,21,],[50,50,]),'TIMES_EQUAL':([0,21,],[51,51,]),'MOD_EQUAL':([0,21,],[52,52,]),'AND_EQUAL':([0,21,],[53,53,]),'OR_EQUAL':([0,21,],[54,54,]),'XOR_EQUAL':([0,21,],[55,55,]),'COMPLEMENT_EQUAL':([0,21,],[56,56,]),'SHIFTL_EQUAL':([0,21,],[57,57,]),'SHIFTR_EQUAL':([0,21,],[58,58,]),'INTEGER':([0,23,24,25,26,27,31,32,33,34,35,36,37,38,39,40,48,49,50,51,52,53,54,55,56,57,58,60,61,64,65,67,68,69,77,],[42,-67,-68,-69,-70,-71,-84,-85,-86,-75,-76,-77,-78,-79,-80,-53,-54,-55,-56,-57,-58,-59,-60,-61,-62,-63,-64,42,42,42,42,42,-66,42,85,]),'DECIMAL':([0,23,24,25,26,27,31,32,33,34,35,36,37,38,39,40,48,49,50,51,52,53,54,55,56,57,58,60,61,64,65,67,68,69,76,],[41,-67,-68,-69,-70,-71,-84,-85,-86,-75,-76,-77,-78,-79,-80,-53,-54,-55,-56,-57,-58,-59,-60,-61,-62,-63,-64,41,41,41,41,41,-66,41,84,]),'STRING':([0,31,32,33,34,35,36,37,38,39,61,67,68,69,],[59,-84,-85,-86,-75,-76,-77,-78,-79,-80,59,59,-66,59,]),'$end':([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,23,24,25,26,27,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,66,70,71,73,74,75,78,79,80,81,82,83,84,85,],[0,-1,-2,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,-65,-66,-67,-68,-69,-70,-71,-84,-85,-86,-75,-76,-77,-78,-79,-80,-53,-26,-25,-48,-49,-45,-46,-47,-54,-55,-56,-57,-58,-59,-60,-61,-62,-63,-64,-24,-22,-73,-74,-82,-83,-23,-88,-52,-87,-72,-21,-81,-51,-50,]),'HEADER_LIB':([28,],[66,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'ROOT':([0,],[1,]),'COMENTARIOLEX':([0,],[2,]),'VARIABLELEX':([0,29,],[3,67,]),'OPERATION':([0,60,],[4,70,]),'OPERATIONS':([0,60,],[5,71,]),'OPERATOR':([0,4,22,70,72,],[6,60,65,60,65,]),'INCLUDE':([0,],[7,]),'DEFINE':([0,],[8,]),'PREPROCESOR_DIRECTIVE':([0,],[9,]),'LOGICAL_OPERATOR':([0,12,73,],[10,61,61,]),'COMPARISONS':([0,61,],[11,74,]),'COMPARISON':([0,61,],[12,73,]),'COMPARISON_OPERATOR':([0,30,],[13,69,]),'DECIMAL_DECLARATION':([0,],[14,]),'INTEGER_DECLARATION':([0,],[15,]),'DECIMAL_TYPE':([0,],[16,]),'INTEGER_TYPE':([0,],[17,]),'ASSIGNMENT_DECLARATION':([0,],[18,]),'ASSIGNMENT_OPERATOR':([0,21,],[19,64,]),'NUMBER':([0,60,61,64,65,67,69,],[22,72,75,80,81,75,75,]),'VALUE':([0,61,67,69,],[30,30,82,83,]),'SENTENCE':([64,],[79,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> ROOT","S'",1,None,None,None),
  ('ROOT -> COMENTARIOLEX','ROOT',1,'p_ROOT','syntax.py',7),
  ('ROOT -> VARIABLELEX','ROOT',1,'p_ROOT','syntax.py',8),
  ('ROOT -> OPERATION','ROOT',1,'p_ROOT','syntax.py',9),
  ('ROOT -> OPERATIONS','ROOT',1,'p_ROOT','syntax.py',10),
  ('ROOT -> OPERATOR','ROOT',1,'p_ROOT','syntax.py',11),
  ('ROOT -> INCLUDE','ROOT',1,'p_ROOT','syntax.py',12),
  ('ROOT -> DEFINE','ROOT',1,'p_ROOT','syntax.py',13),
  ('ROOT -> PREPROCESOR_DIRECTIVE','ROOT',1,'p_ROOT','syntax.py',14),
  ('ROOT -> LOGICAL_OPERATOR','ROOT',1,'p_ROOT','syntax.py',15),
  ('ROOT -> COMPARISONS','ROOT',1,'p_ROOT','syntax.py',16),
  ('ROOT -> COMPARISON','ROOT',1,'p_ROOT','syntax.py',17),
  ('ROOT -> COMPARISON_OPERATOR','ROOT',1,'p_ROOT','syntax.py',18),
  ('ROOT -> DECIMAL_DECLARATION','ROOT',1,'p_ROOT','syntax.py',19),
  ('ROOT -> INTEGER_DECLARATION','ROOT',1,'p_ROOT','syntax.py',20),
  ('ROOT -> DECIMAL_TYPE','ROOT',1,'p_ROOT','syntax.py',21),
  ('ROOT -> INTEGER_TYPE','ROOT',1,'p_ROOT','syntax.py',22),
  ('ROOT -> ASSIGNMENT_DECLARATION','ROOT',1,'p_ROOT','syntax.py',23),
  ('ROOT -> ASSIGNMENT_OPERATOR','ROOT',1,'p_ROOT','syntax.py',24),
  ('PREPROCESOR_DIRECTIVE -> DEFINE','PREPROCESOR_DIRECTIVE',1,'p_PREPROCESOR_DIRECTIVE','syntax.py',33),
  ('PREPROCESOR_DIRECTIVE -> INCLUDE','PREPROCESOR_DIRECTIVE',1,'p_PREPROCESOR_DIRECTIVE','syntax.py',34),
  ('DEFINE -> PP_DEFINE VARIABLELEX VALUE','DEFINE',3,'p_DEFINE','syntax.py',41),
  ('INCLUDE -> PP_INCLUDE HEADER_LIB','INCLUDE',2,'p_INCLUDE','syntax.py',49),
  ('VALUE -> NUMBER','VALUE',1,'p_VALUE','syntax.py',56),
  ('VALUE -> STRING','VALUE',1,'p_VALUE','syntax.py',57),
  ('NUMBER -> INTEGER','NUMBER',1,'p_NUMBER','syntax.py',64),
  ('NUMBER -> DECIMAL','NUMBER',1,'p_NUMBER','syntax.py',65),
  ('CONTROL_STRUCTURES -> IF_STRUCTURE','CONTROL_STRUCTURES',1,'p_CONTROL_STRUCTURES','syntax.py',72),
  ('CONTROL_STRUCTURES -> FOR_STRUCTURE','CONTROL_STRUCTURES',1,'p_CONTROL_STRUCTURES','syntax.py',73),
  ('CONTROL_STRUCTURES -> WHILE_STRUCTURE','CONTROL_STRUCTURES',1,'p_CONTROL_STRUCTURES','syntax.py',74),
  ('CONTROL_STRUCTURES -> SWITCH_STRUCTURE','CONTROL_STRUCTURES',1,'p_CONTROL_STRUCTURES','syntax.py',75),
  ('WHILE_STRUCTURE -> INTEGER','WHILE_STRUCTURE',1,'p_WHILE_STRUCTURE','syntax.py',85),
  ('SWITCH_STRUCTURE -> WHILE LPAREN COMPARISONS RPAREN LCURL_BRACE EXPRESSIONS RCURL_BRACE','SWITCH_STRUCTURE',7,'p_SWITCH_STRUCTURE','syntax.py',92),
  ('IF_STRUCTURE -> IF LPAREN COMPARISONS RPAREN LCURL_BRACE EXPRESSIONS RCURL_BRACE','IF_STRUCTURE',7,'p_IF_STRUCTURE','syntax.py',99),
  ('FOR_STRUCTURE -> VARNAME','FOR_STRUCTURE',1,'p_FOR_STRUCTURE','syntax.py',106),
  ('CODE -> FUNCTION','CODE',1,'p_CODE','syntax.py',115),
  ('CODE -> CONTROL_STRUCTURES','CODE',1,'p_CODE','syntax.py',116),
  ('CODE -> INTEGER_DECLARATION','CODE',1,'p_CODE','syntax.py',117),
  ('CODE -> DECIMAL_DECLARATION','CODE',1,'p_CODE','syntax.py',118),
  ('CODE -> ASSIGNMENT_DECLARATION','CODE',1,'p_CODE','syntax.py',119),
  ('CODE -> COMENTARIOLEX','CODE',1,'p_CODE','syntax.py',120),
  ('EXPRESSION -> CODE SEMICOLON','EXPRESSION',2,'p_EXPRESSION','syntax.py',127),
  ('EXPRESSIONS -> EXPRESSION','EXPRESSIONS',1,'p_EXPRESSIONS','syntax.py',134),
  ('EXPRESSIONS -> EXPRESSION EXPRESSIONS','EXPRESSIONS',2,'p_EXPRESSIONS','syntax.py',135),
  ('FUNCTION -> VARNAME LPAREN RPAREN','FUNCTION',3,'p_FUNCTION','syntax.py',142),
  ('INTEGER_TYPE -> INT','INTEGER_TYPE',1,'p_INTEGER_TYPE','syntax.py',149),
  ('INTEGER_TYPE -> SHORT','INTEGER_TYPE',1,'p_INTEGER_TYPE','syntax.py',150),
  ('INTEGER_TYPE -> LONG','INTEGER_TYPE',1,'p_INTEGER_TYPE','syntax.py',151),
  ('DECIMAL_TYPE -> FLOAT','DECIMAL_TYPE',1,'p_DECIMAL_TYPE','syntax.py',158),
  ('DECIMAL_TYPE -> DOUBLE','DECIMAL_TYPE',1,'p_DECIMAL_TYPE','syntax.py',159),
  ('INTEGER_DECLARATION -> INTEGER_TYPE VARNAME EQUAL INTEGER','INTEGER_DECLARATION',4,'p_INTEGER_DECLARATION','syntax.py',166),
  ('DECIMAL_DECLARATION -> DECIMAL_TYPE VARNAME EQUAL DECIMAL','DECIMAL_DECLARATION',4,'p_DECIMAL_DECLARATION','syntax.py',173),
  ('ASSIGNMENT_DECLARATION -> VARNAME ASSIGNMENT_OPERATOR SENTENCE','ASSIGNMENT_DECLARATION',3,'p_ASSIGNMENT_DECLARATION','syntax.py',180),
  ('ASSIGNMENT_OPERATOR -> EQUAL','ASSIGNMENT_OPERATOR',1,'p_ASSIGNMENT_OPERATOR','syntax.py',187),
  ('ASSIGNMENT_OPERATOR -> PLUS_EQUAL','ASSIGNMENT_OPERATOR',1,'p_ASSIGNMENT_OPERATOR','syntax.py',188),
  ('ASSIGNMENT_OPERATOR -> MINUS_EQUAL','ASSIGNMENT_OPERATOR',1,'p_ASSIGNMENT_OPERATOR','syntax.py',189),
  ('ASSIGNMENT_OPERATOR -> DIV_EQUAL','ASSIGNMENT_OPERATOR',1,'p_ASSIGNMENT_OPERATOR','syntax.py',190),
  ('ASSIGNMENT_OPERATOR -> TIMES_EQUAL','ASSIGNMENT_OPERATOR',1,'p_ASSIGNMENT_OPERATOR','syntax.py',191),
  ('ASSIGNMENT_OPERATOR -> MOD_EQUAL','ASSIGNMENT_OPERATOR',1,'p_ASSIGNMENT_OPERATOR','syntax.py',192),
  ('ASSIGNMENT_OPERATOR -> AND_EQUAL','ASSIGNMENT_OPERATOR',1,'p_ASSIGNMENT_OPERATOR','syntax.py',193),
  ('ASSIGNMENT_OPERATOR -> OR_EQUAL','ASSIGNMENT_OPERATOR',1,'p_ASSIGNMENT_OPERATOR','syntax.py',194),
  ('ASSIGNMENT_OPERATOR -> XOR_EQUAL','ASSIGNMENT_OPERATOR',1,'p_ASSIGNMENT_OPERATOR','syntax.py',195),
  ('ASSIGNMENT_OPERATOR -> COMPLEMENT_EQUAL','ASSIGNMENT_OPERATOR',1,'p_ASSIGNMENT_OPERATOR','syntax.py',196),
  ('ASSIGNMENT_OPERATOR -> SHIFTL_EQUAL','ASSIGNMENT_OPERATOR',1,'p_ASSIGNMENT_OPERATOR','syntax.py',197),
  ('ASSIGNMENT_OPERATOR -> SHIFTR_EQUAL','ASSIGNMENT_OPERATOR',1,'p_ASSIGNMENT_OPERATOR','syntax.py',198),
  ('COMENTARIOLEX -> COMMENT','COMENTARIOLEX',1,'p_COMENTARIOLEX','syntax.py',205),
  ('VARIABLELEX -> VARNAME','VARIABLELEX',1,'p_VARIABLELEX','syntax.py',212),
  ('OPERATOR -> PLUS','OPERATOR',1,'p_OPERATOR','syntax.py',219),
  ('OPERATOR -> MINUS','OPERATOR',1,'p_OPERATOR','syntax.py',220),
  ('OPERATOR -> TIMES','OPERATOR',1,'p_OPERATOR','syntax.py',221),
  ('OPERATOR -> MODULUS','OPERATOR',1,'p_OPERATOR','syntax.py',222),
  ('OPERATOR -> DIVIDE','OPERATOR',1,'p_OPERATOR','syntax.py',223),
  ('OPERATION -> NUMBER OPERATOR NUMBER','OPERATION',3,'p_OPERATION','syntax.py',230),
  ('OPERATIONS -> OPERATION','OPERATIONS',1,'p_OPERATIONS','syntax.py',237),
  ('OPERATIONS -> OPERATION OPERATOR OPERATIONS','OPERATIONS',3,'p_OPERATIONS','syntax.py',238),
  ('COMPARISON_OPERATOR -> EQUAL_TO','COMPARISON_OPERATOR',1,'p_COMPARISON_OPERATOR','syntax.py',245),
  ('COMPARISON_OPERATOR -> NOT_EQUAL','COMPARISON_OPERATOR',1,'p_COMPARISON_OPERATOR','syntax.py',246),
  ('COMPARISON_OPERATOR -> GREATER_THAN','COMPARISON_OPERATOR',1,'p_COMPARISON_OPERATOR','syntax.py',247),
  ('COMPARISON_OPERATOR -> LESS_THAN','COMPARISON_OPERATOR',1,'p_COMPARISON_OPERATOR','syntax.py',248),
  ('COMPARISON_OPERATOR -> GREATER_EQUAL','COMPARISON_OPERATOR',1,'p_COMPARISON_OPERATOR','syntax.py',249),
  ('COMPARISON_OPERATOR -> LESS_EQUAL','COMPARISON_OPERATOR',1,'p_COMPARISON_OPERATOR','syntax.py',250),
  ('COMPARISON -> VALUE COMPARISON_OPERATOR VALUE','COMPARISON',3,'p_COMPARISON','syntax.py',257),
  ('COMPARISONS -> COMPARISON','COMPARISONS',1,'p_COMPARISONS','syntax.py',264),
  ('COMPARISONS -> COMPARISON LOGICAL_OPERATOR COMPARISONS','COMPARISONS',3,'p_COMPARISONS','syntax.py',265),
  ('LOGICAL_OPERATOR -> AND','LOGICAL_OPERATOR',1,'p_LOGICAL_OPERATOR','syntax.py',272),
  ('LOGICAL_OPERATOR -> OR','LOGICAL_OPERATOR',1,'p_LOGICAL_OPERATOR','syntax.py',273),
  ('LOGICAL_OPERATOR -> NOT','LOGICAL_OPERATOR',1,'p_LOGICAL_OPERATOR','syntax.py',274),
  ('SENTENCE -> NUMBER','SENTENCE',1,'p_SENTENCE','syntax.py',281),
  ('SENTENCE -> VARNAME','SENTENCE',1,'p_SENTENCE','syntax.py',282),
]
